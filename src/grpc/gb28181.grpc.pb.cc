// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: gb28181.proto

#include "gb28181.pb.h"
#include "gb28181.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace GB28181 {

static const char* Greeter_method_names[] = {
  "/GB28181.Greeter/PtzCommand",
  "/GB28181.Greeter/PtzZoomIn",
  "/GB28181.Greeter/PtzZoomOut",
  "/GB28181.Greeter/PtzIrisBig",
  "/GB28181.Greeter/PtzIrisSmall",
  "/GB28181.Greeter/PtzFocusOut",
  "/GB28181.Greeter/PtzFocusIn",
  "/GB28181.Greeter/PtzIFStop",
  "/GB28181.Greeter/PtzStop",
  "/GB28181.Greeter/GetRealPlayUrl",
  "/GB28181.Greeter/GetRTMPUrl",
  "/GB28181.Greeter/GetHLSUrl",
  "/GB28181.Greeter/GetRealPlayUrlIn",
  "/GB28181.Greeter/GetRTMPUrlIn",
  "/GB28181.Greeter/GetHLSUrlIn",
  "/GB28181.Greeter/StopVideoById",
  "/GB28181.Greeter/StopVideoBySsrc",
  "/GB28181.Greeter/GetPlayBackUrl",
  "/GB28181.Greeter/PresetGo",
  "/GB28181.Greeter/PresetSet",
  "/GB28181.Greeter/PresetDel",
  "/GB28181.Greeter/PresetQuery",
  "/GB28181.Greeter/GetPreset",
  "/GB28181.Greeter/QueryRecord",
  "/GB28181.Greeter/GetRecord",
  "/GB28181.Greeter/PlayFast",
  "/GB28181.Greeter/PlaySlow",
  "/GB28181.Greeter/Pause",
  "/GB28181.Greeter/Play",
  "/GB28181.Greeter/Seek",
  "/GB28181.Greeter/GoForward",
  "/GB28181.Greeter/StopPlayRecord",
  "/GB28181.Greeter/GoBack",
  "/GB28181.Greeter/RecordDownload",
  "/GB28181.Greeter/GetDeviceStatus",
  "/GB28181.Greeter/GetAllDeviceStatus",
  "/GB28181.Greeter/GetDeviceList",
  "/GB28181.Greeter/DeviceReboot",
  "/GB28181.Greeter/StartBroadcast",
  "/GB28181.Greeter/StopBroadcast",
  "/GB28181.Greeter/StartTalk",
  "/GB28181.Greeter/StopTalk",
  "/GB28181.Greeter/ServiceStatus",
  "/GB28181.Greeter/OnvifPtzMove",
  "/GB28181.Greeter/OnvifPtzStop",
  "/GB28181.Greeter/OnvifZoomIn",
  "/GB28181.Greeter/OnvifZoomOut",
  "/GB28181.Greeter/OnvifZoomStop",
  "/GB28181.Greeter/OnvifFocusNear",
  "/GB28181.Greeter/OnvifFocusFar",
  "/GB28181.Greeter/OnvifFocusStop",
  "/GB28181.Greeter/OnvifPtz3D",
  "/GB28181.Greeter/OnvifGetPreset",
  "/GB28181.Greeter/OnvifGotoPreset",
  "/GB28181.Greeter/OnvifSetPreset",
  "/GB28181.Greeter/OnvifDeviceReboot",
  "/GB28181.Greeter/OnvifGetMainUrl",
  "/GB28181.Greeter/OnvifGetSubUrl",
};

std::unique_ptr< Greeter::Stub> Greeter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Greeter::Stub> stub(new Greeter::Stub(channel));
  return stub;
}

Greeter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_PtzCommand_(Greeter_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PtzZoomIn_(Greeter_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PtzZoomOut_(Greeter_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PtzIrisBig_(Greeter_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PtzIrisSmall_(Greeter_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PtzFocusOut_(Greeter_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PtzFocusIn_(Greeter_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PtzIFStop_(Greeter_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PtzStop_(Greeter_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRealPlayUrl_(Greeter_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRTMPUrl_(Greeter_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHLSUrl_(Greeter_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRealPlayUrlIn_(Greeter_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRTMPUrlIn_(Greeter_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetHLSUrlIn_(Greeter_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopVideoById_(Greeter_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopVideoBySsrc_(Greeter_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPlayBackUrl_(Greeter_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresetGo_(Greeter_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresetSet_(Greeter_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresetDel_(Greeter_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PresetQuery_(Greeter_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPreset_(Greeter_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QueryRecord_(Greeter_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRecord_(Greeter_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlayFast_(Greeter_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PlaySlow_(Greeter_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Pause_(Greeter_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Play_(Greeter_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Seek_(Greeter_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GoForward_(Greeter_method_names[30], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopPlayRecord_(Greeter_method_names[31], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GoBack_(Greeter_method_names[32], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RecordDownload_(Greeter_method_names[33], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceStatus_(Greeter_method_names[34], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetAllDeviceStatus_(Greeter_method_names[35], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDeviceList_(Greeter_method_names[36], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeviceReboot_(Greeter_method_names[37], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartBroadcast_(Greeter_method_names[38], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopBroadcast_(Greeter_method_names[39], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartTalk_(Greeter_method_names[40], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopTalk_(Greeter_method_names[41], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServiceStatus_(Greeter_method_names[42], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifPtzMove_(Greeter_method_names[43], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifPtzStop_(Greeter_method_names[44], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifZoomIn_(Greeter_method_names[45], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifZoomOut_(Greeter_method_names[46], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifZoomStop_(Greeter_method_names[47], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifFocusNear_(Greeter_method_names[48], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifFocusFar_(Greeter_method_names[49], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifFocusStop_(Greeter_method_names[50], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifPtz3D_(Greeter_method_names[51], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifGetPreset_(Greeter_method_names[52], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifGotoPreset_(Greeter_method_names[53], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifSetPreset_(Greeter_method_names[54], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifDeviceReboot_(Greeter_method_names[55], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifGetMainUrl_(Greeter_method_names[56], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_OnvifGetSubUrl_(Greeter_method_names[57], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Greeter::Stub::PtzCommand(::grpc::ClientContext* context, const ::GB28181::PtzCommandRequest& request, ::GB28181::ControlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzCommand_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzCommand(::grpc::ClientContext* context, const ::GB28181::PtzCommandRequest* request, ::GB28181::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzCommand_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzCommand_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzCommand(::grpc::ClientContext* context, const ::GB28181::PtzCommandRequest* request, ::GB28181::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzCommand_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzCommand(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzCommand_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ControlReply>* Greeter::Stub::AsyncPtzCommandRaw(::grpc::ClientContext* context, const ::GB28181::PtzCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ControlReply>::Create(channel_.get(), cq, rpcmethod_PtzCommand_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ControlReply>* Greeter::Stub::PrepareAsyncPtzCommandRaw(::grpc::ClientContext* context, const ::GB28181::PtzCommandRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ControlReply>::Create(channel_.get(), cq, rpcmethod_PtzCommand_, context, request, false);
}

::grpc::Status Greeter::Stub::PtzZoomIn(::grpc::ClientContext* context, const ::GB28181::PtzZoomInRequest& request, ::GB28181::PtzZoomInReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzZoomIn_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzZoomIn(::grpc::ClientContext* context, const ::GB28181::PtzZoomInRequest* request, ::GB28181::PtzZoomInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzZoomIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzZoomInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzZoomIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzZoomIn(::grpc::ClientContext* context, const ::GB28181::PtzZoomInRequest* request, ::GB28181::PtzZoomInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzZoomIn_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzZoomInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzZoomIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzZoomInReply>* Greeter::Stub::AsyncPtzZoomInRaw(::grpc::ClientContext* context, const ::GB28181::PtzZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzZoomInReply>::Create(channel_.get(), cq, rpcmethod_PtzZoomIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzZoomInReply>* Greeter::Stub::PrepareAsyncPtzZoomInRaw(::grpc::ClientContext* context, const ::GB28181::PtzZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzZoomInReply>::Create(channel_.get(), cq, rpcmethod_PtzZoomIn_, context, request, false);
}

::grpc::Status Greeter::Stub::PtzZoomOut(::grpc::ClientContext* context, const ::GB28181::PtzZoomOutRequest& request, ::GB28181::PtzZoomOutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzZoomOut_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzZoomOut(::grpc::ClientContext* context, const ::GB28181::PtzZoomOutRequest* request, ::GB28181::PtzZoomOutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzZoomOut_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzZoomOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzZoomOutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzZoomOut_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzZoomOut(::grpc::ClientContext* context, const ::GB28181::PtzZoomOutRequest* request, ::GB28181::PtzZoomOutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzZoomOut_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzZoomOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzZoomOutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzZoomOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzZoomOutReply>* Greeter::Stub::AsyncPtzZoomOutRaw(::grpc::ClientContext* context, const ::GB28181::PtzZoomOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzZoomOutReply>::Create(channel_.get(), cq, rpcmethod_PtzZoomOut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzZoomOutReply>* Greeter::Stub::PrepareAsyncPtzZoomOutRaw(::grpc::ClientContext* context, const ::GB28181::PtzZoomOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzZoomOutReply>::Create(channel_.get(), cq, rpcmethod_PtzZoomOut_, context, request, false);
}

::grpc::Status Greeter::Stub::PtzIrisBig(::grpc::ClientContext* context, const ::GB28181::PtzIrisBigRequest& request, ::GB28181::PtzIrisBigReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzIrisBig_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzIrisBig(::grpc::ClientContext* context, const ::GB28181::PtzIrisBigRequest* request, ::GB28181::PtzIrisBigReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzIrisBig_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzIrisBig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzIrisBigReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzIrisBig_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzIrisBig(::grpc::ClientContext* context, const ::GB28181::PtzIrisBigRequest* request, ::GB28181::PtzIrisBigReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzIrisBig_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzIrisBig(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzIrisBigReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzIrisBig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzIrisBigReply>* Greeter::Stub::AsyncPtzIrisBigRaw(::grpc::ClientContext* context, const ::GB28181::PtzIrisBigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzIrisBigReply>::Create(channel_.get(), cq, rpcmethod_PtzIrisBig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzIrisBigReply>* Greeter::Stub::PrepareAsyncPtzIrisBigRaw(::grpc::ClientContext* context, const ::GB28181::PtzIrisBigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzIrisBigReply>::Create(channel_.get(), cq, rpcmethod_PtzIrisBig_, context, request, false);
}

::grpc::Status Greeter::Stub::PtzIrisSmall(::grpc::ClientContext* context, const ::GB28181::PtzIrisSmallRequest& request, ::GB28181::PtzIrisSmallReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzIrisSmall_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzIrisSmall(::grpc::ClientContext* context, const ::GB28181::PtzIrisSmallRequest* request, ::GB28181::PtzIrisSmallReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzIrisSmall_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzIrisSmall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzIrisSmallReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzIrisSmall_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzIrisSmall(::grpc::ClientContext* context, const ::GB28181::PtzIrisSmallRequest* request, ::GB28181::PtzIrisSmallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzIrisSmall_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzIrisSmall(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzIrisSmallReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzIrisSmall_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzIrisSmallReply>* Greeter::Stub::AsyncPtzIrisSmallRaw(::grpc::ClientContext* context, const ::GB28181::PtzIrisSmallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzIrisSmallReply>::Create(channel_.get(), cq, rpcmethod_PtzIrisSmall_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzIrisSmallReply>* Greeter::Stub::PrepareAsyncPtzIrisSmallRaw(::grpc::ClientContext* context, const ::GB28181::PtzIrisSmallRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzIrisSmallReply>::Create(channel_.get(), cq, rpcmethod_PtzIrisSmall_, context, request, false);
}

::grpc::Status Greeter::Stub::PtzFocusOut(::grpc::ClientContext* context, const ::GB28181::PtzFocusOutRequest& request, ::GB28181::PtzFocusOutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzFocusOut_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzFocusOut(::grpc::ClientContext* context, const ::GB28181::PtzFocusOutRequest* request, ::GB28181::PtzFocusOutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzFocusOut_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzFocusOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzFocusOutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzFocusOut_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzFocusOut(::grpc::ClientContext* context, const ::GB28181::PtzFocusOutRequest* request, ::GB28181::PtzFocusOutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzFocusOut_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzFocusOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzFocusOutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzFocusOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzFocusOutReply>* Greeter::Stub::AsyncPtzFocusOutRaw(::grpc::ClientContext* context, const ::GB28181::PtzFocusOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzFocusOutReply>::Create(channel_.get(), cq, rpcmethod_PtzFocusOut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzFocusOutReply>* Greeter::Stub::PrepareAsyncPtzFocusOutRaw(::grpc::ClientContext* context, const ::GB28181::PtzFocusOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzFocusOutReply>::Create(channel_.get(), cq, rpcmethod_PtzFocusOut_, context, request, false);
}

::grpc::Status Greeter::Stub::PtzFocusIn(::grpc::ClientContext* context, const ::GB28181::PtzFocusInRequest& request, ::GB28181::PtzFocusInReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzFocusIn_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzFocusIn(::grpc::ClientContext* context, const ::GB28181::PtzFocusInRequest* request, ::GB28181::PtzFocusInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzFocusIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzFocusIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzFocusInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzFocusIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzFocusIn(::grpc::ClientContext* context, const ::GB28181::PtzFocusInRequest* request, ::GB28181::PtzFocusInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzFocusIn_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzFocusIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzFocusInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzFocusIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzFocusInReply>* Greeter::Stub::AsyncPtzFocusInRaw(::grpc::ClientContext* context, const ::GB28181::PtzFocusInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzFocusInReply>::Create(channel_.get(), cq, rpcmethod_PtzFocusIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzFocusInReply>* Greeter::Stub::PrepareAsyncPtzFocusInRaw(::grpc::ClientContext* context, const ::GB28181::PtzFocusInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzFocusInReply>::Create(channel_.get(), cq, rpcmethod_PtzFocusIn_, context, request, false);
}

::grpc::Status Greeter::Stub::PtzIFStop(::grpc::ClientContext* context, const ::GB28181::PtzIFStopRequest& request, ::GB28181::PtzIFStopReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzIFStop_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzIFStop(::grpc::ClientContext* context, const ::GB28181::PtzIFStopRequest* request, ::GB28181::PtzIFStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzIFStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzIFStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzIFStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzIFStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzIFStop(::grpc::ClientContext* context, const ::GB28181::PtzIFStopRequest* request, ::GB28181::PtzIFStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzIFStop_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzIFStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzIFStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzIFStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzIFStopReply>* Greeter::Stub::AsyncPtzIFStopRaw(::grpc::ClientContext* context, const ::GB28181::PtzIFStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzIFStopReply>::Create(channel_.get(), cq, rpcmethod_PtzIFStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzIFStopReply>* Greeter::Stub::PrepareAsyncPtzIFStopRaw(::grpc::ClientContext* context, const ::GB28181::PtzIFStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzIFStopReply>::Create(channel_.get(), cq, rpcmethod_PtzIFStop_, context, request, false);
}

::grpc::Status Greeter::Stub::PtzStop(::grpc::ClientContext* context, const ::GB28181::PtzStopRequest& request, ::GB28181::PtzStopReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PtzStop_, context, request, response);
}

void Greeter::Stub::experimental_async::PtzStop(::grpc::ClientContext* context, const ::GB28181::PtzStopRequest* request, ::GB28181::PtzStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PtzStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PtzStop(::grpc::ClientContext* context, const ::GB28181::PtzStopRequest* request, ::GB28181::PtzStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzStop_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PtzStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PtzStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PtzStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzStopReply>* Greeter::Stub::AsyncPtzStopRaw(::grpc::ClientContext* context, const ::GB28181::PtzStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzStopReply>::Create(channel_.get(), cq, rpcmethod_PtzStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PtzStopReply>* Greeter::Stub::PrepareAsyncPtzStopRaw(::grpc::ClientContext* context, const ::GB28181::PtzStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PtzStopReply>::Create(channel_.get(), cq, rpcmethod_PtzStop_, context, request, false);
}

::grpc::Status Greeter::Stub::GetRealPlayUrl(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlRequest& request, ::GB28181::RealPlayUrlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRealPlayUrl_, context, request, response);
}

void Greeter::Stub::experimental_async::GetRealPlayUrl(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlRequest* request, ::GB28181::RealPlayUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRealPlayUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRealPlayUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::RealPlayUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRealPlayUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRealPlayUrl(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlRequest* request, ::GB28181::RealPlayUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRealPlayUrl_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetRealPlayUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::RealPlayUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRealPlayUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::RealPlayUrlReply>* Greeter::Stub::AsyncGetRealPlayUrlRaw(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::RealPlayUrlReply>::Create(channel_.get(), cq, rpcmethod_GetRealPlayUrl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::RealPlayUrlReply>* Greeter::Stub::PrepareAsyncGetRealPlayUrlRaw(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::RealPlayUrlReply>::Create(channel_.get(), cq, rpcmethod_GetRealPlayUrl_, context, request, false);
}

::grpc::Status Greeter::Stub::GetRTMPUrl(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlRequest& request, ::GB28181::GetRTMPUrlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRTMPUrl_, context, request, response);
}

void Greeter::Stub::experimental_async::GetRTMPUrl(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlRequest* request, ::GB28181::GetRTMPUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRTMPUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRTMPUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetRTMPUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRTMPUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRTMPUrl(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlRequest* request, ::GB28181::GetRTMPUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRTMPUrl_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetRTMPUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetRTMPUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRTMPUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetRTMPUrlReply>* Greeter::Stub::AsyncGetRTMPUrlRaw(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetRTMPUrlReply>::Create(channel_.get(), cq, rpcmethod_GetRTMPUrl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetRTMPUrlReply>* Greeter::Stub::PrepareAsyncGetRTMPUrlRaw(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetRTMPUrlReply>::Create(channel_.get(), cq, rpcmethod_GetRTMPUrl_, context, request, false);
}

::grpc::Status Greeter::Stub::GetHLSUrl(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlRequest& request, ::GB28181::GetHLSUrlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHLSUrl_, context, request, response);
}

void Greeter::Stub::experimental_async::GetHLSUrl(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlRequest* request, ::GB28181::GetHLSUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHLSUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetHLSUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetHLSUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHLSUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetHLSUrl(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlRequest* request, ::GB28181::GetHLSUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHLSUrl_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetHLSUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetHLSUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHLSUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetHLSUrlReply>* Greeter::Stub::AsyncGetHLSUrlRaw(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetHLSUrlReply>::Create(channel_.get(), cq, rpcmethod_GetHLSUrl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetHLSUrlReply>* Greeter::Stub::PrepareAsyncGetHLSUrlRaw(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetHLSUrlReply>::Create(channel_.get(), cq, rpcmethod_GetHLSUrl_, context, request, false);
}

::grpc::Status Greeter::Stub::GetRealPlayUrlIn(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlInRequest& request, ::GB28181::RealPlayUrlInReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRealPlayUrlIn_, context, request, response);
}

void Greeter::Stub::experimental_async::GetRealPlayUrlIn(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlInRequest* request, ::GB28181::RealPlayUrlInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRealPlayUrlIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRealPlayUrlIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::RealPlayUrlInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRealPlayUrlIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRealPlayUrlIn(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlInRequest* request, ::GB28181::RealPlayUrlInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRealPlayUrlIn_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetRealPlayUrlIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::RealPlayUrlInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRealPlayUrlIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::RealPlayUrlInReply>* Greeter::Stub::AsyncGetRealPlayUrlInRaw(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::RealPlayUrlInReply>::Create(channel_.get(), cq, rpcmethod_GetRealPlayUrlIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::RealPlayUrlInReply>* Greeter::Stub::PrepareAsyncGetRealPlayUrlInRaw(::grpc::ClientContext* context, const ::GB28181::RealPlayUrlInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::RealPlayUrlInReply>::Create(channel_.get(), cq, rpcmethod_GetRealPlayUrlIn_, context, request, false);
}

::grpc::Status Greeter::Stub::GetRTMPUrlIn(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlInRequest& request, ::GB28181::GetRTMPUrlInReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRTMPUrlIn_, context, request, response);
}

void Greeter::Stub::experimental_async::GetRTMPUrlIn(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlInRequest* request, ::GB28181::GetRTMPUrlInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRTMPUrlIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRTMPUrlIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetRTMPUrlInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRTMPUrlIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRTMPUrlIn(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlInRequest* request, ::GB28181::GetRTMPUrlInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRTMPUrlIn_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetRTMPUrlIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetRTMPUrlInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRTMPUrlIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetRTMPUrlInReply>* Greeter::Stub::AsyncGetRTMPUrlInRaw(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetRTMPUrlInReply>::Create(channel_.get(), cq, rpcmethod_GetRTMPUrlIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetRTMPUrlInReply>* Greeter::Stub::PrepareAsyncGetRTMPUrlInRaw(::grpc::ClientContext* context, const ::GB28181::GetRTMPUrlInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetRTMPUrlInReply>::Create(channel_.get(), cq, rpcmethod_GetRTMPUrlIn_, context, request, false);
}

::grpc::Status Greeter::Stub::GetHLSUrlIn(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlInRequest& request, ::GB28181::GetHLSUrlInReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetHLSUrlIn_, context, request, response);
}

void Greeter::Stub::experimental_async::GetHLSUrlIn(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlInRequest* request, ::GB28181::GetHLSUrlInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHLSUrlIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetHLSUrlIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetHLSUrlInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetHLSUrlIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetHLSUrlIn(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlInRequest* request, ::GB28181::GetHLSUrlInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHLSUrlIn_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetHLSUrlIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetHLSUrlInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetHLSUrlIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetHLSUrlInReply>* Greeter::Stub::AsyncGetHLSUrlInRaw(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetHLSUrlInReply>::Create(channel_.get(), cq, rpcmethod_GetHLSUrlIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetHLSUrlInReply>* Greeter::Stub::PrepareAsyncGetHLSUrlInRaw(::grpc::ClientContext* context, const ::GB28181::GetHLSUrlInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetHLSUrlInReply>::Create(channel_.get(), cq, rpcmethod_GetHLSUrlIn_, context, request, false);
}

::grpc::Status Greeter::Stub::StopVideoById(::grpc::ClientContext* context, const ::GB28181::StopVideoByIdRequest& request, ::GB28181::StopVideoByIdReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopVideoById_, context, request, response);
}

void Greeter::Stub::experimental_async::StopVideoById(::grpc::ClientContext* context, const ::GB28181::StopVideoByIdRequest* request, ::GB28181::StopVideoByIdReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopVideoById_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopVideoById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopVideoByIdReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopVideoById_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopVideoById(::grpc::ClientContext* context, const ::GB28181::StopVideoByIdRequest* request, ::GB28181::StopVideoByIdReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopVideoById_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::StopVideoById(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopVideoByIdReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopVideoById_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopVideoByIdReply>* Greeter::Stub::AsyncStopVideoByIdRaw(::grpc::ClientContext* context, const ::GB28181::StopVideoByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopVideoByIdReply>::Create(channel_.get(), cq, rpcmethod_StopVideoById_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopVideoByIdReply>* Greeter::Stub::PrepareAsyncStopVideoByIdRaw(::grpc::ClientContext* context, const ::GB28181::StopVideoByIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopVideoByIdReply>::Create(channel_.get(), cq, rpcmethod_StopVideoById_, context, request, false);
}

::grpc::Status Greeter::Stub::StopVideoBySsrc(::grpc::ClientContext* context, const ::GB28181::StopVideoBySsrcRequest& request, ::GB28181::StopVideoBySsrcReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopVideoBySsrc_, context, request, response);
}

void Greeter::Stub::experimental_async::StopVideoBySsrc(::grpc::ClientContext* context, const ::GB28181::StopVideoBySsrcRequest* request, ::GB28181::StopVideoBySsrcReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopVideoBySsrc_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopVideoBySsrc(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopVideoBySsrcReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopVideoBySsrc_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopVideoBySsrc(::grpc::ClientContext* context, const ::GB28181::StopVideoBySsrcRequest* request, ::GB28181::StopVideoBySsrcReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopVideoBySsrc_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::StopVideoBySsrc(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopVideoBySsrcReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopVideoBySsrc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopVideoBySsrcReply>* Greeter::Stub::AsyncStopVideoBySsrcRaw(::grpc::ClientContext* context, const ::GB28181::StopVideoBySsrcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopVideoBySsrcReply>::Create(channel_.get(), cq, rpcmethod_StopVideoBySsrc_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopVideoBySsrcReply>* Greeter::Stub::PrepareAsyncStopVideoBySsrcRaw(::grpc::ClientContext* context, const ::GB28181::StopVideoBySsrcRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopVideoBySsrcReply>::Create(channel_.get(), cq, rpcmethod_StopVideoBySsrc_, context, request, false);
}

::grpc::Status Greeter::Stub::GetPlayBackUrl(::grpc::ClientContext* context, const ::GB28181::PlayBackUrlRequest& request, ::GB28181::PlayBackUrlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPlayBackUrl_, context, request, response);
}

void Greeter::Stub::experimental_async::GetPlayBackUrl(::grpc::ClientContext* context, const ::GB28181::PlayBackUrlRequest* request, ::GB28181::PlayBackUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayBackUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetPlayBackUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PlayBackUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPlayBackUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetPlayBackUrl(::grpc::ClientContext* context, const ::GB28181::PlayBackUrlRequest* request, ::GB28181::PlayBackUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayBackUrl_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetPlayBackUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PlayBackUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPlayBackUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PlayBackUrlReply>* Greeter::Stub::AsyncGetPlayBackUrlRaw(::grpc::ClientContext* context, const ::GB28181::PlayBackUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PlayBackUrlReply>::Create(channel_.get(), cq, rpcmethod_GetPlayBackUrl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PlayBackUrlReply>* Greeter::Stub::PrepareAsyncGetPlayBackUrlRaw(::grpc::ClientContext* context, const ::GB28181::PlayBackUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PlayBackUrlReply>::Create(channel_.get(), cq, rpcmethod_GetPlayBackUrl_, context, request, false);
}

::grpc::Status Greeter::Stub::PresetGo(::grpc::ClientContext* context, const ::GB28181::PresetGoRequest& request, ::GB28181::ControlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PresetGo_, context, request, response);
}

void Greeter::Stub::experimental_async::PresetGo(::grpc::ClientContext* context, const ::GB28181::PresetGoRequest* request, ::GB28181::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresetGo_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PresetGo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresetGo_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PresetGo(::grpc::ClientContext* context, const ::GB28181::PresetGoRequest* request, ::GB28181::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresetGo_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PresetGo(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresetGo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ControlReply>* Greeter::Stub::AsyncPresetGoRaw(::grpc::ClientContext* context, const ::GB28181::PresetGoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ControlReply>::Create(channel_.get(), cq, rpcmethod_PresetGo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ControlReply>* Greeter::Stub::PrepareAsyncPresetGoRaw(::grpc::ClientContext* context, const ::GB28181::PresetGoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ControlReply>::Create(channel_.get(), cq, rpcmethod_PresetGo_, context, request, false);
}

::grpc::Status Greeter::Stub::PresetSet(::grpc::ClientContext* context, const ::GB28181::PresetSetRequest& request, ::GB28181::ControlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PresetSet_, context, request, response);
}

void Greeter::Stub::experimental_async::PresetSet(::grpc::ClientContext* context, const ::GB28181::PresetSetRequest* request, ::GB28181::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresetSet_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PresetSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresetSet_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PresetSet(::grpc::ClientContext* context, const ::GB28181::PresetSetRequest* request, ::GB28181::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresetSet_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PresetSet(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresetSet_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ControlReply>* Greeter::Stub::AsyncPresetSetRaw(::grpc::ClientContext* context, const ::GB28181::PresetSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ControlReply>::Create(channel_.get(), cq, rpcmethod_PresetSet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ControlReply>* Greeter::Stub::PrepareAsyncPresetSetRaw(::grpc::ClientContext* context, const ::GB28181::PresetSetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ControlReply>::Create(channel_.get(), cq, rpcmethod_PresetSet_, context, request, false);
}

::grpc::Status Greeter::Stub::PresetDel(::grpc::ClientContext* context, const ::GB28181::PresetDelRequest& request, ::GB28181::ControlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PresetDel_, context, request, response);
}

void Greeter::Stub::experimental_async::PresetDel(::grpc::ClientContext* context, const ::GB28181::PresetDelRequest* request, ::GB28181::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresetDel_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PresetDel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ControlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresetDel_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PresetDel(::grpc::ClientContext* context, const ::GB28181::PresetDelRequest* request, ::GB28181::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresetDel_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PresetDel(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ControlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresetDel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ControlReply>* Greeter::Stub::AsyncPresetDelRaw(::grpc::ClientContext* context, const ::GB28181::PresetDelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ControlReply>::Create(channel_.get(), cq, rpcmethod_PresetDel_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ControlReply>* Greeter::Stub::PrepareAsyncPresetDelRaw(::grpc::ClientContext* context, const ::GB28181::PresetDelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ControlReply>::Create(channel_.get(), cq, rpcmethod_PresetDel_, context, request, false);
}

::grpc::Status Greeter::Stub::PresetQuery(::grpc::ClientContext* context, const ::GB28181::PresetQueryRequest& request, ::GB28181::PresetQueryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PresetQuery_, context, request, response);
}

void Greeter::Stub::experimental_async::PresetQuery(::grpc::ClientContext* context, const ::GB28181::PresetQueryRequest* request, ::GB28181::PresetQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresetQuery_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PresetQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PresetQueryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PresetQuery_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PresetQuery(::grpc::ClientContext* context, const ::GB28181::PresetQueryRequest* request, ::GB28181::PresetQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresetQuery_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PresetQuery(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PresetQueryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PresetQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PresetQueryReply>* Greeter::Stub::AsyncPresetQueryRaw(::grpc::ClientContext* context, const ::GB28181::PresetQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PresetQueryReply>::Create(channel_.get(), cq, rpcmethod_PresetQuery_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PresetQueryReply>* Greeter::Stub::PrepareAsyncPresetQueryRaw(::grpc::ClientContext* context, const ::GB28181::PresetQueryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PresetQueryReply>::Create(channel_.get(), cq, rpcmethod_PresetQuery_, context, request, false);
}

::grpc::Status Greeter::Stub::GetPreset(::grpc::ClientContext* context, const ::GB28181::GetPresetRequest& request, ::GB28181::GetPresetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPreset_, context, request, response);
}

void Greeter::Stub::experimental_async::GetPreset(::grpc::ClientContext* context, const ::GB28181::GetPresetRequest* request, ::GB28181::GetPresetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPreset_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetPreset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetPresetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPreset_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetPreset(::grpc::ClientContext* context, const ::GB28181::GetPresetRequest* request, ::GB28181::GetPresetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPreset_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetPreset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetPresetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetPreset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetPresetReply>* Greeter::Stub::AsyncGetPresetRaw(::grpc::ClientContext* context, const ::GB28181::GetPresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetPresetReply>::Create(channel_.get(), cq, rpcmethod_GetPreset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetPresetReply>* Greeter::Stub::PrepareAsyncGetPresetRaw(::grpc::ClientContext* context, const ::GB28181::GetPresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetPresetReply>::Create(channel_.get(), cq, rpcmethod_GetPreset_, context, request, false);
}

::grpc::Status Greeter::Stub::QueryRecord(::grpc::ClientContext* context, const ::GB28181::QueryRecordRequest& request, ::GB28181::QueryRecordReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_QueryRecord_, context, request, response);
}

void Greeter::Stub::experimental_async::QueryRecord(::grpc::ClientContext* context, const ::GB28181::QueryRecordRequest* request, ::GB28181::QueryRecordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryRecord_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::QueryRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::QueryRecordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_QueryRecord_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::QueryRecord(::grpc::ClientContext* context, const ::GB28181::QueryRecordRequest* request, ::GB28181::QueryRecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryRecord_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::QueryRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::QueryRecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_QueryRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::QueryRecordReply>* Greeter::Stub::AsyncQueryRecordRaw(::grpc::ClientContext* context, const ::GB28181::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::QueryRecordReply>::Create(channel_.get(), cq, rpcmethod_QueryRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::QueryRecordReply>* Greeter::Stub::PrepareAsyncQueryRecordRaw(::grpc::ClientContext* context, const ::GB28181::QueryRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::QueryRecordReply>::Create(channel_.get(), cq, rpcmethod_QueryRecord_, context, request, false);
}

::grpc::Status Greeter::Stub::GetRecord(::grpc::ClientContext* context, const ::GB28181::GetRecordRequest& request, ::GB28181::GetRecordReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRecord_, context, request, response);
}

void Greeter::Stub::experimental_async::GetRecord(::grpc::ClientContext* context, const ::GB28181::GetRecordRequest* request, ::GB28181::GetRecordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRecord_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetRecordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRecord_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetRecord(::grpc::ClientContext* context, const ::GB28181::GetRecordRequest* request, ::GB28181::GetRecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecord_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetRecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetRecordReply>* Greeter::Stub::AsyncGetRecordRaw(::grpc::ClientContext* context, const ::GB28181::GetRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetRecordReply>::Create(channel_.get(), cq, rpcmethod_GetRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetRecordReply>* Greeter::Stub::PrepareAsyncGetRecordRaw(::grpc::ClientContext* context, const ::GB28181::GetRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetRecordReply>::Create(channel_.get(), cq, rpcmethod_GetRecord_, context, request, false);
}

::grpc::Status Greeter::Stub::PlayFast(::grpc::ClientContext* context, const ::GB28181::PlayFastRequest& request, ::GB28181::PlayFastReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlayFast_, context, request, response);
}

void Greeter::Stub::experimental_async::PlayFast(::grpc::ClientContext* context, const ::GB28181::PlayFastRequest* request, ::GB28181::PlayFastReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayFast_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PlayFast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PlayFastReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlayFast_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PlayFast(::grpc::ClientContext* context, const ::GB28181::PlayFastRequest* request, ::GB28181::PlayFastReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayFast_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PlayFast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PlayFastReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlayFast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PlayFastReply>* Greeter::Stub::AsyncPlayFastRaw(::grpc::ClientContext* context, const ::GB28181::PlayFastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PlayFastReply>::Create(channel_.get(), cq, rpcmethod_PlayFast_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PlayFastReply>* Greeter::Stub::PrepareAsyncPlayFastRaw(::grpc::ClientContext* context, const ::GB28181::PlayFastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PlayFastReply>::Create(channel_.get(), cq, rpcmethod_PlayFast_, context, request, false);
}

::grpc::Status Greeter::Stub::PlaySlow(::grpc::ClientContext* context, const ::GB28181::PlaySlowRequest& request, ::GB28181::PlaySlowReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PlaySlow_, context, request, response);
}

void Greeter::Stub::experimental_async::PlaySlow(::grpc::ClientContext* context, const ::GB28181::PlaySlowRequest* request, ::GB28181::PlaySlowReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlaySlow_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PlaySlow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PlaySlowReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PlaySlow_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::PlaySlow(::grpc::ClientContext* context, const ::GB28181::PlaySlowRequest* request, ::GB28181::PlaySlowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlaySlow_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::PlaySlow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PlaySlowReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_PlaySlow_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PlaySlowReply>* Greeter::Stub::AsyncPlaySlowRaw(::grpc::ClientContext* context, const ::GB28181::PlaySlowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PlaySlowReply>::Create(channel_.get(), cq, rpcmethod_PlaySlow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PlaySlowReply>* Greeter::Stub::PrepareAsyncPlaySlowRaw(::grpc::ClientContext* context, const ::GB28181::PlaySlowRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PlaySlowReply>::Create(channel_.get(), cq, rpcmethod_PlaySlow_, context, request, false);
}

::grpc::Status Greeter::Stub::Pause(::grpc::ClientContext* context, const ::GB28181::PauseRequest& request, ::GB28181::PauseReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Pause_, context, request, response);
}

void Greeter::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::GB28181::PauseRequest* request, ::GB28181::PauseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PauseReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::GB28181::PauseRequest* request, ::GB28181::PauseReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::Pause(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PauseReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Pause_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PauseReply>* Greeter::Stub::AsyncPauseRaw(::grpc::ClientContext* context, const ::GB28181::PauseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PauseReply>::Create(channel_.get(), cq, rpcmethod_Pause_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PauseReply>* Greeter::Stub::PrepareAsyncPauseRaw(::grpc::ClientContext* context, const ::GB28181::PauseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PauseReply>::Create(channel_.get(), cq, rpcmethod_Pause_, context, request, false);
}

::grpc::Status Greeter::Stub::Play(::grpc::ClientContext* context, const ::GB28181::PlayRequest& request, ::GB28181::PlayReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Play_, context, request, response);
}

void Greeter::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::GB28181::PlayRequest* request, ::GB28181::PlayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PlayReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::GB28181::PlayRequest* request, ::GB28181::PlayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::Play(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::PlayReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Play_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PlayReply>* Greeter::Stub::AsyncPlayRaw(::grpc::ClientContext* context, const ::GB28181::PlayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PlayReply>::Create(channel_.get(), cq, rpcmethod_Play_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::PlayReply>* Greeter::Stub::PrepareAsyncPlayRaw(::grpc::ClientContext* context, const ::GB28181::PlayRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::PlayReply>::Create(channel_.get(), cq, rpcmethod_Play_, context, request, false);
}

::grpc::Status Greeter::Stub::Seek(::grpc::ClientContext* context, const ::GB28181::SeekRequest& request, ::GB28181::SeekReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Seek_, context, request, response);
}

void Greeter::Stub::experimental_async::Seek(::grpc::ClientContext* context, const ::GB28181::SeekRequest* request, ::GB28181::SeekReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Seek(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::SeekReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::Seek(::grpc::ClientContext* context, const ::GB28181::SeekRequest* request, ::GB28181::SeekReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::Seek(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::SeekReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_Seek_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::SeekReply>* Greeter::Stub::AsyncSeekRaw(::grpc::ClientContext* context, const ::GB28181::SeekRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::SeekReply>::Create(channel_.get(), cq, rpcmethod_Seek_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::SeekReply>* Greeter::Stub::PrepareAsyncSeekRaw(::grpc::ClientContext* context, const ::GB28181::SeekRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::SeekReply>::Create(channel_.get(), cq, rpcmethod_Seek_, context, request, false);
}

::grpc::Status Greeter::Stub::GoForward(::grpc::ClientContext* context, const ::GB28181::GoForwardRequest& request, ::GB28181::GoForwardReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GoForward_, context, request, response);
}

void Greeter::Stub::experimental_async::GoForward(::grpc::ClientContext* context, const ::GB28181::GoForwardRequest* request, ::GB28181::GoForwardReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GoForward_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GoForward(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GoForwardReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GoForward_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GoForward(::grpc::ClientContext* context, const ::GB28181::GoForwardRequest* request, ::GB28181::GoForwardReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GoForward_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GoForward(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GoForwardReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GoForward_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GoForwardReply>* Greeter::Stub::AsyncGoForwardRaw(::grpc::ClientContext* context, const ::GB28181::GoForwardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GoForwardReply>::Create(channel_.get(), cq, rpcmethod_GoForward_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GoForwardReply>* Greeter::Stub::PrepareAsyncGoForwardRaw(::grpc::ClientContext* context, const ::GB28181::GoForwardRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GoForwardReply>::Create(channel_.get(), cq, rpcmethod_GoForward_, context, request, false);
}

::grpc::Status Greeter::Stub::StopPlayRecord(::grpc::ClientContext* context, const ::GB28181::StopPlayRecordRequest& request, ::GB28181::StopPlayRecordReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopPlayRecord_, context, request, response);
}

void Greeter::Stub::experimental_async::StopPlayRecord(::grpc::ClientContext* context, const ::GB28181::StopPlayRecordRequest* request, ::GB28181::StopPlayRecordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopPlayRecord_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopPlayRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopPlayRecordReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopPlayRecord_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopPlayRecord(::grpc::ClientContext* context, const ::GB28181::StopPlayRecordRequest* request, ::GB28181::StopPlayRecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopPlayRecord_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::StopPlayRecord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopPlayRecordReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopPlayRecord_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopPlayRecordReply>* Greeter::Stub::AsyncStopPlayRecordRaw(::grpc::ClientContext* context, const ::GB28181::StopPlayRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopPlayRecordReply>::Create(channel_.get(), cq, rpcmethod_StopPlayRecord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopPlayRecordReply>* Greeter::Stub::PrepareAsyncStopPlayRecordRaw(::grpc::ClientContext* context, const ::GB28181::StopPlayRecordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopPlayRecordReply>::Create(channel_.get(), cq, rpcmethod_StopPlayRecord_, context, request, false);
}

::grpc::Status Greeter::Stub::GoBack(::grpc::ClientContext* context, const ::GB28181::GoBackRequest& request, ::GB28181::GoBackReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GoBack_, context, request, response);
}

void Greeter::Stub::experimental_async::GoBack(::grpc::ClientContext* context, const ::GB28181::GoBackRequest* request, ::GB28181::GoBackReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GoBack_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GoBack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GoBackReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GoBack_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GoBack(::grpc::ClientContext* context, const ::GB28181::GoBackRequest* request, ::GB28181::GoBackReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GoBack_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GoBack(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GoBackReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GoBack_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GoBackReply>* Greeter::Stub::AsyncGoBackRaw(::grpc::ClientContext* context, const ::GB28181::GoBackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GoBackReply>::Create(channel_.get(), cq, rpcmethod_GoBack_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GoBackReply>* Greeter::Stub::PrepareAsyncGoBackRaw(::grpc::ClientContext* context, const ::GB28181::GoBackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GoBackReply>::Create(channel_.get(), cq, rpcmethod_GoBack_, context, request, false);
}

::grpc::Status Greeter::Stub::RecordDownload(::grpc::ClientContext* context, const ::GB28181::RecordDownloadRequest& request, ::GB28181::RecordDownloadReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RecordDownload_, context, request, response);
}

void Greeter::Stub::experimental_async::RecordDownload(::grpc::ClientContext* context, const ::GB28181::RecordDownloadRequest* request, ::GB28181::RecordDownloadReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecordDownload_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::RecordDownload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::RecordDownloadReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RecordDownload_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::RecordDownload(::grpc::ClientContext* context, const ::GB28181::RecordDownloadRequest* request, ::GB28181::RecordDownloadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecordDownload_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::RecordDownload(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::RecordDownloadReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_RecordDownload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::RecordDownloadReply>* Greeter::Stub::AsyncRecordDownloadRaw(::grpc::ClientContext* context, const ::GB28181::RecordDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::RecordDownloadReply>::Create(channel_.get(), cq, rpcmethod_RecordDownload_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::RecordDownloadReply>* Greeter::Stub::PrepareAsyncRecordDownloadRaw(::grpc::ClientContext* context, const ::GB28181::RecordDownloadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::RecordDownloadReply>::Create(channel_.get(), cq, rpcmethod_RecordDownload_, context, request, false);
}

::grpc::Status Greeter::Stub::GetDeviceStatus(::grpc::ClientContext* context, const ::GB28181::GetDeviceStatusRequest& request, ::GB28181::GetDeviceStatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDeviceStatus_, context, request, response);
}

void Greeter::Stub::experimental_async::GetDeviceStatus(::grpc::ClientContext* context, const ::GB28181::GetDeviceStatusRequest* request, ::GB28181::GetDeviceStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDeviceStatus_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetDeviceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetDeviceStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDeviceStatus_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetDeviceStatus(::grpc::ClientContext* context, const ::GB28181::GetDeviceStatusRequest* request, ::GB28181::GetDeviceStatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDeviceStatus_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetDeviceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetDeviceStatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDeviceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetDeviceStatusReply>* Greeter::Stub::AsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::GB28181::GetDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetDeviceStatusReply>::Create(channel_.get(), cq, rpcmethod_GetDeviceStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetDeviceStatusReply>* Greeter::Stub::PrepareAsyncGetDeviceStatusRaw(::grpc::ClientContext* context, const ::GB28181::GetDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetDeviceStatusReply>::Create(channel_.get(), cq, rpcmethod_GetDeviceStatus_, context, request, false);
}

::grpc::Status Greeter::Stub::GetAllDeviceStatus(::grpc::ClientContext* context, const ::GB28181::GetAllDeviceStatusRequest& request, ::GB28181::GetAllDeviceStatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetAllDeviceStatus_, context, request, response);
}

void Greeter::Stub::experimental_async::GetAllDeviceStatus(::grpc::ClientContext* context, const ::GB28181::GetAllDeviceStatusRequest* request, ::GB28181::GetAllDeviceStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllDeviceStatus_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetAllDeviceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetAllDeviceStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetAllDeviceStatus_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetAllDeviceStatus(::grpc::ClientContext* context, const ::GB28181::GetAllDeviceStatusRequest* request, ::GB28181::GetAllDeviceStatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllDeviceStatus_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetAllDeviceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetAllDeviceStatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetAllDeviceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetAllDeviceStatusReply>* Greeter::Stub::AsyncGetAllDeviceStatusRaw(::grpc::ClientContext* context, const ::GB28181::GetAllDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetAllDeviceStatusReply>::Create(channel_.get(), cq, rpcmethod_GetAllDeviceStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetAllDeviceStatusReply>* Greeter::Stub::PrepareAsyncGetAllDeviceStatusRaw(::grpc::ClientContext* context, const ::GB28181::GetAllDeviceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetAllDeviceStatusReply>::Create(channel_.get(), cq, rpcmethod_GetAllDeviceStatus_, context, request, false);
}

::grpc::Status Greeter::Stub::GetDeviceList(::grpc::ClientContext* context, const ::GB28181::GetDeviceListRequest& request, ::GB28181::GetDeviceListReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDeviceList_, context, request, response);
}

void Greeter::Stub::experimental_async::GetDeviceList(::grpc::ClientContext* context, const ::GB28181::GetDeviceListRequest* request, ::GB28181::GetDeviceListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDeviceList_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetDeviceList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetDeviceListReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetDeviceList_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::GetDeviceList(::grpc::ClientContext* context, const ::GB28181::GetDeviceListRequest* request, ::GB28181::GetDeviceListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDeviceList_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::GetDeviceList(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::GetDeviceListReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetDeviceList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetDeviceListReply>* Greeter::Stub::AsyncGetDeviceListRaw(::grpc::ClientContext* context, const ::GB28181::GetDeviceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetDeviceListReply>::Create(channel_.get(), cq, rpcmethod_GetDeviceList_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::GetDeviceListReply>* Greeter::Stub::PrepareAsyncGetDeviceListRaw(::grpc::ClientContext* context, const ::GB28181::GetDeviceListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::GetDeviceListReply>::Create(channel_.get(), cq, rpcmethod_GetDeviceList_, context, request, false);
}

::grpc::Status Greeter::Stub::DeviceReboot(::grpc::ClientContext* context, const ::GB28181::DeviceRebootRequest& request, ::GB28181::DeviceRebootReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeviceReboot_, context, request, response);
}

void Greeter::Stub::experimental_async::DeviceReboot(::grpc::ClientContext* context, const ::GB28181::DeviceRebootRequest* request, ::GB28181::DeviceRebootReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeviceReboot_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::DeviceReboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::DeviceRebootReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeviceReboot_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::DeviceReboot(::grpc::ClientContext* context, const ::GB28181::DeviceRebootRequest* request, ::GB28181::DeviceRebootReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeviceReboot_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::DeviceReboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::DeviceRebootReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_DeviceReboot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::DeviceRebootReply>* Greeter::Stub::AsyncDeviceRebootRaw(::grpc::ClientContext* context, const ::GB28181::DeviceRebootRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::DeviceRebootReply>::Create(channel_.get(), cq, rpcmethod_DeviceReboot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::DeviceRebootReply>* Greeter::Stub::PrepareAsyncDeviceRebootRaw(::grpc::ClientContext* context, const ::GB28181::DeviceRebootRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::DeviceRebootReply>::Create(channel_.get(), cq, rpcmethod_DeviceReboot_, context, request, false);
}

::grpc::Status Greeter::Stub::StartBroadcast(::grpc::ClientContext* context, const ::GB28181::StartBroadcastRequest& request, ::GB28181::StartBroadcastReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartBroadcast_, context, request, response);
}

void Greeter::Stub::experimental_async::StartBroadcast(::grpc::ClientContext* context, const ::GB28181::StartBroadcastRequest* request, ::GB28181::StartBroadcastReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartBroadcast_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StartBroadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StartBroadcastReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartBroadcast_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StartBroadcast(::grpc::ClientContext* context, const ::GB28181::StartBroadcastRequest* request, ::GB28181::StartBroadcastReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartBroadcast_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::StartBroadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StartBroadcastReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartBroadcast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StartBroadcastReply>* Greeter::Stub::AsyncStartBroadcastRaw(::grpc::ClientContext* context, const ::GB28181::StartBroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StartBroadcastReply>::Create(channel_.get(), cq, rpcmethod_StartBroadcast_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StartBroadcastReply>* Greeter::Stub::PrepareAsyncStartBroadcastRaw(::grpc::ClientContext* context, const ::GB28181::StartBroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StartBroadcastReply>::Create(channel_.get(), cq, rpcmethod_StartBroadcast_, context, request, false);
}

::grpc::Status Greeter::Stub::StopBroadcast(::grpc::ClientContext* context, const ::GB28181::StopBroadcastRequest& request, ::GB28181::StopBroadcastReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopBroadcast_, context, request, response);
}

void Greeter::Stub::experimental_async::StopBroadcast(::grpc::ClientContext* context, const ::GB28181::StopBroadcastRequest* request, ::GB28181::StopBroadcastReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopBroadcast_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopBroadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopBroadcastReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopBroadcast_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopBroadcast(::grpc::ClientContext* context, const ::GB28181::StopBroadcastRequest* request, ::GB28181::StopBroadcastReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopBroadcast_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::StopBroadcast(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopBroadcastReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopBroadcast_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopBroadcastReply>* Greeter::Stub::AsyncStopBroadcastRaw(::grpc::ClientContext* context, const ::GB28181::StopBroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopBroadcastReply>::Create(channel_.get(), cq, rpcmethod_StopBroadcast_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopBroadcastReply>* Greeter::Stub::PrepareAsyncStopBroadcastRaw(::grpc::ClientContext* context, const ::GB28181::StopBroadcastRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopBroadcastReply>::Create(channel_.get(), cq, rpcmethod_StopBroadcast_, context, request, false);
}

::grpc::Status Greeter::Stub::StartTalk(::grpc::ClientContext* context, const ::GB28181::StartTalkRequest& request, ::GB28181::StartTalkReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartTalk_, context, request, response);
}

void Greeter::Stub::experimental_async::StartTalk(::grpc::ClientContext* context, const ::GB28181::StartTalkRequest* request, ::GB28181::StartTalkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartTalk_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StartTalk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StartTalkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartTalk_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StartTalk(::grpc::ClientContext* context, const ::GB28181::StartTalkRequest* request, ::GB28181::StartTalkReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartTalk_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::StartTalk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StartTalkReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartTalk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StartTalkReply>* Greeter::Stub::AsyncStartTalkRaw(::grpc::ClientContext* context, const ::GB28181::StartTalkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StartTalkReply>::Create(channel_.get(), cq, rpcmethod_StartTalk_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StartTalkReply>* Greeter::Stub::PrepareAsyncStartTalkRaw(::grpc::ClientContext* context, const ::GB28181::StartTalkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StartTalkReply>::Create(channel_.get(), cq, rpcmethod_StartTalk_, context, request, false);
}

::grpc::Status Greeter::Stub::StopTalk(::grpc::ClientContext* context, const ::GB28181::StopTalkRequest& request, ::GB28181::StopTalkReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopTalk_, context, request, response);
}

void Greeter::Stub::experimental_async::StopTalk(::grpc::ClientContext* context, const ::GB28181::StopTalkRequest* request, ::GB28181::StopTalkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopTalk_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopTalk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopTalkReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopTalk_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::StopTalk(::grpc::ClientContext* context, const ::GB28181::StopTalkRequest* request, ::GB28181::StopTalkReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopTalk_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::StopTalk(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::StopTalkReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopTalk_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopTalkReply>* Greeter::Stub::AsyncStopTalkRaw(::grpc::ClientContext* context, const ::GB28181::StopTalkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopTalkReply>::Create(channel_.get(), cq, rpcmethod_StopTalk_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::StopTalkReply>* Greeter::Stub::PrepareAsyncStopTalkRaw(::grpc::ClientContext* context, const ::GB28181::StopTalkRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::StopTalkReply>::Create(channel_.get(), cq, rpcmethod_StopTalk_, context, request, false);
}

::grpc::Status Greeter::Stub::ServiceStatus(::grpc::ClientContext* context, const ::GB28181::ServiceStatusRequest& request, ::GB28181::ServiceStatusReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ServiceStatus_, context, request, response);
}

void Greeter::Stub::experimental_async::ServiceStatus(::grpc::ClientContext* context, const ::GB28181::ServiceStatusRequest* request, ::GB28181::ServiceStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServiceStatus_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::ServiceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ServiceStatusReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ServiceStatus_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::ServiceStatus(::grpc::ClientContext* context, const ::GB28181::ServiceStatusRequest* request, ::GB28181::ServiceStatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ServiceStatus_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::ServiceStatus(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::ServiceStatusReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ServiceStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ServiceStatusReply>* Greeter::Stub::AsyncServiceStatusRaw(::grpc::ClientContext* context, const ::GB28181::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ServiceStatusReply>::Create(channel_.get(), cq, rpcmethod_ServiceStatus_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::ServiceStatusReply>* Greeter::Stub::PrepareAsyncServiceStatusRaw(::grpc::ClientContext* context, const ::GB28181::ServiceStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::ServiceStatusReply>::Create(channel_.get(), cq, rpcmethod_ServiceStatus_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifPtzMove(::grpc::ClientContext* context, const ::GB28181::OnvifPtzMoveRequest& request, ::GB28181::OnvifPtzMoveReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifPtzMove_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifPtzMove(::grpc::ClientContext* context, const ::GB28181::OnvifPtzMoveRequest* request, ::GB28181::OnvifPtzMoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifPtzMove_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifPtzMove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifPtzMoveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifPtzMove_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifPtzMove(::grpc::ClientContext* context, const ::GB28181::OnvifPtzMoveRequest* request, ::GB28181::OnvifPtzMoveReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifPtzMove_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifPtzMove(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifPtzMoveReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifPtzMove_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifPtzMoveReply>* Greeter::Stub::AsyncOnvifPtzMoveRaw(::grpc::ClientContext* context, const ::GB28181::OnvifPtzMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifPtzMoveReply>::Create(channel_.get(), cq, rpcmethod_OnvifPtzMove_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifPtzMoveReply>* Greeter::Stub::PrepareAsyncOnvifPtzMoveRaw(::grpc::ClientContext* context, const ::GB28181::OnvifPtzMoveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifPtzMoveReply>::Create(channel_.get(), cq, rpcmethod_OnvifPtzMove_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifPtzStop(::grpc::ClientContext* context, const ::GB28181::OnvifPtzStopRequest& request, ::GB28181::OnvifPtzStopReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifPtzStop_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifPtzStop(::grpc::ClientContext* context, const ::GB28181::OnvifPtzStopRequest* request, ::GB28181::OnvifPtzStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifPtzStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifPtzStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifPtzStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifPtzStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifPtzStop(::grpc::ClientContext* context, const ::GB28181::OnvifPtzStopRequest* request, ::GB28181::OnvifPtzStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifPtzStop_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifPtzStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifPtzStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifPtzStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifPtzStopReply>* Greeter::Stub::AsyncOnvifPtzStopRaw(::grpc::ClientContext* context, const ::GB28181::OnvifPtzStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifPtzStopReply>::Create(channel_.get(), cq, rpcmethod_OnvifPtzStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifPtzStopReply>* Greeter::Stub::PrepareAsyncOnvifPtzStopRaw(::grpc::ClientContext* context, const ::GB28181::OnvifPtzStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifPtzStopReply>::Create(channel_.get(), cq, rpcmethod_OnvifPtzStop_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifZoomIn(::grpc::ClientContext* context, const ::GB28181::OnvifZoomInRequest& request, ::GB28181::OnvifZoomInReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifZoomIn_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifZoomIn(::grpc::ClientContext* context, const ::GB28181::OnvifZoomInRequest* request, ::GB28181::OnvifZoomInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifZoomInReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomIn_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifZoomIn(::grpc::ClientContext* context, const ::GB28181::OnvifZoomInRequest* request, ::GB28181::OnvifZoomInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomIn_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifZoomIn(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifZoomInReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomIn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifZoomInReply>* Greeter::Stub::AsyncOnvifZoomInRaw(::grpc::ClientContext* context, const ::GB28181::OnvifZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifZoomInReply>::Create(channel_.get(), cq, rpcmethod_OnvifZoomIn_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifZoomInReply>* Greeter::Stub::PrepareAsyncOnvifZoomInRaw(::grpc::ClientContext* context, const ::GB28181::OnvifZoomInRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifZoomInReply>::Create(channel_.get(), cq, rpcmethod_OnvifZoomIn_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifZoomOut(::grpc::ClientContext* context, const ::GB28181::OnvifZoomOutRequest& request, ::GB28181::OnvifZoomOutReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifZoomOut_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifZoomOut(::grpc::ClientContext* context, const ::GB28181::OnvifZoomOutRequest* request, ::GB28181::OnvifZoomOutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomOut_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifZoomOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifZoomOutReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomOut_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifZoomOut(::grpc::ClientContext* context, const ::GB28181::OnvifZoomOutRequest* request, ::GB28181::OnvifZoomOutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomOut_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifZoomOut(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifZoomOutReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomOut_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifZoomOutReply>* Greeter::Stub::AsyncOnvifZoomOutRaw(::grpc::ClientContext* context, const ::GB28181::OnvifZoomOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifZoomOutReply>::Create(channel_.get(), cq, rpcmethod_OnvifZoomOut_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifZoomOutReply>* Greeter::Stub::PrepareAsyncOnvifZoomOutRaw(::grpc::ClientContext* context, const ::GB28181::OnvifZoomOutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifZoomOutReply>::Create(channel_.get(), cq, rpcmethod_OnvifZoomOut_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifZoomStop(::grpc::ClientContext* context, const ::GB28181::OnvifZoomStopRequest& request, ::GB28181::OnvifZoomStopReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifZoomStop_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifZoomStop(::grpc::ClientContext* context, const ::GB28181::OnvifZoomStopRequest* request, ::GB28181::OnvifZoomStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifZoomStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifZoomStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifZoomStop(::grpc::ClientContext* context, const ::GB28181::OnvifZoomStopRequest* request, ::GB28181::OnvifZoomStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomStop_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifZoomStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifZoomStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifZoomStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifZoomStopReply>* Greeter::Stub::AsyncOnvifZoomStopRaw(::grpc::ClientContext* context, const ::GB28181::OnvifZoomStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifZoomStopReply>::Create(channel_.get(), cq, rpcmethod_OnvifZoomStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifZoomStopReply>* Greeter::Stub::PrepareAsyncOnvifZoomStopRaw(::grpc::ClientContext* context, const ::GB28181::OnvifZoomStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifZoomStopReply>::Create(channel_.get(), cq, rpcmethod_OnvifZoomStop_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifFocusNear(::grpc::ClientContext* context, const ::GB28181::OnvifFocusNearRequest& request, ::GB28181::OnvifFocusNearReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifFocusNear_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifFocusNear(::grpc::ClientContext* context, const ::GB28181::OnvifFocusNearRequest* request, ::GB28181::OnvifFocusNearReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusNear_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifFocusNear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifFocusNearReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusNear_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifFocusNear(::grpc::ClientContext* context, const ::GB28181::OnvifFocusNearRequest* request, ::GB28181::OnvifFocusNearReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusNear_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifFocusNear(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifFocusNearReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusNear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifFocusNearReply>* Greeter::Stub::AsyncOnvifFocusNearRaw(::grpc::ClientContext* context, const ::GB28181::OnvifFocusNearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifFocusNearReply>::Create(channel_.get(), cq, rpcmethod_OnvifFocusNear_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifFocusNearReply>* Greeter::Stub::PrepareAsyncOnvifFocusNearRaw(::grpc::ClientContext* context, const ::GB28181::OnvifFocusNearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifFocusNearReply>::Create(channel_.get(), cq, rpcmethod_OnvifFocusNear_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifFocusFar(::grpc::ClientContext* context, const ::GB28181::OnvifFocusFarRequest& request, ::GB28181::OnvifFocusFarReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifFocusFar_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifFocusFar(::grpc::ClientContext* context, const ::GB28181::OnvifFocusFarRequest* request, ::GB28181::OnvifFocusFarReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusFar_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifFocusFar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifFocusFarReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusFar_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifFocusFar(::grpc::ClientContext* context, const ::GB28181::OnvifFocusFarRequest* request, ::GB28181::OnvifFocusFarReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusFar_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifFocusFar(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifFocusFarReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusFar_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifFocusFarReply>* Greeter::Stub::AsyncOnvifFocusFarRaw(::grpc::ClientContext* context, const ::GB28181::OnvifFocusFarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifFocusFarReply>::Create(channel_.get(), cq, rpcmethod_OnvifFocusFar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifFocusFarReply>* Greeter::Stub::PrepareAsyncOnvifFocusFarRaw(::grpc::ClientContext* context, const ::GB28181::OnvifFocusFarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifFocusFarReply>::Create(channel_.get(), cq, rpcmethod_OnvifFocusFar_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifFocusStop(::grpc::ClientContext* context, const ::GB28181::OnvifFocusStopRequest& request, ::GB28181::OnvifFocusStopReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifFocusStop_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifFocusStop(::grpc::ClientContext* context, const ::GB28181::OnvifFocusStopRequest* request, ::GB28181::OnvifFocusStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifFocusStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifFocusStopReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusStop_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifFocusStop(::grpc::ClientContext* context, const ::GB28181::OnvifFocusStopRequest* request, ::GB28181::OnvifFocusStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusStop_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifFocusStop(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifFocusStopReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifFocusStop_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifFocusStopReply>* Greeter::Stub::AsyncOnvifFocusStopRaw(::grpc::ClientContext* context, const ::GB28181::OnvifFocusStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifFocusStopReply>::Create(channel_.get(), cq, rpcmethod_OnvifFocusStop_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifFocusStopReply>* Greeter::Stub::PrepareAsyncOnvifFocusStopRaw(::grpc::ClientContext* context, const ::GB28181::OnvifFocusStopRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifFocusStopReply>::Create(channel_.get(), cq, rpcmethod_OnvifFocusStop_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifPtz3D(::grpc::ClientContext* context, const ::GB28181::OnvifPtz3DRequest& request, ::GB28181::OnvifPtz3DReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifPtz3D_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifPtz3D(::grpc::ClientContext* context, const ::GB28181::OnvifPtz3DRequest* request, ::GB28181::OnvifPtz3DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifPtz3D_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifPtz3D(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifPtz3DReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifPtz3D_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifPtz3D(::grpc::ClientContext* context, const ::GB28181::OnvifPtz3DRequest* request, ::GB28181::OnvifPtz3DReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifPtz3D_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifPtz3D(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifPtz3DReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifPtz3D_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifPtz3DReply>* Greeter::Stub::AsyncOnvifPtz3DRaw(::grpc::ClientContext* context, const ::GB28181::OnvifPtz3DRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifPtz3DReply>::Create(channel_.get(), cq, rpcmethod_OnvifPtz3D_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifPtz3DReply>* Greeter::Stub::PrepareAsyncOnvifPtz3DRaw(::grpc::ClientContext* context, const ::GB28181::OnvifPtz3DRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifPtz3DReply>::Create(channel_.get(), cq, rpcmethod_OnvifPtz3D_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifGetPreset(::grpc::ClientContext* context, const ::GB28181::OnvifGetPresetRequest& request, ::GB28181::OnvifGetPresetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifGetPreset_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifGetPreset(::grpc::ClientContext* context, const ::GB28181::OnvifGetPresetRequest* request, ::GB28181::OnvifGetPresetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifGetPreset_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifGetPreset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifGetPresetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifGetPreset_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifGetPreset(::grpc::ClientContext* context, const ::GB28181::OnvifGetPresetRequest* request, ::GB28181::OnvifGetPresetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifGetPreset_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifGetPreset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifGetPresetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifGetPreset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifGetPresetReply>* Greeter::Stub::AsyncOnvifGetPresetRaw(::grpc::ClientContext* context, const ::GB28181::OnvifGetPresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifGetPresetReply>::Create(channel_.get(), cq, rpcmethod_OnvifGetPreset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifGetPresetReply>* Greeter::Stub::PrepareAsyncOnvifGetPresetRaw(::grpc::ClientContext* context, const ::GB28181::OnvifGetPresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifGetPresetReply>::Create(channel_.get(), cq, rpcmethod_OnvifGetPreset_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifGotoPreset(::grpc::ClientContext* context, const ::GB28181::OnvifGotoPresetRequest& request, ::GB28181::OnvifGotoPresetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifGotoPreset_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifGotoPreset(::grpc::ClientContext* context, const ::GB28181::OnvifGotoPresetRequest* request, ::GB28181::OnvifGotoPresetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifGotoPreset_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifGotoPreset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifGotoPresetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifGotoPreset_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifGotoPreset(::grpc::ClientContext* context, const ::GB28181::OnvifGotoPresetRequest* request, ::GB28181::OnvifGotoPresetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifGotoPreset_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifGotoPreset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifGotoPresetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifGotoPreset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifGotoPresetReply>* Greeter::Stub::AsyncOnvifGotoPresetRaw(::grpc::ClientContext* context, const ::GB28181::OnvifGotoPresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifGotoPresetReply>::Create(channel_.get(), cq, rpcmethod_OnvifGotoPreset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifGotoPresetReply>* Greeter::Stub::PrepareAsyncOnvifGotoPresetRaw(::grpc::ClientContext* context, const ::GB28181::OnvifGotoPresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifGotoPresetReply>::Create(channel_.get(), cq, rpcmethod_OnvifGotoPreset_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifSetPreset(::grpc::ClientContext* context, const ::GB28181::OnvifSetPresetRequest& request, ::GB28181::OnvifSetPresetReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifSetPreset_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifSetPreset(::grpc::ClientContext* context, const ::GB28181::OnvifSetPresetRequest* request, ::GB28181::OnvifSetPresetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifSetPreset_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifSetPreset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifSetPresetReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifSetPreset_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifSetPreset(::grpc::ClientContext* context, const ::GB28181::OnvifSetPresetRequest* request, ::GB28181::OnvifSetPresetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifSetPreset_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifSetPreset(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifSetPresetReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifSetPreset_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifSetPresetReply>* Greeter::Stub::AsyncOnvifSetPresetRaw(::grpc::ClientContext* context, const ::GB28181::OnvifSetPresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifSetPresetReply>::Create(channel_.get(), cq, rpcmethod_OnvifSetPreset_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifSetPresetReply>* Greeter::Stub::PrepareAsyncOnvifSetPresetRaw(::grpc::ClientContext* context, const ::GB28181::OnvifSetPresetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifSetPresetReply>::Create(channel_.get(), cq, rpcmethod_OnvifSetPreset_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifDeviceReboot(::grpc::ClientContext* context, const ::GB28181::OnvifDeviceRebootRequest& request, ::GB28181::OnvifDeviceRebootReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifDeviceReboot_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifDeviceReboot(::grpc::ClientContext* context, const ::GB28181::OnvifDeviceRebootRequest* request, ::GB28181::OnvifDeviceRebootReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifDeviceReboot_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifDeviceReboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifDeviceRebootReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifDeviceReboot_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifDeviceReboot(::grpc::ClientContext* context, const ::GB28181::OnvifDeviceRebootRequest* request, ::GB28181::OnvifDeviceRebootReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifDeviceReboot_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifDeviceReboot(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifDeviceRebootReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifDeviceReboot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifDeviceRebootReply>* Greeter::Stub::AsyncOnvifDeviceRebootRaw(::grpc::ClientContext* context, const ::GB28181::OnvifDeviceRebootRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifDeviceRebootReply>::Create(channel_.get(), cq, rpcmethod_OnvifDeviceReboot_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifDeviceRebootReply>* Greeter::Stub::PrepareAsyncOnvifDeviceRebootRaw(::grpc::ClientContext* context, const ::GB28181::OnvifDeviceRebootRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifDeviceRebootReply>::Create(channel_.get(), cq, rpcmethod_OnvifDeviceReboot_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifGetMainUrl(::grpc::ClientContext* context, const ::GB28181::OnvifGetMainUrlRequest& request, ::GB28181::OnvifGetMainUrlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifGetMainUrl_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifGetMainUrl(::grpc::ClientContext* context, const ::GB28181::OnvifGetMainUrlRequest* request, ::GB28181::OnvifGetMainUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifGetMainUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifGetMainUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifGetMainUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifGetMainUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifGetMainUrl(::grpc::ClientContext* context, const ::GB28181::OnvifGetMainUrlRequest* request, ::GB28181::OnvifGetMainUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifGetMainUrl_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifGetMainUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifGetMainUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifGetMainUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifGetMainUrlReply>* Greeter::Stub::AsyncOnvifGetMainUrlRaw(::grpc::ClientContext* context, const ::GB28181::OnvifGetMainUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifGetMainUrlReply>::Create(channel_.get(), cq, rpcmethod_OnvifGetMainUrl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifGetMainUrlReply>* Greeter::Stub::PrepareAsyncOnvifGetMainUrlRaw(::grpc::ClientContext* context, const ::GB28181::OnvifGetMainUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifGetMainUrlReply>::Create(channel_.get(), cq, rpcmethod_OnvifGetMainUrl_, context, request, false);
}

::grpc::Status Greeter::Stub::OnvifGetSubUrl(::grpc::ClientContext* context, const ::GB28181::OnvifGetSubUrlRequest& request, ::GB28181::OnvifGetSubUrlReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_OnvifGetSubUrl_, context, request, response);
}

void Greeter::Stub::experimental_async::OnvifGetSubUrl(::grpc::ClientContext* context, const ::GB28181::OnvifGetSubUrlRequest* request, ::GB28181::OnvifGetSubUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifGetSubUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifGetSubUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifGetSubUrlReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_OnvifGetSubUrl_, context, request, response, std::move(f));
}

void Greeter::Stub::experimental_async::OnvifGetSubUrl(::grpc::ClientContext* context, const ::GB28181::OnvifGetSubUrlRequest* request, ::GB28181::OnvifGetSubUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifGetSubUrl_, context, request, response, reactor);
}

void Greeter::Stub::experimental_async::OnvifGetSubUrl(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::GB28181::OnvifGetSubUrlReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_OnvifGetSubUrl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifGetSubUrlReply>* Greeter::Stub::AsyncOnvifGetSubUrlRaw(::grpc::ClientContext* context, const ::GB28181::OnvifGetSubUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifGetSubUrlReply>::Create(channel_.get(), cq, rpcmethod_OnvifGetSubUrl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::GB28181::OnvifGetSubUrlReply>* Greeter::Stub::PrepareAsyncOnvifGetSubUrlRaw(::grpc::ClientContext* context, const ::GB28181::OnvifGetSubUrlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::GB28181::OnvifGetSubUrlReply>::Create(channel_.get(), cq, rpcmethod_OnvifGetSubUrl_, context, request, false);
}

Greeter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzCommandRequest, ::GB28181::ControlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzCommandRequest* req,
             ::GB28181::ControlReply* resp) {
               return service->PtzCommand(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzZoomInRequest, ::GB28181::PtzZoomInReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzZoomInRequest* req,
             ::GB28181::PtzZoomInReply* resp) {
               return service->PtzZoomIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzZoomOutRequest, ::GB28181::PtzZoomOutReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzZoomOutRequest* req,
             ::GB28181::PtzZoomOutReply* resp) {
               return service->PtzZoomOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzIrisBigRequest, ::GB28181::PtzIrisBigReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzIrisBigRequest* req,
             ::GB28181::PtzIrisBigReply* resp) {
               return service->PtzIrisBig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzIrisSmallRequest, ::GB28181::PtzIrisSmallReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzIrisSmallRequest* req,
             ::GB28181::PtzIrisSmallReply* resp) {
               return service->PtzIrisSmall(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzFocusOutRequest, ::GB28181::PtzFocusOutReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzFocusOutRequest* req,
             ::GB28181::PtzFocusOutReply* resp) {
               return service->PtzFocusOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzFocusInRequest, ::GB28181::PtzFocusInReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzFocusInRequest* req,
             ::GB28181::PtzFocusInReply* resp) {
               return service->PtzFocusIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzIFStopRequest, ::GB28181::PtzIFStopReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzIFStopRequest* req,
             ::GB28181::PtzIFStopReply* resp) {
               return service->PtzIFStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PtzStopRequest, ::GB28181::PtzStopReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PtzStopRequest* req,
             ::GB28181::PtzStopReply* resp) {
               return service->PtzStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::RealPlayUrlRequest, ::GB28181::RealPlayUrlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::RealPlayUrlRequest* req,
             ::GB28181::RealPlayUrlReply* resp) {
               return service->GetRealPlayUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetRTMPUrlRequest, ::GB28181::GetRTMPUrlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetRTMPUrlRequest* req,
             ::GB28181::GetRTMPUrlReply* resp) {
               return service->GetRTMPUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetHLSUrlRequest, ::GB28181::GetHLSUrlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetHLSUrlRequest* req,
             ::GB28181::GetHLSUrlReply* resp) {
               return service->GetHLSUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::RealPlayUrlInRequest, ::GB28181::RealPlayUrlInReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::RealPlayUrlInRequest* req,
             ::GB28181::RealPlayUrlInReply* resp) {
               return service->GetRealPlayUrlIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetRTMPUrlInRequest, ::GB28181::GetRTMPUrlInReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetRTMPUrlInRequest* req,
             ::GB28181::GetRTMPUrlInReply* resp) {
               return service->GetRTMPUrlIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetHLSUrlInRequest, ::GB28181::GetHLSUrlInReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetHLSUrlInRequest* req,
             ::GB28181::GetHLSUrlInReply* resp) {
               return service->GetHLSUrlIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::StopVideoByIdRequest, ::GB28181::StopVideoByIdReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::StopVideoByIdRequest* req,
             ::GB28181::StopVideoByIdReply* resp) {
               return service->StopVideoById(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::StopVideoBySsrcRequest, ::GB28181::StopVideoBySsrcReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::StopVideoBySsrcRequest* req,
             ::GB28181::StopVideoBySsrcReply* resp) {
               return service->StopVideoBySsrc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PlayBackUrlRequest, ::GB28181::PlayBackUrlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PlayBackUrlRequest* req,
             ::GB28181::PlayBackUrlReply* resp) {
               return service->GetPlayBackUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PresetGoRequest, ::GB28181::ControlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PresetGoRequest* req,
             ::GB28181::ControlReply* resp) {
               return service->PresetGo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PresetSetRequest, ::GB28181::ControlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PresetSetRequest* req,
             ::GB28181::ControlReply* resp) {
               return service->PresetSet(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PresetDelRequest, ::GB28181::ControlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PresetDelRequest* req,
             ::GB28181::ControlReply* resp) {
               return service->PresetDel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PresetQueryRequest, ::GB28181::PresetQueryReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PresetQueryRequest* req,
             ::GB28181::PresetQueryReply* resp) {
               return service->PresetQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetPresetRequest, ::GB28181::GetPresetReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetPresetRequest* req,
             ::GB28181::GetPresetReply* resp) {
               return service->GetPreset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::QueryRecordRequest, ::GB28181::QueryRecordReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::QueryRecordRequest* req,
             ::GB28181::QueryRecordReply* resp) {
               return service->QueryRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetRecordRequest, ::GB28181::GetRecordReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetRecordRequest* req,
             ::GB28181::GetRecordReply* resp) {
               return service->GetRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PlayFastRequest, ::GB28181::PlayFastReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PlayFastRequest* req,
             ::GB28181::PlayFastReply* resp) {
               return service->PlayFast(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PlaySlowRequest, ::GB28181::PlaySlowReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PlaySlowRequest* req,
             ::GB28181::PlaySlowReply* resp) {
               return service->PlaySlow(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PauseRequest, ::GB28181::PauseReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PauseRequest* req,
             ::GB28181::PauseReply* resp) {
               return service->Pause(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::PlayRequest, ::GB28181::PlayReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::PlayRequest* req,
             ::GB28181::PlayReply* resp) {
               return service->Play(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::SeekRequest, ::GB28181::SeekReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::SeekRequest* req,
             ::GB28181::SeekReply* resp) {
               return service->Seek(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GoForwardRequest, ::GB28181::GoForwardReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GoForwardRequest* req,
             ::GB28181::GoForwardReply* resp) {
               return service->GoForward(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::StopPlayRecordRequest, ::GB28181::StopPlayRecordReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::StopPlayRecordRequest* req,
             ::GB28181::StopPlayRecordReply* resp) {
               return service->StopPlayRecord(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[32],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GoBackRequest, ::GB28181::GoBackReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GoBackRequest* req,
             ::GB28181::GoBackReply* resp) {
               return service->GoBack(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[33],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::RecordDownloadRequest, ::GB28181::RecordDownloadReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::RecordDownloadRequest* req,
             ::GB28181::RecordDownloadReply* resp) {
               return service->RecordDownload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[34],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetDeviceStatusRequest, ::GB28181::GetDeviceStatusReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetDeviceStatusRequest* req,
             ::GB28181::GetDeviceStatusReply* resp) {
               return service->GetDeviceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[35],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetAllDeviceStatusRequest, ::GB28181::GetAllDeviceStatusReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetAllDeviceStatusRequest* req,
             ::GB28181::GetAllDeviceStatusReply* resp) {
               return service->GetAllDeviceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[36],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::GetDeviceListRequest, ::GB28181::GetDeviceListReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::GetDeviceListRequest* req,
             ::GB28181::GetDeviceListReply* resp) {
               return service->GetDeviceList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[37],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::DeviceRebootRequest, ::GB28181::DeviceRebootReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::DeviceRebootRequest* req,
             ::GB28181::DeviceRebootReply* resp) {
               return service->DeviceReboot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[38],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::StartBroadcastRequest, ::GB28181::StartBroadcastReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::StartBroadcastRequest* req,
             ::GB28181::StartBroadcastReply* resp) {
               return service->StartBroadcast(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[39],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::StopBroadcastRequest, ::GB28181::StopBroadcastReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::StopBroadcastRequest* req,
             ::GB28181::StopBroadcastReply* resp) {
               return service->StopBroadcast(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[40],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::StartTalkRequest, ::GB28181::StartTalkReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::StartTalkRequest* req,
             ::GB28181::StartTalkReply* resp) {
               return service->StartTalk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[41],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::StopTalkRequest, ::GB28181::StopTalkReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::StopTalkRequest* req,
             ::GB28181::StopTalkReply* resp) {
               return service->StopTalk(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[42],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::ServiceStatusRequest, ::GB28181::ServiceStatusReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::ServiceStatusRequest* req,
             ::GB28181::ServiceStatusReply* resp) {
               return service->ServiceStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[43],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifPtzMoveRequest, ::GB28181::OnvifPtzMoveReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifPtzMoveRequest* req,
             ::GB28181::OnvifPtzMoveReply* resp) {
               return service->OnvifPtzMove(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[44],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifPtzStopRequest, ::GB28181::OnvifPtzStopReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifPtzStopRequest* req,
             ::GB28181::OnvifPtzStopReply* resp) {
               return service->OnvifPtzStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[45],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifZoomInRequest, ::GB28181::OnvifZoomInReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifZoomInRequest* req,
             ::GB28181::OnvifZoomInReply* resp) {
               return service->OnvifZoomIn(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[46],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifZoomOutRequest, ::GB28181::OnvifZoomOutReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifZoomOutRequest* req,
             ::GB28181::OnvifZoomOutReply* resp) {
               return service->OnvifZoomOut(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[47],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifZoomStopRequest, ::GB28181::OnvifZoomStopReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifZoomStopRequest* req,
             ::GB28181::OnvifZoomStopReply* resp) {
               return service->OnvifZoomStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[48],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifFocusNearRequest, ::GB28181::OnvifFocusNearReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifFocusNearRequest* req,
             ::GB28181::OnvifFocusNearReply* resp) {
               return service->OnvifFocusNear(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[49],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifFocusFarRequest, ::GB28181::OnvifFocusFarReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifFocusFarRequest* req,
             ::GB28181::OnvifFocusFarReply* resp) {
               return service->OnvifFocusFar(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[50],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifFocusStopRequest, ::GB28181::OnvifFocusStopReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifFocusStopRequest* req,
             ::GB28181::OnvifFocusStopReply* resp) {
               return service->OnvifFocusStop(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[51],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifPtz3DRequest, ::GB28181::OnvifPtz3DReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifPtz3DRequest* req,
             ::GB28181::OnvifPtz3DReply* resp) {
               return service->OnvifPtz3D(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[52],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifGetPresetRequest, ::GB28181::OnvifGetPresetReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifGetPresetRequest* req,
             ::GB28181::OnvifGetPresetReply* resp) {
               return service->OnvifGetPreset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[53],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifGotoPresetRequest, ::GB28181::OnvifGotoPresetReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifGotoPresetRequest* req,
             ::GB28181::OnvifGotoPresetReply* resp) {
               return service->OnvifGotoPreset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[54],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifSetPresetRequest, ::GB28181::OnvifSetPresetReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifSetPresetRequest* req,
             ::GB28181::OnvifSetPresetReply* resp) {
               return service->OnvifSetPreset(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[55],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifDeviceRebootRequest, ::GB28181::OnvifDeviceRebootReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifDeviceRebootRequest* req,
             ::GB28181::OnvifDeviceRebootReply* resp) {
               return service->OnvifDeviceReboot(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[56],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifGetMainUrlRequest, ::GB28181::OnvifGetMainUrlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifGetMainUrlRequest* req,
             ::GB28181::OnvifGetMainUrlReply* resp) {
               return service->OnvifGetMainUrl(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Greeter_method_names[57],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Greeter::Service, ::GB28181::OnvifGetSubUrlRequest, ::GB28181::OnvifGetSubUrlReply>(
          [](Greeter::Service* service,
             ::grpc_impl::ServerContext* ctx,
             const ::GB28181::OnvifGetSubUrlRequest* req,
             ::GB28181::OnvifGetSubUrlReply* resp) {
               return service->OnvifGetSubUrl(ctx, req, resp);
             }, this)));
}

Greeter::Service::~Service() {
}

::grpc::Status Greeter::Service::PtzCommand(::grpc::ServerContext* context, const ::GB28181::PtzCommandRequest* request, ::GB28181::ControlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PtzZoomIn(::grpc::ServerContext* context, const ::GB28181::PtzZoomInRequest* request, ::GB28181::PtzZoomInReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PtzZoomOut(::grpc::ServerContext* context, const ::GB28181::PtzZoomOutRequest* request, ::GB28181::PtzZoomOutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PtzIrisBig(::grpc::ServerContext* context, const ::GB28181::PtzIrisBigRequest* request, ::GB28181::PtzIrisBigReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PtzIrisSmall(::grpc::ServerContext* context, const ::GB28181::PtzIrisSmallRequest* request, ::GB28181::PtzIrisSmallReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PtzFocusOut(::grpc::ServerContext* context, const ::GB28181::PtzFocusOutRequest* request, ::GB28181::PtzFocusOutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PtzFocusIn(::grpc::ServerContext* context, const ::GB28181::PtzFocusInRequest* request, ::GB28181::PtzFocusInReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PtzIFStop(::grpc::ServerContext* context, const ::GB28181::PtzIFStopRequest* request, ::GB28181::PtzIFStopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PtzStop(::grpc::ServerContext* context, const ::GB28181::PtzStopRequest* request, ::GB28181::PtzStopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetRealPlayUrl(::grpc::ServerContext* context, const ::GB28181::RealPlayUrlRequest* request, ::GB28181::RealPlayUrlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetRTMPUrl(::grpc::ServerContext* context, const ::GB28181::GetRTMPUrlRequest* request, ::GB28181::GetRTMPUrlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetHLSUrl(::grpc::ServerContext* context, const ::GB28181::GetHLSUrlRequest* request, ::GB28181::GetHLSUrlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetRealPlayUrlIn(::grpc::ServerContext* context, const ::GB28181::RealPlayUrlInRequest* request, ::GB28181::RealPlayUrlInReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetRTMPUrlIn(::grpc::ServerContext* context, const ::GB28181::GetRTMPUrlInRequest* request, ::GB28181::GetRTMPUrlInReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetHLSUrlIn(::grpc::ServerContext* context, const ::GB28181::GetHLSUrlInRequest* request, ::GB28181::GetHLSUrlInReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::StopVideoById(::grpc::ServerContext* context, const ::GB28181::StopVideoByIdRequest* request, ::GB28181::StopVideoByIdReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::StopVideoBySsrc(::grpc::ServerContext* context, const ::GB28181::StopVideoBySsrcRequest* request, ::GB28181::StopVideoBySsrcReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetPlayBackUrl(::grpc::ServerContext* context, const ::GB28181::PlayBackUrlRequest* request, ::GB28181::PlayBackUrlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PresetGo(::grpc::ServerContext* context, const ::GB28181::PresetGoRequest* request, ::GB28181::ControlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PresetSet(::grpc::ServerContext* context, const ::GB28181::PresetSetRequest* request, ::GB28181::ControlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PresetDel(::grpc::ServerContext* context, const ::GB28181::PresetDelRequest* request, ::GB28181::ControlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PresetQuery(::grpc::ServerContext* context, const ::GB28181::PresetQueryRequest* request, ::GB28181::PresetQueryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetPreset(::grpc::ServerContext* context, const ::GB28181::GetPresetRequest* request, ::GB28181::GetPresetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::QueryRecord(::grpc::ServerContext* context, const ::GB28181::QueryRecordRequest* request, ::GB28181::QueryRecordReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetRecord(::grpc::ServerContext* context, const ::GB28181::GetRecordRequest* request, ::GB28181::GetRecordReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PlayFast(::grpc::ServerContext* context, const ::GB28181::PlayFastRequest* request, ::GB28181::PlayFastReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::PlaySlow(::grpc::ServerContext* context, const ::GB28181::PlaySlowRequest* request, ::GB28181::PlaySlowReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Pause(::grpc::ServerContext* context, const ::GB28181::PauseRequest* request, ::GB28181::PauseReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Play(::grpc::ServerContext* context, const ::GB28181::PlayRequest* request, ::GB28181::PlayReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::Seek(::grpc::ServerContext* context, const ::GB28181::SeekRequest* request, ::GB28181::SeekReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GoForward(::grpc::ServerContext* context, const ::GB28181::GoForwardRequest* request, ::GB28181::GoForwardReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::StopPlayRecord(::grpc::ServerContext* context, const ::GB28181::StopPlayRecordRequest* request, ::GB28181::StopPlayRecordReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GoBack(::grpc::ServerContext* context, const ::GB28181::GoBackRequest* request, ::GB28181::GoBackReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::RecordDownload(::grpc::ServerContext* context, const ::GB28181::RecordDownloadRequest* request, ::GB28181::RecordDownloadReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetDeviceStatus(::grpc::ServerContext* context, const ::GB28181::GetDeviceStatusRequest* request, ::GB28181::GetDeviceStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetAllDeviceStatus(::grpc::ServerContext* context, const ::GB28181::GetAllDeviceStatusRequest* request, ::GB28181::GetAllDeviceStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::GetDeviceList(::grpc::ServerContext* context, const ::GB28181::GetDeviceListRequest* request, ::GB28181::GetDeviceListReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::DeviceReboot(::grpc::ServerContext* context, const ::GB28181::DeviceRebootRequest* request, ::GB28181::DeviceRebootReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::StartBroadcast(::grpc::ServerContext* context, const ::GB28181::StartBroadcastRequest* request, ::GB28181::StartBroadcastReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::StopBroadcast(::grpc::ServerContext* context, const ::GB28181::StopBroadcastRequest* request, ::GB28181::StopBroadcastReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::StartTalk(::grpc::ServerContext* context, const ::GB28181::StartTalkRequest* request, ::GB28181::StartTalkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::StopTalk(::grpc::ServerContext* context, const ::GB28181::StopTalkRequest* request, ::GB28181::StopTalkReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::ServiceStatus(::grpc::ServerContext* context, const ::GB28181::ServiceStatusRequest* request, ::GB28181::ServiceStatusReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifPtzMove(::grpc::ServerContext* context, const ::GB28181::OnvifPtzMoveRequest* request, ::GB28181::OnvifPtzMoveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifPtzStop(::grpc::ServerContext* context, const ::GB28181::OnvifPtzStopRequest* request, ::GB28181::OnvifPtzStopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifZoomIn(::grpc::ServerContext* context, const ::GB28181::OnvifZoomInRequest* request, ::GB28181::OnvifZoomInReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifZoomOut(::grpc::ServerContext* context, const ::GB28181::OnvifZoomOutRequest* request, ::GB28181::OnvifZoomOutReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifZoomStop(::grpc::ServerContext* context, const ::GB28181::OnvifZoomStopRequest* request, ::GB28181::OnvifZoomStopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifFocusNear(::grpc::ServerContext* context, const ::GB28181::OnvifFocusNearRequest* request, ::GB28181::OnvifFocusNearReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifFocusFar(::grpc::ServerContext* context, const ::GB28181::OnvifFocusFarRequest* request, ::GB28181::OnvifFocusFarReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifFocusStop(::grpc::ServerContext* context, const ::GB28181::OnvifFocusStopRequest* request, ::GB28181::OnvifFocusStopReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifPtz3D(::grpc::ServerContext* context, const ::GB28181::OnvifPtz3DRequest* request, ::GB28181::OnvifPtz3DReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifGetPreset(::grpc::ServerContext* context, const ::GB28181::OnvifGetPresetRequest* request, ::GB28181::OnvifGetPresetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifGotoPreset(::grpc::ServerContext* context, const ::GB28181::OnvifGotoPresetRequest* request, ::GB28181::OnvifGotoPresetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifSetPreset(::grpc::ServerContext* context, const ::GB28181::OnvifSetPresetRequest* request, ::GB28181::OnvifSetPresetReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifDeviceReboot(::grpc::ServerContext* context, const ::GB28181::OnvifDeviceRebootRequest* request, ::GB28181::OnvifDeviceRebootReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifGetMainUrl(::grpc::ServerContext* context, const ::GB28181::OnvifGetMainUrlRequest* request, ::GB28181::OnvifGetMainUrlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Greeter::Service::OnvifGetSubUrl(::grpc::ServerContext* context, const ::GB28181::OnvifGetSubUrlRequest* request, ::GB28181::OnvifGetSubUrlReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace GB28181

