// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gb28181.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_gb28181_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_gb28181_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_gb28181_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_gb28181_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[118]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_gb28181_2eproto;
namespace GB28181 {
class ControlReply;
class ControlReplyDefaultTypeInternal;
extern ControlReplyDefaultTypeInternal _ControlReply_default_instance_;
class DeviceList;
class DeviceListDefaultTypeInternal;
extern DeviceListDefaultTypeInternal _DeviceList_default_instance_;
class DeviceRebootReply;
class DeviceRebootReplyDefaultTypeInternal;
extern DeviceRebootReplyDefaultTypeInternal _DeviceRebootReply_default_instance_;
class DeviceRebootRequest;
class DeviceRebootRequestDefaultTypeInternal;
extern DeviceRebootRequestDefaultTypeInternal _DeviceRebootRequest_default_instance_;
class GetAllDeviceStatusReply;
class GetAllDeviceStatusReplyDefaultTypeInternal;
extern GetAllDeviceStatusReplyDefaultTypeInternal _GetAllDeviceStatusReply_default_instance_;
class GetAllDeviceStatusRequest;
class GetAllDeviceStatusRequestDefaultTypeInternal;
extern GetAllDeviceStatusRequestDefaultTypeInternal _GetAllDeviceStatusRequest_default_instance_;
class GetDeviceListReply;
class GetDeviceListReplyDefaultTypeInternal;
extern GetDeviceListReplyDefaultTypeInternal _GetDeviceListReply_default_instance_;
class GetDeviceListRequest;
class GetDeviceListRequestDefaultTypeInternal;
extern GetDeviceListRequestDefaultTypeInternal _GetDeviceListRequest_default_instance_;
class GetDeviceStatusReply;
class GetDeviceStatusReplyDefaultTypeInternal;
extern GetDeviceStatusReplyDefaultTypeInternal _GetDeviceStatusReply_default_instance_;
class GetDeviceStatusRequest;
class GetDeviceStatusRequestDefaultTypeInternal;
extern GetDeviceStatusRequestDefaultTypeInternal _GetDeviceStatusRequest_default_instance_;
class GetHLSUrlInReply;
class GetHLSUrlInReplyDefaultTypeInternal;
extern GetHLSUrlInReplyDefaultTypeInternal _GetHLSUrlInReply_default_instance_;
class GetHLSUrlInRequest;
class GetHLSUrlInRequestDefaultTypeInternal;
extern GetHLSUrlInRequestDefaultTypeInternal _GetHLSUrlInRequest_default_instance_;
class GetHLSUrlReply;
class GetHLSUrlReplyDefaultTypeInternal;
extern GetHLSUrlReplyDefaultTypeInternal _GetHLSUrlReply_default_instance_;
class GetHLSUrlRequest;
class GetHLSUrlRequestDefaultTypeInternal;
extern GetHLSUrlRequestDefaultTypeInternal _GetHLSUrlRequest_default_instance_;
class GetPresetReply;
class GetPresetReplyDefaultTypeInternal;
extern GetPresetReplyDefaultTypeInternal _GetPresetReply_default_instance_;
class GetPresetRequest;
class GetPresetRequestDefaultTypeInternal;
extern GetPresetRequestDefaultTypeInternal _GetPresetRequest_default_instance_;
class GetRTMPUrlInReply;
class GetRTMPUrlInReplyDefaultTypeInternal;
extern GetRTMPUrlInReplyDefaultTypeInternal _GetRTMPUrlInReply_default_instance_;
class GetRTMPUrlInRequest;
class GetRTMPUrlInRequestDefaultTypeInternal;
extern GetRTMPUrlInRequestDefaultTypeInternal _GetRTMPUrlInRequest_default_instance_;
class GetRTMPUrlReply;
class GetRTMPUrlReplyDefaultTypeInternal;
extern GetRTMPUrlReplyDefaultTypeInternal _GetRTMPUrlReply_default_instance_;
class GetRTMPUrlRequest;
class GetRTMPUrlRequestDefaultTypeInternal;
extern GetRTMPUrlRequestDefaultTypeInternal _GetRTMPUrlRequest_default_instance_;
class GetRecordReply;
class GetRecordReplyDefaultTypeInternal;
extern GetRecordReplyDefaultTypeInternal _GetRecordReply_default_instance_;
class GetRecordRequest;
class GetRecordRequestDefaultTypeInternal;
extern GetRecordRequestDefaultTypeInternal _GetRecordRequest_default_instance_;
class GoBackReply;
class GoBackReplyDefaultTypeInternal;
extern GoBackReplyDefaultTypeInternal _GoBackReply_default_instance_;
class GoBackRequest;
class GoBackRequestDefaultTypeInternal;
extern GoBackRequestDefaultTypeInternal _GoBackRequest_default_instance_;
class GoForwardReply;
class GoForwardReplyDefaultTypeInternal;
extern GoForwardReplyDefaultTypeInternal _GoForwardReply_default_instance_;
class GoForwardRequest;
class GoForwardRequestDefaultTypeInternal;
extern GoForwardRequestDefaultTypeInternal _GoForwardRequest_default_instance_;
class OnvifDeviceRebootReply;
class OnvifDeviceRebootReplyDefaultTypeInternal;
extern OnvifDeviceRebootReplyDefaultTypeInternal _OnvifDeviceRebootReply_default_instance_;
class OnvifDeviceRebootRequest;
class OnvifDeviceRebootRequestDefaultTypeInternal;
extern OnvifDeviceRebootRequestDefaultTypeInternal _OnvifDeviceRebootRequest_default_instance_;
class OnvifFocusFarReply;
class OnvifFocusFarReplyDefaultTypeInternal;
extern OnvifFocusFarReplyDefaultTypeInternal _OnvifFocusFarReply_default_instance_;
class OnvifFocusFarRequest;
class OnvifFocusFarRequestDefaultTypeInternal;
extern OnvifFocusFarRequestDefaultTypeInternal _OnvifFocusFarRequest_default_instance_;
class OnvifFocusNearReply;
class OnvifFocusNearReplyDefaultTypeInternal;
extern OnvifFocusNearReplyDefaultTypeInternal _OnvifFocusNearReply_default_instance_;
class OnvifFocusNearRequest;
class OnvifFocusNearRequestDefaultTypeInternal;
extern OnvifFocusNearRequestDefaultTypeInternal _OnvifFocusNearRequest_default_instance_;
class OnvifFocusStopReply;
class OnvifFocusStopReplyDefaultTypeInternal;
extern OnvifFocusStopReplyDefaultTypeInternal _OnvifFocusStopReply_default_instance_;
class OnvifFocusStopRequest;
class OnvifFocusStopRequestDefaultTypeInternal;
extern OnvifFocusStopRequestDefaultTypeInternal _OnvifFocusStopRequest_default_instance_;
class OnvifGetMainUrlReply;
class OnvifGetMainUrlReplyDefaultTypeInternal;
extern OnvifGetMainUrlReplyDefaultTypeInternal _OnvifGetMainUrlReply_default_instance_;
class OnvifGetMainUrlRequest;
class OnvifGetMainUrlRequestDefaultTypeInternal;
extern OnvifGetMainUrlRequestDefaultTypeInternal _OnvifGetMainUrlRequest_default_instance_;
class OnvifGetPresetReply;
class OnvifGetPresetReplyDefaultTypeInternal;
extern OnvifGetPresetReplyDefaultTypeInternal _OnvifGetPresetReply_default_instance_;
class OnvifGetPresetRequest;
class OnvifGetPresetRequestDefaultTypeInternal;
extern OnvifGetPresetRequestDefaultTypeInternal _OnvifGetPresetRequest_default_instance_;
class OnvifGetSubUrlReply;
class OnvifGetSubUrlReplyDefaultTypeInternal;
extern OnvifGetSubUrlReplyDefaultTypeInternal _OnvifGetSubUrlReply_default_instance_;
class OnvifGetSubUrlRequest;
class OnvifGetSubUrlRequestDefaultTypeInternal;
extern OnvifGetSubUrlRequestDefaultTypeInternal _OnvifGetSubUrlRequest_default_instance_;
class OnvifGotoPresetReply;
class OnvifGotoPresetReplyDefaultTypeInternal;
extern OnvifGotoPresetReplyDefaultTypeInternal _OnvifGotoPresetReply_default_instance_;
class OnvifGotoPresetRequest;
class OnvifGotoPresetRequestDefaultTypeInternal;
extern OnvifGotoPresetRequestDefaultTypeInternal _OnvifGotoPresetRequest_default_instance_;
class OnvifPresetInfo;
class OnvifPresetInfoDefaultTypeInternal;
extern OnvifPresetInfoDefaultTypeInternal _OnvifPresetInfo_default_instance_;
class OnvifPtz3DReply;
class OnvifPtz3DReplyDefaultTypeInternal;
extern OnvifPtz3DReplyDefaultTypeInternal _OnvifPtz3DReply_default_instance_;
class OnvifPtz3DRequest;
class OnvifPtz3DRequestDefaultTypeInternal;
extern OnvifPtz3DRequestDefaultTypeInternal _OnvifPtz3DRequest_default_instance_;
class OnvifPtzMoveReply;
class OnvifPtzMoveReplyDefaultTypeInternal;
extern OnvifPtzMoveReplyDefaultTypeInternal _OnvifPtzMoveReply_default_instance_;
class OnvifPtzMoveRequest;
class OnvifPtzMoveRequestDefaultTypeInternal;
extern OnvifPtzMoveRequestDefaultTypeInternal _OnvifPtzMoveRequest_default_instance_;
class OnvifPtzStopReply;
class OnvifPtzStopReplyDefaultTypeInternal;
extern OnvifPtzStopReplyDefaultTypeInternal _OnvifPtzStopReply_default_instance_;
class OnvifPtzStopRequest;
class OnvifPtzStopRequestDefaultTypeInternal;
extern OnvifPtzStopRequestDefaultTypeInternal _OnvifPtzStopRequest_default_instance_;
class OnvifSetPresetReply;
class OnvifSetPresetReplyDefaultTypeInternal;
extern OnvifSetPresetReplyDefaultTypeInternal _OnvifSetPresetReply_default_instance_;
class OnvifSetPresetRequest;
class OnvifSetPresetRequestDefaultTypeInternal;
extern OnvifSetPresetRequestDefaultTypeInternal _OnvifSetPresetRequest_default_instance_;
class OnvifZoomInReply;
class OnvifZoomInReplyDefaultTypeInternal;
extern OnvifZoomInReplyDefaultTypeInternal _OnvifZoomInReply_default_instance_;
class OnvifZoomInRequest;
class OnvifZoomInRequestDefaultTypeInternal;
extern OnvifZoomInRequestDefaultTypeInternal _OnvifZoomInRequest_default_instance_;
class OnvifZoomOutReply;
class OnvifZoomOutReplyDefaultTypeInternal;
extern OnvifZoomOutReplyDefaultTypeInternal _OnvifZoomOutReply_default_instance_;
class OnvifZoomOutRequest;
class OnvifZoomOutRequestDefaultTypeInternal;
extern OnvifZoomOutRequestDefaultTypeInternal _OnvifZoomOutRequest_default_instance_;
class OnvifZoomStopReply;
class OnvifZoomStopReplyDefaultTypeInternal;
extern OnvifZoomStopReplyDefaultTypeInternal _OnvifZoomStopReply_default_instance_;
class OnvifZoomStopRequest;
class OnvifZoomStopRequestDefaultTypeInternal;
extern OnvifZoomStopRequestDefaultTypeInternal _OnvifZoomStopRequest_default_instance_;
class PauseReply;
class PauseReplyDefaultTypeInternal;
extern PauseReplyDefaultTypeInternal _PauseReply_default_instance_;
class PauseRequest;
class PauseRequestDefaultTypeInternal;
extern PauseRequestDefaultTypeInternal _PauseRequest_default_instance_;
class PlayBackUrlReply;
class PlayBackUrlReplyDefaultTypeInternal;
extern PlayBackUrlReplyDefaultTypeInternal _PlayBackUrlReply_default_instance_;
class PlayBackUrlRequest;
class PlayBackUrlRequestDefaultTypeInternal;
extern PlayBackUrlRequestDefaultTypeInternal _PlayBackUrlRequest_default_instance_;
class PlayFastReply;
class PlayFastReplyDefaultTypeInternal;
extern PlayFastReplyDefaultTypeInternal _PlayFastReply_default_instance_;
class PlayFastRequest;
class PlayFastRequestDefaultTypeInternal;
extern PlayFastRequestDefaultTypeInternal _PlayFastRequest_default_instance_;
class PlayReply;
class PlayReplyDefaultTypeInternal;
extern PlayReplyDefaultTypeInternal _PlayReply_default_instance_;
class PlayRequest;
class PlayRequestDefaultTypeInternal;
extern PlayRequestDefaultTypeInternal _PlayRequest_default_instance_;
class PlaySlowReply;
class PlaySlowReplyDefaultTypeInternal;
extern PlaySlowReplyDefaultTypeInternal _PlaySlowReply_default_instance_;
class PlaySlowRequest;
class PlaySlowRequestDefaultTypeInternal;
extern PlaySlowRequestDefaultTypeInternal _PlaySlowRequest_default_instance_;
class PresetDelRequest;
class PresetDelRequestDefaultTypeInternal;
extern PresetDelRequestDefaultTypeInternal _PresetDelRequest_default_instance_;
class PresetGoRequest;
class PresetGoRequestDefaultTypeInternal;
extern PresetGoRequestDefaultTypeInternal _PresetGoRequest_default_instance_;
class PresetInfo;
class PresetInfoDefaultTypeInternal;
extern PresetInfoDefaultTypeInternal _PresetInfo_default_instance_;
class PresetQueryReply;
class PresetQueryReplyDefaultTypeInternal;
extern PresetQueryReplyDefaultTypeInternal _PresetQueryReply_default_instance_;
class PresetQueryRequest;
class PresetQueryRequestDefaultTypeInternal;
extern PresetQueryRequestDefaultTypeInternal _PresetQueryRequest_default_instance_;
class PresetSetRequest;
class PresetSetRequestDefaultTypeInternal;
extern PresetSetRequestDefaultTypeInternal _PresetSetRequest_default_instance_;
class PtzCommandRequest;
class PtzCommandRequestDefaultTypeInternal;
extern PtzCommandRequestDefaultTypeInternal _PtzCommandRequest_default_instance_;
class PtzFocusInReply;
class PtzFocusInReplyDefaultTypeInternal;
extern PtzFocusInReplyDefaultTypeInternal _PtzFocusInReply_default_instance_;
class PtzFocusInRequest;
class PtzFocusInRequestDefaultTypeInternal;
extern PtzFocusInRequestDefaultTypeInternal _PtzFocusInRequest_default_instance_;
class PtzFocusOutReply;
class PtzFocusOutReplyDefaultTypeInternal;
extern PtzFocusOutReplyDefaultTypeInternal _PtzFocusOutReply_default_instance_;
class PtzFocusOutRequest;
class PtzFocusOutRequestDefaultTypeInternal;
extern PtzFocusOutRequestDefaultTypeInternal _PtzFocusOutRequest_default_instance_;
class PtzIFStopReply;
class PtzIFStopReplyDefaultTypeInternal;
extern PtzIFStopReplyDefaultTypeInternal _PtzIFStopReply_default_instance_;
class PtzIFStopRequest;
class PtzIFStopRequestDefaultTypeInternal;
extern PtzIFStopRequestDefaultTypeInternal _PtzIFStopRequest_default_instance_;
class PtzIrisBigReply;
class PtzIrisBigReplyDefaultTypeInternal;
extern PtzIrisBigReplyDefaultTypeInternal _PtzIrisBigReply_default_instance_;
class PtzIrisBigRequest;
class PtzIrisBigRequestDefaultTypeInternal;
extern PtzIrisBigRequestDefaultTypeInternal _PtzIrisBigRequest_default_instance_;
class PtzIrisSmallReply;
class PtzIrisSmallReplyDefaultTypeInternal;
extern PtzIrisSmallReplyDefaultTypeInternal _PtzIrisSmallReply_default_instance_;
class PtzIrisSmallRequest;
class PtzIrisSmallRequestDefaultTypeInternal;
extern PtzIrisSmallRequestDefaultTypeInternal _PtzIrisSmallRequest_default_instance_;
class PtzStopReply;
class PtzStopReplyDefaultTypeInternal;
extern PtzStopReplyDefaultTypeInternal _PtzStopReply_default_instance_;
class PtzStopRequest;
class PtzStopRequestDefaultTypeInternal;
extern PtzStopRequestDefaultTypeInternal _PtzStopRequest_default_instance_;
class PtzZoomInReply;
class PtzZoomInReplyDefaultTypeInternal;
extern PtzZoomInReplyDefaultTypeInternal _PtzZoomInReply_default_instance_;
class PtzZoomInRequest;
class PtzZoomInRequestDefaultTypeInternal;
extern PtzZoomInRequestDefaultTypeInternal _PtzZoomInRequest_default_instance_;
class PtzZoomOutReply;
class PtzZoomOutReplyDefaultTypeInternal;
extern PtzZoomOutReplyDefaultTypeInternal _PtzZoomOutReply_default_instance_;
class PtzZoomOutRequest;
class PtzZoomOutRequestDefaultTypeInternal;
extern PtzZoomOutRequestDefaultTypeInternal _PtzZoomOutRequest_default_instance_;
class QueryRecordReply;
class QueryRecordReplyDefaultTypeInternal;
extern QueryRecordReplyDefaultTypeInternal _QueryRecordReply_default_instance_;
class QueryRecordRequest;
class QueryRecordRequestDefaultTypeInternal;
extern QueryRecordRequestDefaultTypeInternal _QueryRecordRequest_default_instance_;
class RealPlayUrlInReply;
class RealPlayUrlInReplyDefaultTypeInternal;
extern RealPlayUrlInReplyDefaultTypeInternal _RealPlayUrlInReply_default_instance_;
class RealPlayUrlInRequest;
class RealPlayUrlInRequestDefaultTypeInternal;
extern RealPlayUrlInRequestDefaultTypeInternal _RealPlayUrlInRequest_default_instance_;
class RealPlayUrlReply;
class RealPlayUrlReplyDefaultTypeInternal;
extern RealPlayUrlReplyDefaultTypeInternal _RealPlayUrlReply_default_instance_;
class RealPlayUrlRequest;
class RealPlayUrlRequestDefaultTypeInternal;
extern RealPlayUrlRequestDefaultTypeInternal _RealPlayUrlRequest_default_instance_;
class RecordDownloadReply;
class RecordDownloadReplyDefaultTypeInternal;
extern RecordDownloadReplyDefaultTypeInternal _RecordDownloadReply_default_instance_;
class RecordDownloadRequest;
class RecordDownloadRequestDefaultTypeInternal;
extern RecordDownloadRequestDefaultTypeInternal _RecordDownloadRequest_default_instance_;
class RecordInfo;
class RecordInfoDefaultTypeInternal;
extern RecordInfoDefaultTypeInternal _RecordInfo_default_instance_;
class SeekReply;
class SeekReplyDefaultTypeInternal;
extern SeekReplyDefaultTypeInternal _SeekReply_default_instance_;
class SeekRequest;
class SeekRequestDefaultTypeInternal;
extern SeekRequestDefaultTypeInternal _SeekRequest_default_instance_;
class ServiceStatusReply;
class ServiceStatusReplyDefaultTypeInternal;
extern ServiceStatusReplyDefaultTypeInternal _ServiceStatusReply_default_instance_;
class ServiceStatusRequest;
class ServiceStatusRequestDefaultTypeInternal;
extern ServiceStatusRequestDefaultTypeInternal _ServiceStatusRequest_default_instance_;
class StartBroadcastReply;
class StartBroadcastReplyDefaultTypeInternal;
extern StartBroadcastReplyDefaultTypeInternal _StartBroadcastReply_default_instance_;
class StartBroadcastRequest;
class StartBroadcastRequestDefaultTypeInternal;
extern StartBroadcastRequestDefaultTypeInternal _StartBroadcastRequest_default_instance_;
class StartTalkReply;
class StartTalkReplyDefaultTypeInternal;
extern StartTalkReplyDefaultTypeInternal _StartTalkReply_default_instance_;
class StartTalkRequest;
class StartTalkRequestDefaultTypeInternal;
extern StartTalkRequestDefaultTypeInternal _StartTalkRequest_default_instance_;
class StatusInfo;
class StatusInfoDefaultTypeInternal;
extern StatusInfoDefaultTypeInternal _StatusInfo_default_instance_;
class StopBroadcastReply;
class StopBroadcastReplyDefaultTypeInternal;
extern StopBroadcastReplyDefaultTypeInternal _StopBroadcastReply_default_instance_;
class StopBroadcastRequest;
class StopBroadcastRequestDefaultTypeInternal;
extern StopBroadcastRequestDefaultTypeInternal _StopBroadcastRequest_default_instance_;
class StopPlayRecordReply;
class StopPlayRecordReplyDefaultTypeInternal;
extern StopPlayRecordReplyDefaultTypeInternal _StopPlayRecordReply_default_instance_;
class StopPlayRecordRequest;
class StopPlayRecordRequestDefaultTypeInternal;
extern StopPlayRecordRequestDefaultTypeInternal _StopPlayRecordRequest_default_instance_;
class StopTalkReply;
class StopTalkReplyDefaultTypeInternal;
extern StopTalkReplyDefaultTypeInternal _StopTalkReply_default_instance_;
class StopTalkRequest;
class StopTalkRequestDefaultTypeInternal;
extern StopTalkRequestDefaultTypeInternal _StopTalkRequest_default_instance_;
class StopVideoByIdReply;
class StopVideoByIdReplyDefaultTypeInternal;
extern StopVideoByIdReplyDefaultTypeInternal _StopVideoByIdReply_default_instance_;
class StopVideoByIdRequest;
class StopVideoByIdRequestDefaultTypeInternal;
extern StopVideoByIdRequestDefaultTypeInternal _StopVideoByIdRequest_default_instance_;
class StopVideoBySsrcReply;
class StopVideoBySsrcReplyDefaultTypeInternal;
extern StopVideoBySsrcReplyDefaultTypeInternal _StopVideoBySsrcReply_default_instance_;
class StopVideoBySsrcRequest;
class StopVideoBySsrcRequestDefaultTypeInternal;
extern StopVideoBySsrcRequestDefaultTypeInternal _StopVideoBySsrcRequest_default_instance_;
}  // namespace GB28181
PROTOBUF_NAMESPACE_OPEN
template<> ::GB28181::ControlReply* Arena::CreateMaybeMessage<::GB28181::ControlReply>(Arena*);
template<> ::GB28181::DeviceList* Arena::CreateMaybeMessage<::GB28181::DeviceList>(Arena*);
template<> ::GB28181::DeviceRebootReply* Arena::CreateMaybeMessage<::GB28181::DeviceRebootReply>(Arena*);
template<> ::GB28181::DeviceRebootRequest* Arena::CreateMaybeMessage<::GB28181::DeviceRebootRequest>(Arena*);
template<> ::GB28181::GetAllDeviceStatusReply* Arena::CreateMaybeMessage<::GB28181::GetAllDeviceStatusReply>(Arena*);
template<> ::GB28181::GetAllDeviceStatusRequest* Arena::CreateMaybeMessage<::GB28181::GetAllDeviceStatusRequest>(Arena*);
template<> ::GB28181::GetDeviceListReply* Arena::CreateMaybeMessage<::GB28181::GetDeviceListReply>(Arena*);
template<> ::GB28181::GetDeviceListRequest* Arena::CreateMaybeMessage<::GB28181::GetDeviceListRequest>(Arena*);
template<> ::GB28181::GetDeviceStatusReply* Arena::CreateMaybeMessage<::GB28181::GetDeviceStatusReply>(Arena*);
template<> ::GB28181::GetDeviceStatusRequest* Arena::CreateMaybeMessage<::GB28181::GetDeviceStatusRequest>(Arena*);
template<> ::GB28181::GetHLSUrlInReply* Arena::CreateMaybeMessage<::GB28181::GetHLSUrlInReply>(Arena*);
template<> ::GB28181::GetHLSUrlInRequest* Arena::CreateMaybeMessage<::GB28181::GetHLSUrlInRequest>(Arena*);
template<> ::GB28181::GetHLSUrlReply* Arena::CreateMaybeMessage<::GB28181::GetHLSUrlReply>(Arena*);
template<> ::GB28181::GetHLSUrlRequest* Arena::CreateMaybeMessage<::GB28181::GetHLSUrlRequest>(Arena*);
template<> ::GB28181::GetPresetReply* Arena::CreateMaybeMessage<::GB28181::GetPresetReply>(Arena*);
template<> ::GB28181::GetPresetRequest* Arena::CreateMaybeMessage<::GB28181::GetPresetRequest>(Arena*);
template<> ::GB28181::GetRTMPUrlInReply* Arena::CreateMaybeMessage<::GB28181::GetRTMPUrlInReply>(Arena*);
template<> ::GB28181::GetRTMPUrlInRequest* Arena::CreateMaybeMessage<::GB28181::GetRTMPUrlInRequest>(Arena*);
template<> ::GB28181::GetRTMPUrlReply* Arena::CreateMaybeMessage<::GB28181::GetRTMPUrlReply>(Arena*);
template<> ::GB28181::GetRTMPUrlRequest* Arena::CreateMaybeMessage<::GB28181::GetRTMPUrlRequest>(Arena*);
template<> ::GB28181::GetRecordReply* Arena::CreateMaybeMessage<::GB28181::GetRecordReply>(Arena*);
template<> ::GB28181::GetRecordRequest* Arena::CreateMaybeMessage<::GB28181::GetRecordRequest>(Arena*);
template<> ::GB28181::GoBackReply* Arena::CreateMaybeMessage<::GB28181::GoBackReply>(Arena*);
template<> ::GB28181::GoBackRequest* Arena::CreateMaybeMessage<::GB28181::GoBackRequest>(Arena*);
template<> ::GB28181::GoForwardReply* Arena::CreateMaybeMessage<::GB28181::GoForwardReply>(Arena*);
template<> ::GB28181::GoForwardRequest* Arena::CreateMaybeMessage<::GB28181::GoForwardRequest>(Arena*);
template<> ::GB28181::OnvifDeviceRebootReply* Arena::CreateMaybeMessage<::GB28181::OnvifDeviceRebootReply>(Arena*);
template<> ::GB28181::OnvifDeviceRebootRequest* Arena::CreateMaybeMessage<::GB28181::OnvifDeviceRebootRequest>(Arena*);
template<> ::GB28181::OnvifFocusFarReply* Arena::CreateMaybeMessage<::GB28181::OnvifFocusFarReply>(Arena*);
template<> ::GB28181::OnvifFocusFarRequest* Arena::CreateMaybeMessage<::GB28181::OnvifFocusFarRequest>(Arena*);
template<> ::GB28181::OnvifFocusNearReply* Arena::CreateMaybeMessage<::GB28181::OnvifFocusNearReply>(Arena*);
template<> ::GB28181::OnvifFocusNearRequest* Arena::CreateMaybeMessage<::GB28181::OnvifFocusNearRequest>(Arena*);
template<> ::GB28181::OnvifFocusStopReply* Arena::CreateMaybeMessage<::GB28181::OnvifFocusStopReply>(Arena*);
template<> ::GB28181::OnvifFocusStopRequest* Arena::CreateMaybeMessage<::GB28181::OnvifFocusStopRequest>(Arena*);
template<> ::GB28181::OnvifGetMainUrlReply* Arena::CreateMaybeMessage<::GB28181::OnvifGetMainUrlReply>(Arena*);
template<> ::GB28181::OnvifGetMainUrlRequest* Arena::CreateMaybeMessage<::GB28181::OnvifGetMainUrlRequest>(Arena*);
template<> ::GB28181::OnvifGetPresetReply* Arena::CreateMaybeMessage<::GB28181::OnvifGetPresetReply>(Arena*);
template<> ::GB28181::OnvifGetPresetRequest* Arena::CreateMaybeMessage<::GB28181::OnvifGetPresetRequest>(Arena*);
template<> ::GB28181::OnvifGetSubUrlReply* Arena::CreateMaybeMessage<::GB28181::OnvifGetSubUrlReply>(Arena*);
template<> ::GB28181::OnvifGetSubUrlRequest* Arena::CreateMaybeMessage<::GB28181::OnvifGetSubUrlRequest>(Arena*);
template<> ::GB28181::OnvifGotoPresetReply* Arena::CreateMaybeMessage<::GB28181::OnvifGotoPresetReply>(Arena*);
template<> ::GB28181::OnvifGotoPresetRequest* Arena::CreateMaybeMessage<::GB28181::OnvifGotoPresetRequest>(Arena*);
template<> ::GB28181::OnvifPresetInfo* Arena::CreateMaybeMessage<::GB28181::OnvifPresetInfo>(Arena*);
template<> ::GB28181::OnvifPtz3DReply* Arena::CreateMaybeMessage<::GB28181::OnvifPtz3DReply>(Arena*);
template<> ::GB28181::OnvifPtz3DRequest* Arena::CreateMaybeMessage<::GB28181::OnvifPtz3DRequest>(Arena*);
template<> ::GB28181::OnvifPtzMoveReply* Arena::CreateMaybeMessage<::GB28181::OnvifPtzMoveReply>(Arena*);
template<> ::GB28181::OnvifPtzMoveRequest* Arena::CreateMaybeMessage<::GB28181::OnvifPtzMoveRequest>(Arena*);
template<> ::GB28181::OnvifPtzStopReply* Arena::CreateMaybeMessage<::GB28181::OnvifPtzStopReply>(Arena*);
template<> ::GB28181::OnvifPtzStopRequest* Arena::CreateMaybeMessage<::GB28181::OnvifPtzStopRequest>(Arena*);
template<> ::GB28181::OnvifSetPresetReply* Arena::CreateMaybeMessage<::GB28181::OnvifSetPresetReply>(Arena*);
template<> ::GB28181::OnvifSetPresetRequest* Arena::CreateMaybeMessage<::GB28181::OnvifSetPresetRequest>(Arena*);
template<> ::GB28181::OnvifZoomInReply* Arena::CreateMaybeMessage<::GB28181::OnvifZoomInReply>(Arena*);
template<> ::GB28181::OnvifZoomInRequest* Arena::CreateMaybeMessage<::GB28181::OnvifZoomInRequest>(Arena*);
template<> ::GB28181::OnvifZoomOutReply* Arena::CreateMaybeMessage<::GB28181::OnvifZoomOutReply>(Arena*);
template<> ::GB28181::OnvifZoomOutRequest* Arena::CreateMaybeMessage<::GB28181::OnvifZoomOutRequest>(Arena*);
template<> ::GB28181::OnvifZoomStopReply* Arena::CreateMaybeMessage<::GB28181::OnvifZoomStopReply>(Arena*);
template<> ::GB28181::OnvifZoomStopRequest* Arena::CreateMaybeMessage<::GB28181::OnvifZoomStopRequest>(Arena*);
template<> ::GB28181::PauseReply* Arena::CreateMaybeMessage<::GB28181::PauseReply>(Arena*);
template<> ::GB28181::PauseRequest* Arena::CreateMaybeMessage<::GB28181::PauseRequest>(Arena*);
template<> ::GB28181::PlayBackUrlReply* Arena::CreateMaybeMessage<::GB28181::PlayBackUrlReply>(Arena*);
template<> ::GB28181::PlayBackUrlRequest* Arena::CreateMaybeMessage<::GB28181::PlayBackUrlRequest>(Arena*);
template<> ::GB28181::PlayFastReply* Arena::CreateMaybeMessage<::GB28181::PlayFastReply>(Arena*);
template<> ::GB28181::PlayFastRequest* Arena::CreateMaybeMessage<::GB28181::PlayFastRequest>(Arena*);
template<> ::GB28181::PlayReply* Arena::CreateMaybeMessage<::GB28181::PlayReply>(Arena*);
template<> ::GB28181::PlayRequest* Arena::CreateMaybeMessage<::GB28181::PlayRequest>(Arena*);
template<> ::GB28181::PlaySlowReply* Arena::CreateMaybeMessage<::GB28181::PlaySlowReply>(Arena*);
template<> ::GB28181::PlaySlowRequest* Arena::CreateMaybeMessage<::GB28181::PlaySlowRequest>(Arena*);
template<> ::GB28181::PresetDelRequest* Arena::CreateMaybeMessage<::GB28181::PresetDelRequest>(Arena*);
template<> ::GB28181::PresetGoRequest* Arena::CreateMaybeMessage<::GB28181::PresetGoRequest>(Arena*);
template<> ::GB28181::PresetInfo* Arena::CreateMaybeMessage<::GB28181::PresetInfo>(Arena*);
template<> ::GB28181::PresetQueryReply* Arena::CreateMaybeMessage<::GB28181::PresetQueryReply>(Arena*);
template<> ::GB28181::PresetQueryRequest* Arena::CreateMaybeMessage<::GB28181::PresetQueryRequest>(Arena*);
template<> ::GB28181::PresetSetRequest* Arena::CreateMaybeMessage<::GB28181::PresetSetRequest>(Arena*);
template<> ::GB28181::PtzCommandRequest* Arena::CreateMaybeMessage<::GB28181::PtzCommandRequest>(Arena*);
template<> ::GB28181::PtzFocusInReply* Arena::CreateMaybeMessage<::GB28181::PtzFocusInReply>(Arena*);
template<> ::GB28181::PtzFocusInRequest* Arena::CreateMaybeMessage<::GB28181::PtzFocusInRequest>(Arena*);
template<> ::GB28181::PtzFocusOutReply* Arena::CreateMaybeMessage<::GB28181::PtzFocusOutReply>(Arena*);
template<> ::GB28181::PtzFocusOutRequest* Arena::CreateMaybeMessage<::GB28181::PtzFocusOutRequest>(Arena*);
template<> ::GB28181::PtzIFStopReply* Arena::CreateMaybeMessage<::GB28181::PtzIFStopReply>(Arena*);
template<> ::GB28181::PtzIFStopRequest* Arena::CreateMaybeMessage<::GB28181::PtzIFStopRequest>(Arena*);
template<> ::GB28181::PtzIrisBigReply* Arena::CreateMaybeMessage<::GB28181::PtzIrisBigReply>(Arena*);
template<> ::GB28181::PtzIrisBigRequest* Arena::CreateMaybeMessage<::GB28181::PtzIrisBigRequest>(Arena*);
template<> ::GB28181::PtzIrisSmallReply* Arena::CreateMaybeMessage<::GB28181::PtzIrisSmallReply>(Arena*);
template<> ::GB28181::PtzIrisSmallRequest* Arena::CreateMaybeMessage<::GB28181::PtzIrisSmallRequest>(Arena*);
template<> ::GB28181::PtzStopReply* Arena::CreateMaybeMessage<::GB28181::PtzStopReply>(Arena*);
template<> ::GB28181::PtzStopRequest* Arena::CreateMaybeMessage<::GB28181::PtzStopRequest>(Arena*);
template<> ::GB28181::PtzZoomInReply* Arena::CreateMaybeMessage<::GB28181::PtzZoomInReply>(Arena*);
template<> ::GB28181::PtzZoomInRequest* Arena::CreateMaybeMessage<::GB28181::PtzZoomInRequest>(Arena*);
template<> ::GB28181::PtzZoomOutReply* Arena::CreateMaybeMessage<::GB28181::PtzZoomOutReply>(Arena*);
template<> ::GB28181::PtzZoomOutRequest* Arena::CreateMaybeMessage<::GB28181::PtzZoomOutRequest>(Arena*);
template<> ::GB28181::QueryRecordReply* Arena::CreateMaybeMessage<::GB28181::QueryRecordReply>(Arena*);
template<> ::GB28181::QueryRecordRequest* Arena::CreateMaybeMessage<::GB28181::QueryRecordRequest>(Arena*);
template<> ::GB28181::RealPlayUrlInReply* Arena::CreateMaybeMessage<::GB28181::RealPlayUrlInReply>(Arena*);
template<> ::GB28181::RealPlayUrlInRequest* Arena::CreateMaybeMessage<::GB28181::RealPlayUrlInRequest>(Arena*);
template<> ::GB28181::RealPlayUrlReply* Arena::CreateMaybeMessage<::GB28181::RealPlayUrlReply>(Arena*);
template<> ::GB28181::RealPlayUrlRequest* Arena::CreateMaybeMessage<::GB28181::RealPlayUrlRequest>(Arena*);
template<> ::GB28181::RecordDownloadReply* Arena::CreateMaybeMessage<::GB28181::RecordDownloadReply>(Arena*);
template<> ::GB28181::RecordDownloadRequest* Arena::CreateMaybeMessage<::GB28181::RecordDownloadRequest>(Arena*);
template<> ::GB28181::RecordInfo* Arena::CreateMaybeMessage<::GB28181::RecordInfo>(Arena*);
template<> ::GB28181::SeekReply* Arena::CreateMaybeMessage<::GB28181::SeekReply>(Arena*);
template<> ::GB28181::SeekRequest* Arena::CreateMaybeMessage<::GB28181::SeekRequest>(Arena*);
template<> ::GB28181::ServiceStatusReply* Arena::CreateMaybeMessage<::GB28181::ServiceStatusReply>(Arena*);
template<> ::GB28181::ServiceStatusRequest* Arena::CreateMaybeMessage<::GB28181::ServiceStatusRequest>(Arena*);
template<> ::GB28181::StartBroadcastReply* Arena::CreateMaybeMessage<::GB28181::StartBroadcastReply>(Arena*);
template<> ::GB28181::StartBroadcastRequest* Arena::CreateMaybeMessage<::GB28181::StartBroadcastRequest>(Arena*);
template<> ::GB28181::StartTalkReply* Arena::CreateMaybeMessage<::GB28181::StartTalkReply>(Arena*);
template<> ::GB28181::StartTalkRequest* Arena::CreateMaybeMessage<::GB28181::StartTalkRequest>(Arena*);
template<> ::GB28181::StatusInfo* Arena::CreateMaybeMessage<::GB28181::StatusInfo>(Arena*);
template<> ::GB28181::StopBroadcastReply* Arena::CreateMaybeMessage<::GB28181::StopBroadcastReply>(Arena*);
template<> ::GB28181::StopBroadcastRequest* Arena::CreateMaybeMessage<::GB28181::StopBroadcastRequest>(Arena*);
template<> ::GB28181::StopPlayRecordReply* Arena::CreateMaybeMessage<::GB28181::StopPlayRecordReply>(Arena*);
template<> ::GB28181::StopPlayRecordRequest* Arena::CreateMaybeMessage<::GB28181::StopPlayRecordRequest>(Arena*);
template<> ::GB28181::StopTalkReply* Arena::CreateMaybeMessage<::GB28181::StopTalkReply>(Arena*);
template<> ::GB28181::StopTalkRequest* Arena::CreateMaybeMessage<::GB28181::StopTalkRequest>(Arena*);
template<> ::GB28181::StopVideoByIdReply* Arena::CreateMaybeMessage<::GB28181::StopVideoByIdReply>(Arena*);
template<> ::GB28181::StopVideoByIdRequest* Arena::CreateMaybeMessage<::GB28181::StopVideoByIdRequest>(Arena*);
template<> ::GB28181::StopVideoBySsrcReply* Arena::CreateMaybeMessage<::GB28181::StopVideoBySsrcReply>(Arena*);
template<> ::GB28181::StopVideoBySsrcRequest* Arena::CreateMaybeMessage<::GB28181::StopVideoBySsrcRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace GB28181 {

// ===================================================================

class PtzCommandRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzCommandRequest) */ {
 public:
  inline PtzCommandRequest() : PtzCommandRequest(nullptr) {};
  virtual ~PtzCommandRequest();

  PtzCommandRequest(const PtzCommandRequest& from);
  PtzCommandRequest(PtzCommandRequest&& from) noexcept
    : PtzCommandRequest() {
    *this = ::std::move(from);
  }

  inline PtzCommandRequest& operator=(const PtzCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzCommandRequest& operator=(PtzCommandRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzCommandRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzCommandRequest* internal_default_instance() {
    return reinterpret_cast<const PtzCommandRequest*>(
               &_PtzCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PtzCommandRequest& a, PtzCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzCommandRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzCommandRequest* New() const final {
    return CreateMaybeMessage<PtzCommandRequest>(nullptr);
  }

  PtzCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzCommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzCommandRequest& from);
  void MergeFrom(const PtzCommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzCommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzCommandRequest";
  }
  protected:
  explicit PtzCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kDirectionFieldNumber = 4,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 direction = 4;
  void clear_direction();
  ::PROTOBUF_NAMESPACE_ID::int32 direction() const;
  void set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_direction() const;
  void _internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class ControlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.ControlReply) */ {
 public:
  inline ControlReply() : ControlReply(nullptr) {};
  virtual ~ControlReply();

  ControlReply(const ControlReply& from);
  ControlReply(ControlReply&& from) noexcept
    : ControlReply() {
    *this = ::std::move(from);
  }

  inline ControlReply& operator=(const ControlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlReply& operator=(ControlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ControlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ControlReply* internal_default_instance() {
    return reinterpret_cast<const ControlReply*>(
               &_ControlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlReply& a, ControlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ControlReply* New() const final {
    return CreateMaybeMessage<ControlReply>(nullptr);
  }

  ControlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ControlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ControlReply& from);
  void MergeFrom(const ControlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.ControlReply";
  }
  protected:
  explicit ControlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.ControlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzZoomInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzZoomInRequest) */ {
 public:
  inline PtzZoomInRequest() : PtzZoomInRequest(nullptr) {};
  virtual ~PtzZoomInRequest();

  PtzZoomInRequest(const PtzZoomInRequest& from);
  PtzZoomInRequest(PtzZoomInRequest&& from) noexcept
    : PtzZoomInRequest() {
    *this = ::std::move(from);
  }

  inline PtzZoomInRequest& operator=(const PtzZoomInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzZoomInRequest& operator=(PtzZoomInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzZoomInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzZoomInRequest* internal_default_instance() {
    return reinterpret_cast<const PtzZoomInRequest*>(
               &_PtzZoomInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PtzZoomInRequest& a, PtzZoomInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzZoomInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzZoomInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzZoomInRequest* New() const final {
    return CreateMaybeMessage<PtzZoomInRequest>(nullptr);
  }

  PtzZoomInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzZoomInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzZoomInRequest& from);
  void MergeFrom(const PtzZoomInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzZoomInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzZoomInRequest";
  }
  protected:
  explicit PtzZoomInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzZoomInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzZoomInReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzZoomInReply) */ {
 public:
  inline PtzZoomInReply() : PtzZoomInReply(nullptr) {};
  virtual ~PtzZoomInReply();

  PtzZoomInReply(const PtzZoomInReply& from);
  PtzZoomInReply(PtzZoomInReply&& from) noexcept
    : PtzZoomInReply() {
    *this = ::std::move(from);
  }

  inline PtzZoomInReply& operator=(const PtzZoomInReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzZoomInReply& operator=(PtzZoomInReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzZoomInReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzZoomInReply* internal_default_instance() {
    return reinterpret_cast<const PtzZoomInReply*>(
               &_PtzZoomInReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PtzZoomInReply& a, PtzZoomInReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzZoomInReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzZoomInReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzZoomInReply* New() const final {
    return CreateMaybeMessage<PtzZoomInReply>(nullptr);
  }

  PtzZoomInReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzZoomInReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzZoomInReply& from);
  void MergeFrom(const PtzZoomInReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzZoomInReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzZoomInReply";
  }
  protected:
  explicit PtzZoomInReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzZoomInReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzZoomOutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzZoomOutRequest) */ {
 public:
  inline PtzZoomOutRequest() : PtzZoomOutRequest(nullptr) {};
  virtual ~PtzZoomOutRequest();

  PtzZoomOutRequest(const PtzZoomOutRequest& from);
  PtzZoomOutRequest(PtzZoomOutRequest&& from) noexcept
    : PtzZoomOutRequest() {
    *this = ::std::move(from);
  }

  inline PtzZoomOutRequest& operator=(const PtzZoomOutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzZoomOutRequest& operator=(PtzZoomOutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzZoomOutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzZoomOutRequest* internal_default_instance() {
    return reinterpret_cast<const PtzZoomOutRequest*>(
               &_PtzZoomOutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PtzZoomOutRequest& a, PtzZoomOutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzZoomOutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzZoomOutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzZoomOutRequest* New() const final {
    return CreateMaybeMessage<PtzZoomOutRequest>(nullptr);
  }

  PtzZoomOutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzZoomOutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzZoomOutRequest& from);
  void MergeFrom(const PtzZoomOutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzZoomOutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzZoomOutRequest";
  }
  protected:
  explicit PtzZoomOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzZoomOutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzZoomOutReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzZoomOutReply) */ {
 public:
  inline PtzZoomOutReply() : PtzZoomOutReply(nullptr) {};
  virtual ~PtzZoomOutReply();

  PtzZoomOutReply(const PtzZoomOutReply& from);
  PtzZoomOutReply(PtzZoomOutReply&& from) noexcept
    : PtzZoomOutReply() {
    *this = ::std::move(from);
  }

  inline PtzZoomOutReply& operator=(const PtzZoomOutReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzZoomOutReply& operator=(PtzZoomOutReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzZoomOutReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzZoomOutReply* internal_default_instance() {
    return reinterpret_cast<const PtzZoomOutReply*>(
               &_PtzZoomOutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PtzZoomOutReply& a, PtzZoomOutReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzZoomOutReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzZoomOutReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzZoomOutReply* New() const final {
    return CreateMaybeMessage<PtzZoomOutReply>(nullptr);
  }

  PtzZoomOutReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzZoomOutReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzZoomOutReply& from);
  void MergeFrom(const PtzZoomOutReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzZoomOutReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzZoomOutReply";
  }
  protected:
  explicit PtzZoomOutReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzZoomOutReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzStopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzStopRequest) */ {
 public:
  inline PtzStopRequest() : PtzStopRequest(nullptr) {};
  virtual ~PtzStopRequest();

  PtzStopRequest(const PtzStopRequest& from);
  PtzStopRequest(PtzStopRequest&& from) noexcept
    : PtzStopRequest() {
    *this = ::std::move(from);
  }

  inline PtzStopRequest& operator=(const PtzStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzStopRequest& operator=(PtzStopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzStopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzStopRequest* internal_default_instance() {
    return reinterpret_cast<const PtzStopRequest*>(
               &_PtzStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PtzStopRequest& a, PtzStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzStopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzStopRequest* New() const final {
    return CreateMaybeMessage<PtzStopRequest>(nullptr);
  }

  PtzStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzStopRequest& from);
  void MergeFrom(const PtzStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzStopRequest";
  }
  protected:
  explicit PtzStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzStopReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzStopReply) */ {
 public:
  inline PtzStopReply() : PtzStopReply(nullptr) {};
  virtual ~PtzStopReply();

  PtzStopReply(const PtzStopReply& from);
  PtzStopReply(PtzStopReply&& from) noexcept
    : PtzStopReply() {
    *this = ::std::move(from);
  }

  inline PtzStopReply& operator=(const PtzStopReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzStopReply& operator=(PtzStopReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzStopReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzStopReply* internal_default_instance() {
    return reinterpret_cast<const PtzStopReply*>(
               &_PtzStopReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PtzStopReply& a, PtzStopReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzStopReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzStopReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzStopReply* New() const final {
    return CreateMaybeMessage<PtzStopReply>(nullptr);
  }

  PtzStopReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzStopReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzStopReply& from);
  void MergeFrom(const PtzStopReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzStopReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzStopReply";
  }
  protected:
  explicit PtzStopReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzStopReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzIrisBigRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzIrisBigRequest) */ {
 public:
  inline PtzIrisBigRequest() : PtzIrisBigRequest(nullptr) {};
  virtual ~PtzIrisBigRequest();

  PtzIrisBigRequest(const PtzIrisBigRequest& from);
  PtzIrisBigRequest(PtzIrisBigRequest&& from) noexcept
    : PtzIrisBigRequest() {
    *this = ::std::move(from);
  }

  inline PtzIrisBigRequest& operator=(const PtzIrisBigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzIrisBigRequest& operator=(PtzIrisBigRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzIrisBigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzIrisBigRequest* internal_default_instance() {
    return reinterpret_cast<const PtzIrisBigRequest*>(
               &_PtzIrisBigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PtzIrisBigRequest& a, PtzIrisBigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzIrisBigRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzIrisBigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzIrisBigRequest* New() const final {
    return CreateMaybeMessage<PtzIrisBigRequest>(nullptr);
  }

  PtzIrisBigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzIrisBigRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzIrisBigRequest& from);
  void MergeFrom(const PtzIrisBigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzIrisBigRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzIrisBigRequest";
  }
  protected:
  explicit PtzIrisBigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzIrisBigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzIrisBigReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzIrisBigReply) */ {
 public:
  inline PtzIrisBigReply() : PtzIrisBigReply(nullptr) {};
  virtual ~PtzIrisBigReply();

  PtzIrisBigReply(const PtzIrisBigReply& from);
  PtzIrisBigReply(PtzIrisBigReply&& from) noexcept
    : PtzIrisBigReply() {
    *this = ::std::move(from);
  }

  inline PtzIrisBigReply& operator=(const PtzIrisBigReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzIrisBigReply& operator=(PtzIrisBigReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzIrisBigReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzIrisBigReply* internal_default_instance() {
    return reinterpret_cast<const PtzIrisBigReply*>(
               &_PtzIrisBigReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PtzIrisBigReply& a, PtzIrisBigReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzIrisBigReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzIrisBigReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzIrisBigReply* New() const final {
    return CreateMaybeMessage<PtzIrisBigReply>(nullptr);
  }

  PtzIrisBigReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzIrisBigReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzIrisBigReply& from);
  void MergeFrom(const PtzIrisBigReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzIrisBigReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzIrisBigReply";
  }
  protected:
  explicit PtzIrisBigReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzIrisBigReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzIrisSmallRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzIrisSmallRequest) */ {
 public:
  inline PtzIrisSmallRequest() : PtzIrisSmallRequest(nullptr) {};
  virtual ~PtzIrisSmallRequest();

  PtzIrisSmallRequest(const PtzIrisSmallRequest& from);
  PtzIrisSmallRequest(PtzIrisSmallRequest&& from) noexcept
    : PtzIrisSmallRequest() {
    *this = ::std::move(from);
  }

  inline PtzIrisSmallRequest& operator=(const PtzIrisSmallRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzIrisSmallRequest& operator=(PtzIrisSmallRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzIrisSmallRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzIrisSmallRequest* internal_default_instance() {
    return reinterpret_cast<const PtzIrisSmallRequest*>(
               &_PtzIrisSmallRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PtzIrisSmallRequest& a, PtzIrisSmallRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzIrisSmallRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzIrisSmallRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzIrisSmallRequest* New() const final {
    return CreateMaybeMessage<PtzIrisSmallRequest>(nullptr);
  }

  PtzIrisSmallRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzIrisSmallRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzIrisSmallRequest& from);
  void MergeFrom(const PtzIrisSmallRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzIrisSmallRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzIrisSmallRequest";
  }
  protected:
  explicit PtzIrisSmallRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzIrisSmallRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzIrisSmallReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzIrisSmallReply) */ {
 public:
  inline PtzIrisSmallReply() : PtzIrisSmallReply(nullptr) {};
  virtual ~PtzIrisSmallReply();

  PtzIrisSmallReply(const PtzIrisSmallReply& from);
  PtzIrisSmallReply(PtzIrisSmallReply&& from) noexcept
    : PtzIrisSmallReply() {
    *this = ::std::move(from);
  }

  inline PtzIrisSmallReply& operator=(const PtzIrisSmallReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzIrisSmallReply& operator=(PtzIrisSmallReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzIrisSmallReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzIrisSmallReply* internal_default_instance() {
    return reinterpret_cast<const PtzIrisSmallReply*>(
               &_PtzIrisSmallReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PtzIrisSmallReply& a, PtzIrisSmallReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzIrisSmallReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzIrisSmallReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzIrisSmallReply* New() const final {
    return CreateMaybeMessage<PtzIrisSmallReply>(nullptr);
  }

  PtzIrisSmallReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzIrisSmallReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzIrisSmallReply& from);
  void MergeFrom(const PtzIrisSmallReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzIrisSmallReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzIrisSmallReply";
  }
  protected:
  explicit PtzIrisSmallReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzIrisSmallReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzFocusOutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzFocusOutRequest) */ {
 public:
  inline PtzFocusOutRequest() : PtzFocusOutRequest(nullptr) {};
  virtual ~PtzFocusOutRequest();

  PtzFocusOutRequest(const PtzFocusOutRequest& from);
  PtzFocusOutRequest(PtzFocusOutRequest&& from) noexcept
    : PtzFocusOutRequest() {
    *this = ::std::move(from);
  }

  inline PtzFocusOutRequest& operator=(const PtzFocusOutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzFocusOutRequest& operator=(PtzFocusOutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzFocusOutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzFocusOutRequest* internal_default_instance() {
    return reinterpret_cast<const PtzFocusOutRequest*>(
               &_PtzFocusOutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PtzFocusOutRequest& a, PtzFocusOutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzFocusOutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzFocusOutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzFocusOutRequest* New() const final {
    return CreateMaybeMessage<PtzFocusOutRequest>(nullptr);
  }

  PtzFocusOutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzFocusOutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzFocusOutRequest& from);
  void MergeFrom(const PtzFocusOutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzFocusOutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzFocusOutRequest";
  }
  protected:
  explicit PtzFocusOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzFocusOutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzFocusOutReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzFocusOutReply) */ {
 public:
  inline PtzFocusOutReply() : PtzFocusOutReply(nullptr) {};
  virtual ~PtzFocusOutReply();

  PtzFocusOutReply(const PtzFocusOutReply& from);
  PtzFocusOutReply(PtzFocusOutReply&& from) noexcept
    : PtzFocusOutReply() {
    *this = ::std::move(from);
  }

  inline PtzFocusOutReply& operator=(const PtzFocusOutReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzFocusOutReply& operator=(PtzFocusOutReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzFocusOutReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzFocusOutReply* internal_default_instance() {
    return reinterpret_cast<const PtzFocusOutReply*>(
               &_PtzFocusOutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PtzFocusOutReply& a, PtzFocusOutReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzFocusOutReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzFocusOutReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzFocusOutReply* New() const final {
    return CreateMaybeMessage<PtzFocusOutReply>(nullptr);
  }

  PtzFocusOutReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzFocusOutReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzFocusOutReply& from);
  void MergeFrom(const PtzFocusOutReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzFocusOutReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzFocusOutReply";
  }
  protected:
  explicit PtzFocusOutReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzFocusOutReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzFocusInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzFocusInRequest) */ {
 public:
  inline PtzFocusInRequest() : PtzFocusInRequest(nullptr) {};
  virtual ~PtzFocusInRequest();

  PtzFocusInRequest(const PtzFocusInRequest& from);
  PtzFocusInRequest(PtzFocusInRequest&& from) noexcept
    : PtzFocusInRequest() {
    *this = ::std::move(from);
  }

  inline PtzFocusInRequest& operator=(const PtzFocusInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzFocusInRequest& operator=(PtzFocusInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzFocusInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzFocusInRequest* internal_default_instance() {
    return reinterpret_cast<const PtzFocusInRequest*>(
               &_PtzFocusInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(PtzFocusInRequest& a, PtzFocusInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzFocusInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzFocusInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzFocusInRequest* New() const final {
    return CreateMaybeMessage<PtzFocusInRequest>(nullptr);
  }

  PtzFocusInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzFocusInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzFocusInRequest& from);
  void MergeFrom(const PtzFocusInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzFocusInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzFocusInRequest";
  }
  protected:
  explicit PtzFocusInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kSpeedFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 speed = 3;
  void clear_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 speed() const;
  void set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_speed() const;
  void _internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzFocusInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzFocusInReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzFocusInReply) */ {
 public:
  inline PtzFocusInReply() : PtzFocusInReply(nullptr) {};
  virtual ~PtzFocusInReply();

  PtzFocusInReply(const PtzFocusInReply& from);
  PtzFocusInReply(PtzFocusInReply&& from) noexcept
    : PtzFocusInReply() {
    *this = ::std::move(from);
  }

  inline PtzFocusInReply& operator=(const PtzFocusInReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzFocusInReply& operator=(PtzFocusInReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzFocusInReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzFocusInReply* internal_default_instance() {
    return reinterpret_cast<const PtzFocusInReply*>(
               &_PtzFocusInReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PtzFocusInReply& a, PtzFocusInReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzFocusInReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzFocusInReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzFocusInReply* New() const final {
    return CreateMaybeMessage<PtzFocusInReply>(nullptr);
  }

  PtzFocusInReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzFocusInReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzFocusInReply& from);
  void MergeFrom(const PtzFocusInReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzFocusInReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzFocusInReply";
  }
  protected:
  explicit PtzFocusInReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzFocusInReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzIFStopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzIFStopRequest) */ {
 public:
  inline PtzIFStopRequest() : PtzIFStopRequest(nullptr) {};
  virtual ~PtzIFStopRequest();

  PtzIFStopRequest(const PtzIFStopRequest& from);
  PtzIFStopRequest(PtzIFStopRequest&& from) noexcept
    : PtzIFStopRequest() {
    *this = ::std::move(from);
  }

  inline PtzIFStopRequest& operator=(const PtzIFStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzIFStopRequest& operator=(PtzIFStopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzIFStopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzIFStopRequest* internal_default_instance() {
    return reinterpret_cast<const PtzIFStopRequest*>(
               &_PtzIFStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PtzIFStopRequest& a, PtzIFStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzIFStopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzIFStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzIFStopRequest* New() const final {
    return CreateMaybeMessage<PtzIFStopRequest>(nullptr);
  }

  PtzIFStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzIFStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzIFStopRequest& from);
  void MergeFrom(const PtzIFStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzIFStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzIFStopRequest";
  }
  protected:
  explicit PtzIFStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzIFStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PtzIFStopReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PtzIFStopReply) */ {
 public:
  inline PtzIFStopReply() : PtzIFStopReply(nullptr) {};
  virtual ~PtzIFStopReply();

  PtzIFStopReply(const PtzIFStopReply& from);
  PtzIFStopReply(PtzIFStopReply&& from) noexcept
    : PtzIFStopReply() {
    *this = ::std::move(from);
  }

  inline PtzIFStopReply& operator=(const PtzIFStopReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PtzIFStopReply& operator=(PtzIFStopReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PtzIFStopReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PtzIFStopReply* internal_default_instance() {
    return reinterpret_cast<const PtzIFStopReply*>(
               &_PtzIFStopReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PtzIFStopReply& a, PtzIFStopReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PtzIFStopReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PtzIFStopReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PtzIFStopReply* New() const final {
    return CreateMaybeMessage<PtzIFStopReply>(nullptr);
  }

  PtzIFStopReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PtzIFStopReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PtzIFStopReply& from);
  void MergeFrom(const PtzIFStopReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PtzIFStopReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PtzIFStopReply";
  }
  protected:
  explicit PtzIFStopReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PtzIFStopReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class RealPlayUrlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.RealPlayUrlRequest) */ {
 public:
  inline RealPlayUrlRequest() : RealPlayUrlRequest(nullptr) {};
  virtual ~RealPlayUrlRequest();

  RealPlayUrlRequest(const RealPlayUrlRequest& from);
  RealPlayUrlRequest(RealPlayUrlRequest&& from) noexcept
    : RealPlayUrlRequest() {
    *this = ::std::move(from);
  }

  inline RealPlayUrlRequest& operator=(const RealPlayUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealPlayUrlRequest& operator=(RealPlayUrlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealPlayUrlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealPlayUrlRequest* internal_default_instance() {
    return reinterpret_cast<const RealPlayUrlRequest*>(
               &_RealPlayUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RealPlayUrlRequest& a, RealPlayUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RealPlayUrlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealPlayUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealPlayUrlRequest* New() const final {
    return CreateMaybeMessage<RealPlayUrlRequest>(nullptr);
  }

  RealPlayUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealPlayUrlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealPlayUrlRequest& from);
  void MergeFrom(const RealPlayUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealPlayUrlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.RealPlayUrlRequest";
  }
  protected:
  explicit RealPlayUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIsTcpFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 isTcp = 3;
  void clear_istcp();
  ::PROTOBUF_NAMESPACE_ID::int32 istcp() const;
  void set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istcp() const;
  void _internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.RealPlayUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 istcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class RealPlayUrlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.RealPlayUrlReply) */ {
 public:
  inline RealPlayUrlReply() : RealPlayUrlReply(nullptr) {};
  virtual ~RealPlayUrlReply();

  RealPlayUrlReply(const RealPlayUrlReply& from);
  RealPlayUrlReply(RealPlayUrlReply&& from) noexcept
    : RealPlayUrlReply() {
    *this = ::std::move(from);
  }

  inline RealPlayUrlReply& operator=(const RealPlayUrlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealPlayUrlReply& operator=(RealPlayUrlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealPlayUrlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealPlayUrlReply* internal_default_instance() {
    return reinterpret_cast<const RealPlayUrlReply*>(
               &_RealPlayUrlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RealPlayUrlReply& a, RealPlayUrlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RealPlayUrlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealPlayUrlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealPlayUrlReply* New() const final {
    return CreateMaybeMessage<RealPlayUrlReply>(nullptr);
  }

  RealPlayUrlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealPlayUrlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealPlayUrlReply& from);
  void MergeFrom(const RealPlayUrlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealPlayUrlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.RealPlayUrlReply";
  }
  protected:
  explicit RealPlayUrlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.RealPlayUrlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class RealPlayUrlInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.RealPlayUrlInRequest) */ {
 public:
  inline RealPlayUrlInRequest() : RealPlayUrlInRequest(nullptr) {};
  virtual ~RealPlayUrlInRequest();

  RealPlayUrlInRequest(const RealPlayUrlInRequest& from);
  RealPlayUrlInRequest(RealPlayUrlInRequest&& from) noexcept
    : RealPlayUrlInRequest() {
    *this = ::std::move(from);
  }

  inline RealPlayUrlInRequest& operator=(const RealPlayUrlInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealPlayUrlInRequest& operator=(RealPlayUrlInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealPlayUrlInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealPlayUrlInRequest* internal_default_instance() {
    return reinterpret_cast<const RealPlayUrlInRequest*>(
               &_RealPlayUrlInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(RealPlayUrlInRequest& a, RealPlayUrlInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RealPlayUrlInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealPlayUrlInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealPlayUrlInRequest* New() const final {
    return CreateMaybeMessage<RealPlayUrlInRequest>(nullptr);
  }

  RealPlayUrlInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealPlayUrlInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealPlayUrlInRequest& from);
  void MergeFrom(const RealPlayUrlInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealPlayUrlInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.RealPlayUrlInRequest";
  }
  protected:
  explicit RealPlayUrlInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIsTcpFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 isTcp = 3;
  void clear_istcp();
  ::PROTOBUF_NAMESPACE_ID::int32 istcp() const;
  void set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istcp() const;
  void _internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.RealPlayUrlInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 istcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class RealPlayUrlInReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.RealPlayUrlInReply) */ {
 public:
  inline RealPlayUrlInReply() : RealPlayUrlInReply(nullptr) {};
  virtual ~RealPlayUrlInReply();

  RealPlayUrlInReply(const RealPlayUrlInReply& from);
  RealPlayUrlInReply(RealPlayUrlInReply&& from) noexcept
    : RealPlayUrlInReply() {
    *this = ::std::move(from);
  }

  inline RealPlayUrlInReply& operator=(const RealPlayUrlInReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RealPlayUrlInReply& operator=(RealPlayUrlInReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RealPlayUrlInReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RealPlayUrlInReply* internal_default_instance() {
    return reinterpret_cast<const RealPlayUrlInReply*>(
               &_RealPlayUrlInReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(RealPlayUrlInReply& a, RealPlayUrlInReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RealPlayUrlInReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RealPlayUrlInReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RealPlayUrlInReply* New() const final {
    return CreateMaybeMessage<RealPlayUrlInReply>(nullptr);
  }

  RealPlayUrlInReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RealPlayUrlInReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RealPlayUrlInReply& from);
  void MergeFrom(const RealPlayUrlInReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RealPlayUrlInReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.RealPlayUrlInReply";
  }
  protected:
  explicit RealPlayUrlInReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 2,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string url = 2;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.RealPlayUrlInReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetRTMPUrlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetRTMPUrlRequest) */ {
 public:
  inline GetRTMPUrlRequest() : GetRTMPUrlRequest(nullptr) {};
  virtual ~GetRTMPUrlRequest();

  GetRTMPUrlRequest(const GetRTMPUrlRequest& from);
  GetRTMPUrlRequest(GetRTMPUrlRequest&& from) noexcept
    : GetRTMPUrlRequest() {
    *this = ::std::move(from);
  }

  inline GetRTMPUrlRequest& operator=(const GetRTMPUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRTMPUrlRequest& operator=(GetRTMPUrlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRTMPUrlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRTMPUrlRequest* internal_default_instance() {
    return reinterpret_cast<const GetRTMPUrlRequest*>(
               &_GetRTMPUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(GetRTMPUrlRequest& a, GetRTMPUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRTMPUrlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRTMPUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRTMPUrlRequest* New() const final {
    return CreateMaybeMessage<GetRTMPUrlRequest>(nullptr);
  }

  GetRTMPUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRTMPUrlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRTMPUrlRequest& from);
  void MergeFrom(const GetRTMPUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRTMPUrlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetRTMPUrlRequest";
  }
  protected:
  explicit GetRTMPUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIsTcpFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 isTcp = 3;
  void clear_istcp();
  ::PROTOBUF_NAMESPACE_ID::int32 istcp() const;
  void set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istcp() const;
  void _internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetRTMPUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 istcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetRTMPUrlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetRTMPUrlReply) */ {
 public:
  inline GetRTMPUrlReply() : GetRTMPUrlReply(nullptr) {};
  virtual ~GetRTMPUrlReply();

  GetRTMPUrlReply(const GetRTMPUrlReply& from);
  GetRTMPUrlReply(GetRTMPUrlReply&& from) noexcept
    : GetRTMPUrlReply() {
    *this = ::std::move(from);
  }

  inline GetRTMPUrlReply& operator=(const GetRTMPUrlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRTMPUrlReply& operator=(GetRTMPUrlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRTMPUrlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRTMPUrlReply* internal_default_instance() {
    return reinterpret_cast<const GetRTMPUrlReply*>(
               &_GetRTMPUrlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetRTMPUrlReply& a, GetRTMPUrlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRTMPUrlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRTMPUrlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRTMPUrlReply* New() const final {
    return CreateMaybeMessage<GetRTMPUrlReply>(nullptr);
  }

  GetRTMPUrlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRTMPUrlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRTMPUrlReply& from);
  void MergeFrom(const GetRTMPUrlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRTMPUrlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetRTMPUrlReply";
  }
  protected:
  explicit GetRTMPUrlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetRTMPUrlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetRTMPUrlInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetRTMPUrlInRequest) */ {
 public:
  inline GetRTMPUrlInRequest() : GetRTMPUrlInRequest(nullptr) {};
  virtual ~GetRTMPUrlInRequest();

  GetRTMPUrlInRequest(const GetRTMPUrlInRequest& from);
  GetRTMPUrlInRequest(GetRTMPUrlInRequest&& from) noexcept
    : GetRTMPUrlInRequest() {
    *this = ::std::move(from);
  }

  inline GetRTMPUrlInRequest& operator=(const GetRTMPUrlInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRTMPUrlInRequest& operator=(GetRTMPUrlInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRTMPUrlInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRTMPUrlInRequest* internal_default_instance() {
    return reinterpret_cast<const GetRTMPUrlInRequest*>(
               &_GetRTMPUrlInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetRTMPUrlInRequest& a, GetRTMPUrlInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRTMPUrlInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRTMPUrlInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRTMPUrlInRequest* New() const final {
    return CreateMaybeMessage<GetRTMPUrlInRequest>(nullptr);
  }

  GetRTMPUrlInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRTMPUrlInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRTMPUrlInRequest& from);
  void MergeFrom(const GetRTMPUrlInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRTMPUrlInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetRTMPUrlInRequest";
  }
  protected:
  explicit GetRTMPUrlInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIsTcpFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 isTcp = 3;
  void clear_istcp();
  ::PROTOBUF_NAMESPACE_ID::int32 istcp() const;
  void set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istcp() const;
  void _internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetRTMPUrlInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 istcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetRTMPUrlInReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetRTMPUrlInReply) */ {
 public:
  inline GetRTMPUrlInReply() : GetRTMPUrlInReply(nullptr) {};
  virtual ~GetRTMPUrlInReply();

  GetRTMPUrlInReply(const GetRTMPUrlInReply& from);
  GetRTMPUrlInReply(GetRTMPUrlInReply&& from) noexcept
    : GetRTMPUrlInReply() {
    *this = ::std::move(from);
  }

  inline GetRTMPUrlInReply& operator=(const GetRTMPUrlInReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRTMPUrlInReply& operator=(GetRTMPUrlInReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRTMPUrlInReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRTMPUrlInReply* internal_default_instance() {
    return reinterpret_cast<const GetRTMPUrlInReply*>(
               &_GetRTMPUrlInReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetRTMPUrlInReply& a, GetRTMPUrlInReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRTMPUrlInReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRTMPUrlInReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRTMPUrlInReply* New() const final {
    return CreateMaybeMessage<GetRTMPUrlInReply>(nullptr);
  }

  GetRTMPUrlInReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRTMPUrlInReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRTMPUrlInReply& from);
  void MergeFrom(const GetRTMPUrlInReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRTMPUrlInReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetRTMPUrlInReply";
  }
  protected:
  explicit GetRTMPUrlInReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetRTMPUrlInReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetHLSUrlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetHLSUrlRequest) */ {
 public:
  inline GetHLSUrlRequest() : GetHLSUrlRequest(nullptr) {};
  virtual ~GetHLSUrlRequest();

  GetHLSUrlRequest(const GetHLSUrlRequest& from);
  GetHLSUrlRequest(GetHLSUrlRequest&& from) noexcept
    : GetHLSUrlRequest() {
    *this = ::std::move(from);
  }

  inline GetHLSUrlRequest& operator=(const GetHLSUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHLSUrlRequest& operator=(GetHLSUrlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHLSUrlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHLSUrlRequest* internal_default_instance() {
    return reinterpret_cast<const GetHLSUrlRequest*>(
               &_GetHLSUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetHLSUrlRequest& a, GetHLSUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHLSUrlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHLSUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHLSUrlRequest* New() const final {
    return CreateMaybeMessage<GetHLSUrlRequest>(nullptr);
  }

  GetHLSUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHLSUrlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHLSUrlRequest& from);
  void MergeFrom(const GetHLSUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHLSUrlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetHLSUrlRequest";
  }
  protected:
  explicit GetHLSUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIsTcpFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 isTcp = 3;
  void clear_istcp();
  ::PROTOBUF_NAMESPACE_ID::int32 istcp() const;
  void set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istcp() const;
  void _internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetHLSUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 istcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetHLSUrlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetHLSUrlReply) */ {
 public:
  inline GetHLSUrlReply() : GetHLSUrlReply(nullptr) {};
  virtual ~GetHLSUrlReply();

  GetHLSUrlReply(const GetHLSUrlReply& from);
  GetHLSUrlReply(GetHLSUrlReply&& from) noexcept
    : GetHLSUrlReply() {
    *this = ::std::move(from);
  }

  inline GetHLSUrlReply& operator=(const GetHLSUrlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHLSUrlReply& operator=(GetHLSUrlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHLSUrlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHLSUrlReply* internal_default_instance() {
    return reinterpret_cast<const GetHLSUrlReply*>(
               &_GetHLSUrlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetHLSUrlReply& a, GetHLSUrlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHLSUrlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHLSUrlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHLSUrlReply* New() const final {
    return CreateMaybeMessage<GetHLSUrlReply>(nullptr);
  }

  GetHLSUrlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHLSUrlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHLSUrlReply& from);
  void MergeFrom(const GetHLSUrlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHLSUrlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetHLSUrlReply";
  }
  protected:
  explicit GetHLSUrlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetHLSUrlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetHLSUrlInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetHLSUrlInRequest) */ {
 public:
  inline GetHLSUrlInRequest() : GetHLSUrlInRequest(nullptr) {};
  virtual ~GetHLSUrlInRequest();

  GetHLSUrlInRequest(const GetHLSUrlInRequest& from);
  GetHLSUrlInRequest(GetHLSUrlInRequest&& from) noexcept
    : GetHLSUrlInRequest() {
    *this = ::std::move(from);
  }

  inline GetHLSUrlInRequest& operator=(const GetHLSUrlInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHLSUrlInRequest& operator=(GetHLSUrlInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHLSUrlInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHLSUrlInRequest* internal_default_instance() {
    return reinterpret_cast<const GetHLSUrlInRequest*>(
               &_GetHLSUrlInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(GetHLSUrlInRequest& a, GetHLSUrlInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHLSUrlInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHLSUrlInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHLSUrlInRequest* New() const final {
    return CreateMaybeMessage<GetHLSUrlInRequest>(nullptr);
  }

  GetHLSUrlInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHLSUrlInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHLSUrlInRequest& from);
  void MergeFrom(const GetHLSUrlInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHLSUrlInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetHLSUrlInRequest";
  }
  protected:
  explicit GetHLSUrlInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIsTcpFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 isTcp = 3;
  void clear_istcp();
  ::PROTOBUF_NAMESPACE_ID::int32 istcp() const;
  void set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istcp() const;
  void _internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetHLSUrlInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 istcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetHLSUrlInReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetHLSUrlInReply) */ {
 public:
  inline GetHLSUrlInReply() : GetHLSUrlInReply(nullptr) {};
  virtual ~GetHLSUrlInReply();

  GetHLSUrlInReply(const GetHLSUrlInReply& from);
  GetHLSUrlInReply(GetHLSUrlInReply&& from) noexcept
    : GetHLSUrlInReply() {
    *this = ::std::move(from);
  }

  inline GetHLSUrlInReply& operator=(const GetHLSUrlInReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetHLSUrlInReply& operator=(GetHLSUrlInReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetHLSUrlInReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetHLSUrlInReply* internal_default_instance() {
    return reinterpret_cast<const GetHLSUrlInReply*>(
               &_GetHLSUrlInReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(GetHLSUrlInReply& a, GetHLSUrlInReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetHLSUrlInReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetHLSUrlInReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetHLSUrlInReply* New() const final {
    return CreateMaybeMessage<GetHLSUrlInReply>(nullptr);
  }

  GetHLSUrlInReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetHLSUrlInReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetHLSUrlInReply& from);
  void MergeFrom(const GetHLSUrlInReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetHLSUrlInReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetHLSUrlInReply";
  }
  protected:
  explicit GetHLSUrlInReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetHLSUrlInReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopVideoByIdRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopVideoByIdRequest) */ {
 public:
  inline StopVideoByIdRequest() : StopVideoByIdRequest(nullptr) {};
  virtual ~StopVideoByIdRequest();

  StopVideoByIdRequest(const StopVideoByIdRequest& from);
  StopVideoByIdRequest(StopVideoByIdRequest&& from) noexcept
    : StopVideoByIdRequest() {
    *this = ::std::move(from);
  }

  inline StopVideoByIdRequest& operator=(const StopVideoByIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoByIdRequest& operator=(StopVideoByIdRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVideoByIdRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVideoByIdRequest* internal_default_instance() {
    return reinterpret_cast<const StopVideoByIdRequest*>(
               &_StopVideoByIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(StopVideoByIdRequest& a, StopVideoByIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoByIdRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoByIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVideoByIdRequest* New() const final {
    return CreateMaybeMessage<StopVideoByIdRequest>(nullptr);
  }

  StopVideoByIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVideoByIdRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVideoByIdRequest& from);
  void MergeFrom(const StopVideoByIdRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoByIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopVideoByIdRequest";
  }
  protected:
  explicit StopVideoByIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIsTcpFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 isTcp = 3;
  void clear_istcp();
  ::PROTOBUF_NAMESPACE_ID::int32 istcp() const;
  void set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istcp() const;
  void _internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopVideoByIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 istcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopVideoByIdReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopVideoByIdReply) */ {
 public:
  inline StopVideoByIdReply() : StopVideoByIdReply(nullptr) {};
  virtual ~StopVideoByIdReply();

  StopVideoByIdReply(const StopVideoByIdReply& from);
  StopVideoByIdReply(StopVideoByIdReply&& from) noexcept
    : StopVideoByIdReply() {
    *this = ::std::move(from);
  }

  inline StopVideoByIdReply& operator=(const StopVideoByIdReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoByIdReply& operator=(StopVideoByIdReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVideoByIdReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVideoByIdReply* internal_default_instance() {
    return reinterpret_cast<const StopVideoByIdReply*>(
               &_StopVideoByIdReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(StopVideoByIdReply& a, StopVideoByIdReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoByIdReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoByIdReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVideoByIdReply* New() const final {
    return CreateMaybeMessage<StopVideoByIdReply>(nullptr);
  }

  StopVideoByIdReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVideoByIdReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVideoByIdReply& from);
  void MergeFrom(const StopVideoByIdReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoByIdReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopVideoByIdReply";
  }
  protected:
  explicit StopVideoByIdReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopVideoByIdReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopVideoBySsrcRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopVideoBySsrcRequest) */ {
 public:
  inline StopVideoBySsrcRequest() : StopVideoBySsrcRequest(nullptr) {};
  virtual ~StopVideoBySsrcRequest();

  StopVideoBySsrcRequest(const StopVideoBySsrcRequest& from);
  StopVideoBySsrcRequest(StopVideoBySsrcRequest&& from) noexcept
    : StopVideoBySsrcRequest() {
    *this = ::std::move(from);
  }

  inline StopVideoBySsrcRequest& operator=(const StopVideoBySsrcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoBySsrcRequest& operator=(StopVideoBySsrcRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVideoBySsrcRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVideoBySsrcRequest* internal_default_instance() {
    return reinterpret_cast<const StopVideoBySsrcRequest*>(
               &_StopVideoBySsrcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(StopVideoBySsrcRequest& a, StopVideoBySsrcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoBySsrcRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoBySsrcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVideoBySsrcRequest* New() const final {
    return CreateMaybeMessage<StopVideoBySsrcRequest>(nullptr);
  }

  StopVideoBySsrcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVideoBySsrcRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVideoBySsrcRequest& from);
  void MergeFrom(const StopVideoBySsrcRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoBySsrcRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopVideoBySsrcRequest";
  }
  protected:
  explicit StopVideoBySsrcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSsrcFieldNumber = 1,
  };
  // string ssrc = 1;
  void clear_ssrc();
  const std::string& ssrc() const;
  void set_ssrc(const std::string& value);
  void set_ssrc(std::string&& value);
  void set_ssrc(const char* value);
  void set_ssrc(const char* value, size_t size);
  std::string* mutable_ssrc();
  std::string* release_ssrc();
  void set_allocated_ssrc(std::string* ssrc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ssrc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ssrc(
      std::string* ssrc);
  private:
  const std::string& _internal_ssrc() const;
  void _internal_set_ssrc(const std::string& value);
  std::string* _internal_mutable_ssrc();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopVideoBySsrcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssrc_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopVideoBySsrcReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopVideoBySsrcReply) */ {
 public:
  inline StopVideoBySsrcReply() : StopVideoBySsrcReply(nullptr) {};
  virtual ~StopVideoBySsrcReply();

  StopVideoBySsrcReply(const StopVideoBySsrcReply& from);
  StopVideoBySsrcReply(StopVideoBySsrcReply&& from) noexcept
    : StopVideoBySsrcReply() {
    *this = ::std::move(from);
  }

  inline StopVideoBySsrcReply& operator=(const StopVideoBySsrcReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoBySsrcReply& operator=(StopVideoBySsrcReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopVideoBySsrcReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopVideoBySsrcReply* internal_default_instance() {
    return reinterpret_cast<const StopVideoBySsrcReply*>(
               &_StopVideoBySsrcReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(StopVideoBySsrcReply& a, StopVideoBySsrcReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoBySsrcReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoBySsrcReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopVideoBySsrcReply* New() const final {
    return CreateMaybeMessage<StopVideoBySsrcReply>(nullptr);
  }

  StopVideoBySsrcReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopVideoBySsrcReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopVideoBySsrcReply& from);
  void MergeFrom(const StopVideoBySsrcReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopVideoBySsrcReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopVideoBySsrcReply";
  }
  protected:
  explicit StopVideoBySsrcReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopVideoBySsrcReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PlayBackUrlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PlayBackUrlRequest) */ {
 public:
  inline PlayBackUrlRequest() : PlayBackUrlRequest(nullptr) {};
  virtual ~PlayBackUrlRequest();

  PlayBackUrlRequest(const PlayBackUrlRequest& from);
  PlayBackUrlRequest(PlayBackUrlRequest&& from) noexcept
    : PlayBackUrlRequest() {
    *this = ::std::move(from);
  }

  inline PlayBackUrlRequest& operator=(const PlayBackUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayBackUrlRequest& operator=(PlayBackUrlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayBackUrlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayBackUrlRequest* internal_default_instance() {
    return reinterpret_cast<const PlayBackUrlRequest*>(
               &_PlayBackUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(PlayBackUrlRequest& a, PlayBackUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayBackUrlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayBackUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayBackUrlRequest* New() const final {
    return CreateMaybeMessage<PlayBackUrlRequest>(nullptr);
  }

  PlayBackUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayBackUrlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayBackUrlRequest& from);
  void MergeFrom(const PlayBackUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayBackUrlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PlayBackUrlRequest";
  }
  protected:
  explicit PlayBackUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kIsTcpFieldNumber = 5,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // string startTime = 3;
  void clear_starttime();
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_starttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_starttime(
      std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // string endTime = 4;
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endtime(
      std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // int32 isTcp = 5;
  void clear_istcp();
  ::PROTOBUF_NAMESPACE_ID::int32 istcp() const;
  void set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_istcp() const;
  void _internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PlayBackUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  ::PROTOBUF_NAMESPACE_ID::int32 istcp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PlayBackUrlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PlayBackUrlReply) */ {
 public:
  inline PlayBackUrlReply() : PlayBackUrlReply(nullptr) {};
  virtual ~PlayBackUrlReply();

  PlayBackUrlReply(const PlayBackUrlReply& from);
  PlayBackUrlReply(PlayBackUrlReply&& from) noexcept
    : PlayBackUrlReply() {
    *this = ::std::move(from);
  }

  inline PlayBackUrlReply& operator=(const PlayBackUrlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayBackUrlReply& operator=(PlayBackUrlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayBackUrlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayBackUrlReply* internal_default_instance() {
    return reinterpret_cast<const PlayBackUrlReply*>(
               &_PlayBackUrlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(PlayBackUrlReply& a, PlayBackUrlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayBackUrlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayBackUrlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayBackUrlReply* New() const final {
    return CreateMaybeMessage<PlayBackUrlReply>(nullptr);
  }

  PlayBackUrlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayBackUrlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayBackUrlReply& from);
  void MergeFrom(const PlayBackUrlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayBackUrlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PlayBackUrlReply";
  }
  protected:
  explicit PlayBackUrlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRtspUrlFieldNumber = 2,
    kRtmpUrlFieldNumber = 3,
    kMsgFieldNumber = 4,
    kTokenFieldNumber = 5,
    kCodeFieldNumber = 1,
  };
  // string rtspUrl = 2;
  void clear_rtspurl();
  const std::string& rtspurl() const;
  void set_rtspurl(const std::string& value);
  void set_rtspurl(std::string&& value);
  void set_rtspurl(const char* value);
  void set_rtspurl(const char* value, size_t size);
  std::string* mutable_rtspurl();
  std::string* release_rtspurl();
  void set_allocated_rtspurl(std::string* rtspurl);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rtspurl();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rtspurl(
      std::string* rtspurl);
  private:
  const std::string& _internal_rtspurl() const;
  void _internal_set_rtspurl(const std::string& value);
  std::string* _internal_mutable_rtspurl();
  public:

  // string rtmpUrl = 3;
  void clear_rtmpurl();
  const std::string& rtmpurl() const;
  void set_rtmpurl(const std::string& value);
  void set_rtmpurl(std::string&& value);
  void set_rtmpurl(const char* value);
  void set_rtmpurl(const char* value, size_t size);
  std::string* mutable_rtmpurl();
  std::string* release_rtmpurl();
  void set_allocated_rtmpurl(std::string* rtmpurl);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_rtmpurl();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_rtmpurl(
      std::string* rtmpurl);
  private:
  const std::string& _internal_rtmpurl() const;
  void _internal_set_rtmpurl(const std::string& value);
  std::string* _internal_mutable_rtmpurl();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string token = 5;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PlayBackUrlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtspurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rtmpurl_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PresetGoRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PresetGoRequest) */ {
 public:
  inline PresetGoRequest() : PresetGoRequest(nullptr) {};
  virtual ~PresetGoRequest();

  PresetGoRequest(const PresetGoRequest& from);
  PresetGoRequest(PresetGoRequest&& from) noexcept
    : PresetGoRequest() {
    *this = ::std::move(from);
  }

  inline PresetGoRequest& operator=(const PresetGoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresetGoRequest& operator=(PresetGoRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresetGoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PresetGoRequest* internal_default_instance() {
    return reinterpret_cast<const PresetGoRequest*>(
               &_PresetGoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(PresetGoRequest& a, PresetGoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PresetGoRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresetGoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresetGoRequest* New() const final {
    return CreateMaybeMessage<PresetGoRequest>(nullptr);
  }

  PresetGoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresetGoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresetGoRequest& from);
  void MergeFrom(const PresetGoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresetGoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PresetGoRequest";
  }
  protected:
  explicit PresetGoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kPresetIdFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 presetId = 3;
  void clear_presetid();
  ::PROTOBUF_NAMESPACE_ID::int32 presetid() const;
  void set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_presetid() const;
  void _internal_set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PresetGoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 presetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PresetSetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PresetSetRequest) */ {
 public:
  inline PresetSetRequest() : PresetSetRequest(nullptr) {};
  virtual ~PresetSetRequest();

  PresetSetRequest(const PresetSetRequest& from);
  PresetSetRequest(PresetSetRequest&& from) noexcept
    : PresetSetRequest() {
    *this = ::std::move(from);
  }

  inline PresetSetRequest& operator=(const PresetSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresetSetRequest& operator=(PresetSetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresetSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PresetSetRequest* internal_default_instance() {
    return reinterpret_cast<const PresetSetRequest*>(
               &_PresetSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(PresetSetRequest& a, PresetSetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PresetSetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresetSetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresetSetRequest* New() const final {
    return CreateMaybeMessage<PresetSetRequest>(nullptr);
  }

  PresetSetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresetSetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresetSetRequest& from);
  void MergeFrom(const PresetSetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresetSetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PresetSetRequest";
  }
  protected:
  explicit PresetSetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kPresetIdFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 presetId = 3;
  void clear_presetid();
  ::PROTOBUF_NAMESPACE_ID::int32 presetid() const;
  void set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_presetid() const;
  void _internal_set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PresetSetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 presetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PresetDelRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PresetDelRequest) */ {
 public:
  inline PresetDelRequest() : PresetDelRequest(nullptr) {};
  virtual ~PresetDelRequest();

  PresetDelRequest(const PresetDelRequest& from);
  PresetDelRequest(PresetDelRequest&& from) noexcept
    : PresetDelRequest() {
    *this = ::std::move(from);
  }

  inline PresetDelRequest& operator=(const PresetDelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresetDelRequest& operator=(PresetDelRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresetDelRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PresetDelRequest* internal_default_instance() {
    return reinterpret_cast<const PresetDelRequest*>(
               &_PresetDelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PresetDelRequest& a, PresetDelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PresetDelRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresetDelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresetDelRequest* New() const final {
    return CreateMaybeMessage<PresetDelRequest>(nullptr);
  }

  PresetDelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresetDelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresetDelRequest& from);
  void MergeFrom(const PresetDelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresetDelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PresetDelRequest";
  }
  protected:
  explicit PresetDelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kPresetIdFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // int32 presetId = 3;
  void clear_presetid();
  ::PROTOBUF_NAMESPACE_ID::int32 presetid() const;
  void set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_presetid() const;
  void _internal_set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PresetDelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::int32 presetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PresetQueryRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PresetQueryRequest) */ {
 public:
  inline PresetQueryRequest() : PresetQueryRequest(nullptr) {};
  virtual ~PresetQueryRequest();

  PresetQueryRequest(const PresetQueryRequest& from);
  PresetQueryRequest(PresetQueryRequest&& from) noexcept
    : PresetQueryRequest() {
    *this = ::std::move(from);
  }

  inline PresetQueryRequest& operator=(const PresetQueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresetQueryRequest& operator=(PresetQueryRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresetQueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PresetQueryRequest* internal_default_instance() {
    return reinterpret_cast<const PresetQueryRequest*>(
               &_PresetQueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(PresetQueryRequest& a, PresetQueryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PresetQueryRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresetQueryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresetQueryRequest* New() const final {
    return CreateMaybeMessage<PresetQueryRequest>(nullptr);
  }

  PresetQueryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresetQueryRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresetQueryRequest& from);
  void MergeFrom(const PresetQueryRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresetQueryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PresetQueryRequest";
  }
  protected:
  explicit PresetQueryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PresetQueryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PresetQueryReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PresetQueryReply) */ {
 public:
  inline PresetQueryReply() : PresetQueryReply(nullptr) {};
  virtual ~PresetQueryReply();

  PresetQueryReply(const PresetQueryReply& from);
  PresetQueryReply(PresetQueryReply&& from) noexcept
    : PresetQueryReply() {
    *this = ::std::move(from);
  }

  inline PresetQueryReply& operator=(const PresetQueryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresetQueryReply& operator=(PresetQueryReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresetQueryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PresetQueryReply* internal_default_instance() {
    return reinterpret_cast<const PresetQueryReply*>(
               &_PresetQueryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(PresetQueryReply& a, PresetQueryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PresetQueryReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresetQueryReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresetQueryReply* New() const final {
    return CreateMaybeMessage<PresetQueryReply>(nullptr);
  }

  PresetQueryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresetQueryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresetQueryReply& from);
  void MergeFrom(const PresetQueryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresetQueryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PresetQueryReply";
  }
  protected:
  explicit PresetQueryReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kSnFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int32 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PresetQueryReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetPresetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetPresetRequest) */ {
 public:
  inline GetPresetRequest() : GetPresetRequest(nullptr) {};
  virtual ~GetPresetRequest();

  GetPresetRequest(const GetPresetRequest& from);
  GetPresetRequest(GetPresetRequest&& from) noexcept
    : GetPresetRequest() {
    *this = ::std::move(from);
  }

  inline GetPresetRequest& operator=(const GetPresetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPresetRequest& operator=(GetPresetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPresetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPresetRequest* internal_default_instance() {
    return reinterpret_cast<const GetPresetRequest*>(
               &_GetPresetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(GetPresetRequest& a, GetPresetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPresetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPresetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPresetRequest* New() const final {
    return CreateMaybeMessage<GetPresetRequest>(nullptr);
  }

  GetPresetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPresetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPresetRequest& from);
  void MergeFrom(const GetPresetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPresetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetPresetRequest";
  }
  protected:
  explicit GetPresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
  };
  // int32 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int32 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetPresetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PresetInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PresetInfo) */ {
 public:
  inline PresetInfo() : PresetInfo(nullptr) {};
  virtual ~PresetInfo();

  PresetInfo(const PresetInfo& from);
  PresetInfo(PresetInfo&& from) noexcept
    : PresetInfo() {
    *this = ::std::move(from);
  }

  inline PresetInfo& operator=(const PresetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PresetInfo& operator=(PresetInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PresetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PresetInfo* internal_default_instance() {
    return reinterpret_cast<const PresetInfo*>(
               &_PresetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(PresetInfo& a, PresetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PresetInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PresetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PresetInfo* New() const final {
    return CreateMaybeMessage<PresetInfo>(nullptr);
  }

  PresetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PresetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PresetInfo& from);
  void MergeFrom(const PresetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PresetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PresetInfo";
  }
  protected:
  explicit PresetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetNameFieldNumber = 2,
    kPresetIdFieldNumber = 1,
  };
  // string presetName = 2;
  void clear_presetname();
  const std::string& presetname() const;
  void set_presetname(const std::string& value);
  void set_presetname(std::string&& value);
  void set_presetname(const char* value);
  void set_presetname(const char* value, size_t size);
  std::string* mutable_presetname();
  std::string* release_presetname();
  void set_allocated_presetname(std::string* presetname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_presetname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_presetname(
      std::string* presetname);
  private:
  const std::string& _internal_presetname() const;
  void _internal_set_presetname(const std::string& value);
  std::string* _internal_mutable_presetname();
  public:

  // int32 presetId = 1;
  void clear_presetid();
  ::PROTOBUF_NAMESPACE_ID::int32 presetid() const;
  void set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_presetid() const;
  void _internal_set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PresetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr presetname_;
  ::PROTOBUF_NAMESPACE_ID::int32 presetid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetPresetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetPresetReply) */ {
 public:
  inline GetPresetReply() : GetPresetReply(nullptr) {};
  virtual ~GetPresetReply();

  GetPresetReply(const GetPresetReply& from);
  GetPresetReply(GetPresetReply&& from) noexcept
    : GetPresetReply() {
    *this = ::std::move(from);
  }

  inline GetPresetReply& operator=(const GetPresetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPresetReply& operator=(GetPresetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetPresetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPresetReply* internal_default_instance() {
    return reinterpret_cast<const GetPresetReply*>(
               &_GetPresetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetPresetReply& a, GetPresetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPresetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPresetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetPresetReply* New() const final {
    return CreateMaybeMessage<GetPresetReply>(nullptr);
  }

  GetPresetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetPresetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetPresetReply& from);
  void MergeFrom(const GetPresetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPresetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetPresetReply";
  }
  protected:
  explicit GetPresetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated .GB28181.PresetInfo presetList = 1;
  int presetlist_size() const;
  private:
  int _internal_presetlist_size() const;
  public:
  void clear_presetlist();
  ::GB28181::PresetInfo* mutable_presetlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::PresetInfo >*
      mutable_presetlist();
  private:
  const ::GB28181::PresetInfo& _internal_presetlist(int index) const;
  ::GB28181::PresetInfo* _internal_add_presetlist();
  public:
  const ::GB28181::PresetInfo& presetlist(int index) const;
  ::GB28181::PresetInfo* add_presetlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::PresetInfo >&
      presetlist() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetPresetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::PresetInfo > presetlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class QueryRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.QueryRecordRequest) */ {
 public:
  inline QueryRecordRequest() : QueryRecordRequest(nullptr) {};
  virtual ~QueryRecordRequest();

  QueryRecordRequest(const QueryRecordRequest& from);
  QueryRecordRequest(QueryRecordRequest&& from) noexcept
    : QueryRecordRequest() {
    *this = ::std::move(from);
  }

  inline QueryRecordRequest& operator=(const QueryRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRecordRequest& operator=(QueryRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRecordRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRecordRequest*>(
               &_QueryRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(QueryRecordRequest& a, QueryRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordRequest* New() const final {
    return CreateMaybeMessage<QueryRecordRequest>(nullptr);
  }

  QueryRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRecordRequest& from);
  void MergeFrom(const QueryRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.QueryRecordRequest";
  }
  protected:
  explicit QueryRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // string startTime = 3;
  void clear_starttime();
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_starttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_starttime(
      std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // string endTime = 4;
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endtime(
      std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.QueryRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class QueryRecordReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.QueryRecordReply) */ {
 public:
  inline QueryRecordReply() : QueryRecordReply(nullptr) {};
  virtual ~QueryRecordReply();

  QueryRecordReply(const QueryRecordReply& from);
  QueryRecordReply(QueryRecordReply&& from) noexcept
    : QueryRecordReply() {
    *this = ::std::move(from);
  }

  inline QueryRecordReply& operator=(const QueryRecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRecordReply& operator=(QueryRecordReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRecordReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRecordReply* internal_default_instance() {
    return reinterpret_cast<const QueryRecordReply*>(
               &_QueryRecordReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(QueryRecordReply& a, QueryRecordReply& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRecordReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryRecordReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRecordReply* New() const final {
    return CreateMaybeMessage<QueryRecordReply>(nullptr);
  }

  QueryRecordReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRecordReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRecordReply& from);
  void MergeFrom(const QueryRecordReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRecordReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.QueryRecordReply";
  }
  protected:
  explicit QueryRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kSnFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int32 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.QueryRecordReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 sn_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetRecordRequest) */ {
 public:
  inline GetRecordRequest() : GetRecordRequest(nullptr) {};
  virtual ~GetRecordRequest();

  GetRecordRequest(const GetRecordRequest& from);
  GetRecordRequest(GetRecordRequest&& from) noexcept
    : GetRecordRequest() {
    *this = ::std::move(from);
  }

  inline GetRecordRequest& operator=(const GetRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordRequest& operator=(GetRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecordRequest* internal_default_instance() {
    return reinterpret_cast<const GetRecordRequest*>(
               &_GetRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetRecordRequest& a, GetRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRecordRequest* New() const final {
    return CreateMaybeMessage<GetRecordRequest>(nullptr);
  }

  GetRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecordRequest& from);
  void MergeFrom(const GetRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetRecordRequest";
  }
  protected:
  explicit GetRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSnFieldNumber = 1,
  };
  // int32 sn = 1;
  void clear_sn();
  ::PROTOBUF_NAMESPACE_ID::int32 sn() const;
  void set_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sn() const;
  void _internal_set_sn(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 sn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class RecordInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.RecordInfo) */ {
 public:
  inline RecordInfo() : RecordInfo(nullptr) {};
  virtual ~RecordInfo();

  RecordInfo(const RecordInfo& from);
  RecordInfo(RecordInfo&& from) noexcept
    : RecordInfo() {
    *this = ::std::move(from);
  }

  inline RecordInfo& operator=(const RecordInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordInfo& operator=(RecordInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordInfo* internal_default_instance() {
    return reinterpret_cast<const RecordInfo*>(
               &_RecordInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(RecordInfo& a, RecordInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordInfo* New() const final {
    return CreateMaybeMessage<RecordInfo>(nullptr);
  }

  RecordInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordInfo& from);
  void MergeFrom(const RecordInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.RecordInfo";
  }
  protected:
  explicit RecordInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kStartTimeFieldNumber = 2,
    kEndTimeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string startTime = 2;
  void clear_starttime();
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_starttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_starttime(
      std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // string endTime = 3;
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endtime(
      std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.RecordInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetRecordReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetRecordReply) */ {
 public:
  inline GetRecordReply() : GetRecordReply(nullptr) {};
  virtual ~GetRecordReply();

  GetRecordReply(const GetRecordReply& from);
  GetRecordReply(GetRecordReply&& from) noexcept
    : GetRecordReply() {
    *this = ::std::move(from);
  }

  inline GetRecordReply& operator=(const GetRecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRecordReply& operator=(GetRecordReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetRecordReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetRecordReply* internal_default_instance() {
    return reinterpret_cast<const GetRecordReply*>(
               &_GetRecordReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(GetRecordReply& a, GetRecordReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRecordReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRecordReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRecordReply* New() const final {
    return CreateMaybeMessage<GetRecordReply>(nullptr);
  }

  GetRecordReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRecordReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetRecordReply& from);
  void MergeFrom(const GetRecordReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRecordReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetRecordReply";
  }
  protected:
  explicit GetRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated .GB28181.RecordInfo recordList = 1;
  int recordlist_size() const;
  private:
  int _internal_recordlist_size() const;
  public:
  void clear_recordlist();
  ::GB28181::RecordInfo* mutable_recordlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::RecordInfo >*
      mutable_recordlist();
  private:
  const ::GB28181::RecordInfo& _internal_recordlist(int index) const;
  ::GB28181::RecordInfo* _internal_add_recordlist();
  public:
  const ::GB28181::RecordInfo& recordlist(int index) const;
  ::GB28181::RecordInfo* add_recordlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::RecordInfo >&
      recordlist() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetRecordReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::RecordInfo > recordlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PlayFastRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PlayFastRequest) */ {
 public:
  inline PlayFastRequest() : PlayFastRequest(nullptr) {};
  virtual ~PlayFastRequest();

  PlayFastRequest(const PlayFastRequest& from);
  PlayFastRequest(PlayFastRequest&& from) noexcept
    : PlayFastRequest() {
    *this = ::std::move(from);
  }

  inline PlayFastRequest& operator=(const PlayFastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayFastRequest& operator=(PlayFastRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayFastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayFastRequest* internal_default_instance() {
    return reinterpret_cast<const PlayFastRequest*>(
               &_PlayFastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PlayFastRequest& a, PlayFastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayFastRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayFastRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayFastRequest* New() const final {
    return CreateMaybeMessage<PlayFastRequest>(nullptr);
  }

  PlayFastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayFastRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayFastRequest& from);
  void MergeFrom(const PlayFastRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayFastRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PlayFastRequest";
  }
  protected:
  explicit PlayFastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PlayFastRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PlayFastReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PlayFastReply) */ {
 public:
  inline PlayFastReply() : PlayFastReply(nullptr) {};
  virtual ~PlayFastReply();

  PlayFastReply(const PlayFastReply& from);
  PlayFastReply(PlayFastReply&& from) noexcept
    : PlayFastReply() {
    *this = ::std::move(from);
  }

  inline PlayFastReply& operator=(const PlayFastReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayFastReply& operator=(PlayFastReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayFastReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayFastReply* internal_default_instance() {
    return reinterpret_cast<const PlayFastReply*>(
               &_PlayFastReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(PlayFastReply& a, PlayFastReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayFastReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayFastReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayFastReply* New() const final {
    return CreateMaybeMessage<PlayFastReply>(nullptr);
  }

  PlayFastReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayFastReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayFastReply& from);
  void MergeFrom(const PlayFastReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayFastReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PlayFastReply";
  }
  protected:
  explicit PlayFastReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kScaleFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // float scale = 1;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PlayFastReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PlaySlowRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PlaySlowRequest) */ {
 public:
  inline PlaySlowRequest() : PlaySlowRequest(nullptr) {};
  virtual ~PlaySlowRequest();

  PlaySlowRequest(const PlaySlowRequest& from);
  PlaySlowRequest(PlaySlowRequest&& from) noexcept
    : PlaySlowRequest() {
    *this = ::std::move(from);
  }

  inline PlaySlowRequest& operator=(const PlaySlowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaySlowRequest& operator=(PlaySlowRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaySlowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaySlowRequest* internal_default_instance() {
    return reinterpret_cast<const PlaySlowRequest*>(
               &_PlaySlowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(PlaySlowRequest& a, PlaySlowRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaySlowRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaySlowRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaySlowRequest* New() const final {
    return CreateMaybeMessage<PlaySlowRequest>(nullptr);
  }

  PlaySlowRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaySlowRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaySlowRequest& from);
  void MergeFrom(const PlaySlowRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaySlowRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PlaySlowRequest";
  }
  protected:
  explicit PlaySlowRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PlaySlowRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PlaySlowReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PlaySlowReply) */ {
 public:
  inline PlaySlowReply() : PlaySlowReply(nullptr) {};
  virtual ~PlaySlowReply();

  PlaySlowReply(const PlaySlowReply& from);
  PlaySlowReply(PlaySlowReply&& from) noexcept
    : PlaySlowReply() {
    *this = ::std::move(from);
  }

  inline PlaySlowReply& operator=(const PlaySlowReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaySlowReply& operator=(PlaySlowReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaySlowReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaySlowReply* internal_default_instance() {
    return reinterpret_cast<const PlaySlowReply*>(
               &_PlaySlowReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(PlaySlowReply& a, PlaySlowReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaySlowReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaySlowReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaySlowReply* New() const final {
    return CreateMaybeMessage<PlaySlowReply>(nullptr);
  }

  PlaySlowReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaySlowReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaySlowReply& from);
  void MergeFrom(const PlaySlowReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaySlowReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PlaySlowReply";
  }
  protected:
  explicit PlaySlowReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kScaleFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // float scale = 1;
  void clear_scale();
  float scale() const;
  void set_scale(float value);
  private:
  float _internal_scale() const;
  void _internal_set_scale(float value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PlaySlowReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  float scale_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PauseRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PauseRequest) */ {
 public:
  inline PauseRequest() : PauseRequest(nullptr) {};
  virtual ~PauseRequest();

  PauseRequest(const PauseRequest& from);
  PauseRequest(PauseRequest&& from) noexcept
    : PauseRequest() {
    *this = ::std::move(from);
  }

  inline PauseRequest& operator=(const PauseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseRequest& operator=(PauseRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseRequest* internal_default_instance() {
    return reinterpret_cast<const PauseRequest*>(
               &_PauseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(PauseRequest& a, PauseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseRequest* New() const final {
    return CreateMaybeMessage<PauseRequest>(nullptr);
  }

  PauseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseRequest& from);
  void MergeFrom(const PauseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PauseRequest";
  }
  protected:
  explicit PauseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PauseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PauseReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PauseReply) */ {
 public:
  inline PauseReply() : PauseReply(nullptr) {};
  virtual ~PauseReply();

  PauseReply(const PauseReply& from);
  PauseReply(PauseReply&& from) noexcept
    : PauseReply() {
    *this = ::std::move(from);
  }

  inline PauseReply& operator=(const PauseReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PauseReply& operator=(PauseReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PauseReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PauseReply* internal_default_instance() {
    return reinterpret_cast<const PauseReply*>(
               &_PauseReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(PauseReply& a, PauseReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PauseReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PauseReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PauseReply* New() const final {
    return CreateMaybeMessage<PauseReply>(nullptr);
  }

  PauseReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PauseReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PauseReply& from);
  void MergeFrom(const PauseReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PauseReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PauseReply";
  }
  protected:
  explicit PauseReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PauseReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PlayRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PlayRequest) */ {
 public:
  inline PlayRequest() : PlayRequest(nullptr) {};
  virtual ~PlayRequest();

  PlayRequest(const PlayRequest& from);
  PlayRequest(PlayRequest&& from) noexcept
    : PlayRequest() {
    *this = ::std::move(from);
  }

  inline PlayRequest& operator=(const PlayRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayRequest& operator=(PlayRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayRequest* internal_default_instance() {
    return reinterpret_cast<const PlayRequest*>(
               &_PlayRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(PlayRequest& a, PlayRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayRequest* New() const final {
    return CreateMaybeMessage<PlayRequest>(nullptr);
  }

  PlayRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayRequest& from);
  void MergeFrom(const PlayRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PlayRequest";
  }
  protected:
  explicit PlayRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PlayRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class PlayReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.PlayReply) */ {
 public:
  inline PlayReply() : PlayReply(nullptr) {};
  virtual ~PlayReply();

  PlayReply(const PlayReply& from);
  PlayReply(PlayReply&& from) noexcept
    : PlayReply() {
    *this = ::std::move(from);
  }

  inline PlayReply& operator=(const PlayReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayReply& operator=(PlayReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlayReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayReply* internal_default_instance() {
    return reinterpret_cast<const PlayReply*>(
               &_PlayReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(PlayReply& a, PlayReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayReply* New() const final {
    return CreateMaybeMessage<PlayReply>(nullptr);
  }

  PlayReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayReply& from);
  void MergeFrom(const PlayReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.PlayReply";
  }
  protected:
  explicit PlayReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.PlayReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class SeekRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.SeekRequest) */ {
 public:
  inline SeekRequest() : SeekRequest(nullptr) {};
  virtual ~SeekRequest();

  SeekRequest(const SeekRequest& from);
  SeekRequest(SeekRequest&& from) noexcept
    : SeekRequest() {
    *this = ::std::move(from);
  }

  inline SeekRequest& operator=(const SeekRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekRequest& operator=(SeekRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeekRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeekRequest* internal_default_instance() {
    return reinterpret_cast<const SeekRequest*>(
               &_SeekRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SeekRequest& a, SeekRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeekRequest* New() const final {
    return CreateMaybeMessage<SeekRequest>(nullptr);
  }

  SeekRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeekRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeekRequest& from);
  void MergeFrom(const SeekRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.SeekRequest";
  }
  protected:
  explicit SeekRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTimeFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 time = 2;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.SeekRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class SeekReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.SeekReply) */ {
 public:
  inline SeekReply() : SeekReply(nullptr) {};
  virtual ~SeekReply();

  SeekReply(const SeekReply& from);
  SeekReply(SeekReply&& from) noexcept
    : SeekReply() {
    *this = ::std::move(from);
  }

  inline SeekReply& operator=(const SeekReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SeekReply& operator=(SeekReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SeekReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeekReply* internal_default_instance() {
    return reinterpret_cast<const SeekReply*>(
               &_SeekReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SeekReply& a, SeekReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SeekReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SeekReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SeekReply* New() const final {
    return CreateMaybeMessage<SeekReply>(nullptr);
  }

  SeekReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SeekReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SeekReply& from);
  void MergeFrom(const SeekReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SeekReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.SeekReply";
  }
  protected:
  explicit SeekReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.SeekReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GoForwardRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GoForwardRequest) */ {
 public:
  inline GoForwardRequest() : GoForwardRequest(nullptr) {};
  virtual ~GoForwardRequest();

  GoForwardRequest(const GoForwardRequest& from);
  GoForwardRequest(GoForwardRequest&& from) noexcept
    : GoForwardRequest() {
    *this = ::std::move(from);
  }

  inline GoForwardRequest& operator=(const GoForwardRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoForwardRequest& operator=(GoForwardRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoForwardRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoForwardRequest* internal_default_instance() {
    return reinterpret_cast<const GoForwardRequest*>(
               &_GoForwardRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(GoForwardRequest& a, GoForwardRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GoForwardRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoForwardRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoForwardRequest* New() const final {
    return CreateMaybeMessage<GoForwardRequest>(nullptr);
  }

  GoForwardRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoForwardRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoForwardRequest& from);
  void MergeFrom(const GoForwardRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoForwardRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GoForwardRequest";
  }
  protected:
  explicit GoForwardRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kNowTimeFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 nowTime = 2;
  void clear_nowtime();
  ::PROTOBUF_NAMESPACE_ID::int32 nowtime() const;
  void set_nowtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nowtime() const;
  void _internal_set_nowtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GoForwardRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 nowtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GoForwardReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GoForwardReply) */ {
 public:
  inline GoForwardReply() : GoForwardReply(nullptr) {};
  virtual ~GoForwardReply();

  GoForwardReply(const GoForwardReply& from);
  GoForwardReply(GoForwardReply&& from) noexcept
    : GoForwardReply() {
    *this = ::std::move(from);
  }

  inline GoForwardReply& operator=(const GoForwardReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoForwardReply& operator=(GoForwardReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoForwardReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoForwardReply* internal_default_instance() {
    return reinterpret_cast<const GoForwardReply*>(
               &_GoForwardReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(GoForwardReply& a, GoForwardReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GoForwardReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoForwardReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoForwardReply* New() const final {
    return CreateMaybeMessage<GoForwardReply>(nullptr);
  }

  GoForwardReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoForwardReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoForwardReply& from);
  void MergeFrom(const GoForwardReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoForwardReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GoForwardReply";
  }
  protected:
  explicit GoForwardReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GoForwardReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GoBackRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GoBackRequest) */ {
 public:
  inline GoBackRequest() : GoBackRequest(nullptr) {};
  virtual ~GoBackRequest();

  GoBackRequest(const GoBackRequest& from);
  GoBackRequest(GoBackRequest&& from) noexcept
    : GoBackRequest() {
    *this = ::std::move(from);
  }

  inline GoBackRequest& operator=(const GoBackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoBackRequest& operator=(GoBackRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoBackRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoBackRequest* internal_default_instance() {
    return reinterpret_cast<const GoBackRequest*>(
               &_GoBackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(GoBackRequest& a, GoBackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GoBackRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoBackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoBackRequest* New() const final {
    return CreateMaybeMessage<GoBackRequest>(nullptr);
  }

  GoBackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoBackRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoBackRequest& from);
  void MergeFrom(const GoBackRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoBackRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GoBackRequest";
  }
  protected:
  explicit GoBackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kNowTimeFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 nowTime = 2;
  void clear_nowtime();
  ::PROTOBUF_NAMESPACE_ID::int32 nowtime() const;
  void set_nowtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nowtime() const;
  void _internal_set_nowtime(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GoBackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::int32 nowtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GoBackReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GoBackReply) */ {
 public:
  inline GoBackReply() : GoBackReply(nullptr) {};
  virtual ~GoBackReply();

  GoBackReply(const GoBackReply& from);
  GoBackReply(GoBackReply&& from) noexcept
    : GoBackReply() {
    *this = ::std::move(from);
  }

  inline GoBackReply& operator=(const GoBackReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoBackReply& operator=(GoBackReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoBackReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoBackReply* internal_default_instance() {
    return reinterpret_cast<const GoBackReply*>(
               &_GoBackReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(GoBackReply& a, GoBackReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GoBackReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoBackReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoBackReply* New() const final {
    return CreateMaybeMessage<GoBackReply>(nullptr);
  }

  GoBackReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoBackReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoBackReply& from);
  void MergeFrom(const GoBackReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoBackReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GoBackReply";
  }
  protected:
  explicit GoBackReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GoBackReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopPlayRecordRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopPlayRecordRequest) */ {
 public:
  inline StopPlayRecordRequest() : StopPlayRecordRequest(nullptr) {};
  virtual ~StopPlayRecordRequest();

  StopPlayRecordRequest(const StopPlayRecordRequest& from);
  StopPlayRecordRequest(StopPlayRecordRequest&& from) noexcept
    : StopPlayRecordRequest() {
    *this = ::std::move(from);
  }

  inline StopPlayRecordRequest& operator=(const StopPlayRecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPlayRecordRequest& operator=(StopPlayRecordRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPlayRecordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPlayRecordRequest* internal_default_instance() {
    return reinterpret_cast<const StopPlayRecordRequest*>(
               &_StopPlayRecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(StopPlayRecordRequest& a, StopPlayRecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPlayRecordRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPlayRecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPlayRecordRequest* New() const final {
    return CreateMaybeMessage<StopPlayRecordRequest>(nullptr);
  }

  StopPlayRecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPlayRecordRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPlayRecordRequest& from);
  void MergeFrom(const StopPlayRecordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPlayRecordRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopPlayRecordRequest";
  }
  protected:
  explicit StopPlayRecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopPlayRecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopPlayRecordReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopPlayRecordReply) */ {
 public:
  inline StopPlayRecordReply() : StopPlayRecordReply(nullptr) {};
  virtual ~StopPlayRecordReply();

  StopPlayRecordReply(const StopPlayRecordReply& from);
  StopPlayRecordReply(StopPlayRecordReply&& from) noexcept
    : StopPlayRecordReply() {
    *this = ::std::move(from);
  }

  inline StopPlayRecordReply& operator=(const StopPlayRecordReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopPlayRecordReply& operator=(StopPlayRecordReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopPlayRecordReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopPlayRecordReply* internal_default_instance() {
    return reinterpret_cast<const StopPlayRecordReply*>(
               &_StopPlayRecordReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(StopPlayRecordReply& a, StopPlayRecordReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StopPlayRecordReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopPlayRecordReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopPlayRecordReply* New() const final {
    return CreateMaybeMessage<StopPlayRecordReply>(nullptr);
  }

  StopPlayRecordReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopPlayRecordReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopPlayRecordReply& from);
  void MergeFrom(const StopPlayRecordReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopPlayRecordReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopPlayRecordReply";
  }
  protected:
  explicit StopPlayRecordReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopPlayRecordReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class RecordDownloadRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.RecordDownloadRequest) */ {
 public:
  inline RecordDownloadRequest() : RecordDownloadRequest(nullptr) {};
  virtual ~RecordDownloadRequest();

  RecordDownloadRequest(const RecordDownloadRequest& from);
  RecordDownloadRequest(RecordDownloadRequest&& from) noexcept
    : RecordDownloadRequest() {
    *this = ::std::move(from);
  }

  inline RecordDownloadRequest& operator=(const RecordDownloadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordDownloadRequest& operator=(RecordDownloadRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordDownloadRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordDownloadRequest* internal_default_instance() {
    return reinterpret_cast<const RecordDownloadRequest*>(
               &_RecordDownloadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(RecordDownloadRequest& a, RecordDownloadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordDownloadRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordDownloadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordDownloadRequest* New() const final {
    return CreateMaybeMessage<RecordDownloadRequest>(nullptr);
  }

  RecordDownloadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordDownloadRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordDownloadRequest& from);
  void MergeFrom(const RecordDownloadRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordDownloadRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.RecordDownloadRequest";
  }
  protected:
  explicit RecordDownloadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 4,
    kDestIpFieldNumber = 5,
    kDestPortFieldNumber = 6,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // string startTime = 3;
  void clear_starttime();
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_starttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_starttime(
      std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // string endTime = 4;
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endtime(
      std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // string destIp = 5;
  void clear_destip();
  const std::string& destip() const;
  void set_destip(const std::string& value);
  void set_destip(std::string&& value);
  void set_destip(const char* value);
  void set_destip(const char* value, size_t size);
  std::string* mutable_destip();
  std::string* release_destip();
  void set_allocated_destip(std::string* destip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destip(
      std::string* destip);
  private:
  const std::string& _internal_destip() const;
  void _internal_set_destip(const std::string& value);
  std::string* _internal_mutable_destip();
  public:

  // int32 destPort = 6;
  void clear_destport();
  ::PROTOBUF_NAMESPACE_ID::int32 destport() const;
  void set_destport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_destport() const;
  void _internal_set_destport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.RecordDownloadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destip_;
  ::PROTOBUF_NAMESPACE_ID::int32 destport_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class RecordDownloadReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.RecordDownloadReply) */ {
 public:
  inline RecordDownloadReply() : RecordDownloadReply(nullptr) {};
  virtual ~RecordDownloadReply();

  RecordDownloadReply(const RecordDownloadReply& from);
  RecordDownloadReply(RecordDownloadReply&& from) noexcept
    : RecordDownloadReply() {
    *this = ::std::move(from);
  }

  inline RecordDownloadReply& operator=(const RecordDownloadReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordDownloadReply& operator=(RecordDownloadReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordDownloadReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordDownloadReply* internal_default_instance() {
    return reinterpret_cast<const RecordDownloadReply*>(
               &_RecordDownloadReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(RecordDownloadReply& a, RecordDownloadReply& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordDownloadReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordDownloadReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordDownloadReply* New() const final {
    return CreateMaybeMessage<RecordDownloadReply>(nullptr);
  }

  RecordDownloadReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordDownloadReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordDownloadReply& from);
  void MergeFrom(const RecordDownloadReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordDownloadReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.RecordDownloadReply";
  }
  protected:
  explicit RecordDownloadReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kMsgFieldNumber = 4,
    kFileSizeFieldNumber = 2,
    kCodeFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string msg = 4;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int64 fileSize = 2;
  void clear_filesize();
  ::PROTOBUF_NAMESPACE_ID::int64 filesize() const;
  void set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_filesize() const;
  void _internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 code = 3;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.RecordDownloadReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int64 filesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetDeviceStatusRequest) */ {
 public:
  inline GetDeviceStatusRequest() : GetDeviceStatusRequest(nullptr) {};
  virtual ~GetDeviceStatusRequest();

  GetDeviceStatusRequest(const GetDeviceStatusRequest& from);
  GetDeviceStatusRequest(GetDeviceStatusRequest&& from) noexcept
    : GetDeviceStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceStatusRequest& operator=(const GetDeviceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceStatusRequest& operator=(GetDeviceStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceStatusRequest*>(
               &_GetDeviceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(GetDeviceStatusRequest& a, GetDeviceStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceStatusRequest* New() const final {
    return CreateMaybeMessage<GetDeviceStatusRequest>(nullptr);
  }

  GetDeviceStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceStatusRequest& from);
  void MergeFrom(const GetDeviceStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetDeviceStatusRequest";
  }
  protected:
  explicit GetDeviceStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetDeviceStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceStatusReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetDeviceStatusReply) */ {
 public:
  inline GetDeviceStatusReply() : GetDeviceStatusReply(nullptr) {};
  virtual ~GetDeviceStatusReply();

  GetDeviceStatusReply(const GetDeviceStatusReply& from);
  GetDeviceStatusReply(GetDeviceStatusReply&& from) noexcept
    : GetDeviceStatusReply() {
    *this = ::std::move(from);
  }

  inline GetDeviceStatusReply& operator=(const GetDeviceStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceStatusReply& operator=(GetDeviceStatusReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceStatusReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceStatusReply* internal_default_instance() {
    return reinterpret_cast<const GetDeviceStatusReply*>(
               &_GetDeviceStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(GetDeviceStatusReply& a, GetDeviceStatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceStatusReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceStatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceStatusReply* New() const final {
    return CreateMaybeMessage<GetDeviceStatusReply>(nullptr);
  }

  GetDeviceStatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceStatusReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceStatusReply& from);
  void MergeFrom(const GetDeviceStatusReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceStatusReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetDeviceStatusReply";
  }
  protected:
  explicit GetDeviceStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 3,
    kIsOnlineFieldNumber = 1,
    kCodeFieldNumber = 2,
  };
  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // bool isOnline = 1;
  void clear_isonline();
  bool isonline() const;
  void set_isonline(bool value);
  private:
  bool _internal_isonline() const;
  void _internal_set_isonline(bool value);
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetDeviceStatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  bool isonline_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetAllDeviceStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetAllDeviceStatusRequest) */ {
 public:
  inline GetAllDeviceStatusRequest() : GetAllDeviceStatusRequest(nullptr) {};
  virtual ~GetAllDeviceStatusRequest();

  GetAllDeviceStatusRequest(const GetAllDeviceStatusRequest& from);
  GetAllDeviceStatusRequest(GetAllDeviceStatusRequest&& from) noexcept
    : GetAllDeviceStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetAllDeviceStatusRequest& operator=(const GetAllDeviceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllDeviceStatusRequest& operator=(GetAllDeviceStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllDeviceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllDeviceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetAllDeviceStatusRequest*>(
               &_GetAllDeviceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(GetAllDeviceStatusRequest& a, GetAllDeviceStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllDeviceStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllDeviceStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllDeviceStatusRequest* New() const final {
    return CreateMaybeMessage<GetAllDeviceStatusRequest>(nullptr);
  }

  GetAllDeviceStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllDeviceStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllDeviceStatusRequest& from);
  void MergeFrom(const GetAllDeviceStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllDeviceStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetAllDeviceStatusRequest";
  }
  protected:
  explicit GetAllDeviceStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GB28181.GetAllDeviceStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StatusInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StatusInfo) */ {
 public:
  inline StatusInfo() : StatusInfo(nullptr) {};
  virtual ~StatusInfo();

  StatusInfo(const StatusInfo& from);
  StatusInfo(StatusInfo&& from) noexcept
    : StatusInfo() {
    *this = ::std::move(from);
  }

  inline StatusInfo& operator=(const StatusInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusInfo& operator=(StatusInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatusInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusInfo* internal_default_instance() {
    return reinterpret_cast<const StatusInfo*>(
               &_StatusInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(StatusInfo& a, StatusInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatusInfo* New() const final {
    return CreateMaybeMessage<StatusInfo>(nullptr);
  }

  StatusInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatusInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatusInfo& from);
  void MergeFrom(const StatusInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StatusInfo";
  }
  protected:
  explicit StatusInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIsOnlineFieldNumber = 3,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // bool isOnline = 3;
  void clear_isonline();
  bool isonline() const;
  void set_isonline(bool value);
  private:
  bool _internal_isonline() const;
  void _internal_set_isonline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StatusInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  bool isonline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetAllDeviceStatusReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetAllDeviceStatusReply) */ {
 public:
  inline GetAllDeviceStatusReply() : GetAllDeviceStatusReply(nullptr) {};
  virtual ~GetAllDeviceStatusReply();

  GetAllDeviceStatusReply(const GetAllDeviceStatusReply& from);
  GetAllDeviceStatusReply(GetAllDeviceStatusReply&& from) noexcept
    : GetAllDeviceStatusReply() {
    *this = ::std::move(from);
  }

  inline GetAllDeviceStatusReply& operator=(const GetAllDeviceStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAllDeviceStatusReply& operator=(GetAllDeviceStatusReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetAllDeviceStatusReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetAllDeviceStatusReply* internal_default_instance() {
    return reinterpret_cast<const GetAllDeviceStatusReply*>(
               &_GetAllDeviceStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(GetAllDeviceStatusReply& a, GetAllDeviceStatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAllDeviceStatusReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAllDeviceStatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAllDeviceStatusReply* New() const final {
    return CreateMaybeMessage<GetAllDeviceStatusReply>(nullptr);
  }

  GetAllDeviceStatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAllDeviceStatusReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAllDeviceStatusReply& from);
  void MergeFrom(const GetAllDeviceStatusReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAllDeviceStatusReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetAllDeviceStatusReply";
  }
  protected:
  explicit GetAllDeviceStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusInfoListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated .GB28181.StatusInfo statusInfoList = 1;
  int statusinfolist_size() const;
  private:
  int _internal_statusinfolist_size() const;
  public:
  void clear_statusinfolist();
  ::GB28181::StatusInfo* mutable_statusinfolist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::StatusInfo >*
      mutable_statusinfolist();
  private:
  const ::GB28181::StatusInfo& _internal_statusinfolist(int index) const;
  ::GB28181::StatusInfo* _internal_add_statusinfolist();
  public:
  const ::GB28181::StatusInfo& statusinfolist(int index) const;
  ::GB28181::StatusInfo* add_statusinfolist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::StatusInfo >&
      statusinfolist() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetAllDeviceStatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::StatusInfo > statusinfolist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceListRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetDeviceListRequest) */ {
 public:
  inline GetDeviceListRequest() : GetDeviceListRequest(nullptr) {};
  virtual ~GetDeviceListRequest();

  GetDeviceListRequest(const GetDeviceListRequest& from);
  GetDeviceListRequest(GetDeviceListRequest&& from) noexcept
    : GetDeviceListRequest() {
    *this = ::std::move(from);
  }

  inline GetDeviceListRequest& operator=(const GetDeviceListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceListRequest& operator=(GetDeviceListRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceListRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceListRequest* internal_default_instance() {
    return reinterpret_cast<const GetDeviceListRequest*>(
               &_GetDeviceListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(GetDeviceListRequest& a, GetDeviceListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceListRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceListRequest* New() const final {
    return CreateMaybeMessage<GetDeviceListRequest>(nullptr);
  }

  GetDeviceListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceListRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceListRequest& from);
  void MergeFrom(const GetDeviceListRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceListRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetDeviceListRequest";
  }
  protected:
  explicit GetDeviceListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GB28181.GetDeviceListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class DeviceList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.DeviceList) */ {
 public:
  inline DeviceList() : DeviceList(nullptr) {};
  virtual ~DeviceList();

  DeviceList(const DeviceList& from);
  DeviceList(DeviceList&& from) noexcept
    : DeviceList() {
    *this = ::std::move(from);
  }

  inline DeviceList& operator=(const DeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceList& operator=(DeviceList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceList* internal_default_instance() {
    return reinterpret_cast<const DeviceList*>(
               &_DeviceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(DeviceList& a, DeviceList& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceList* New() const final {
    return CreateMaybeMessage<DeviceList>(nullptr);
  }

  DeviceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceList& from);
  void MergeFrom(const DeviceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.DeviceList";
  }
  protected:
  explicit DeviceList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kIpFieldNumber = 4,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // string name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip = 4;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.DeviceList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class GetDeviceListReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.GetDeviceListReply) */ {
 public:
  inline GetDeviceListReply() : GetDeviceListReply(nullptr) {};
  virtual ~GetDeviceListReply();

  GetDeviceListReply(const GetDeviceListReply& from);
  GetDeviceListReply(GetDeviceListReply&& from) noexcept
    : GetDeviceListReply() {
    *this = ::std::move(from);
  }

  inline GetDeviceListReply& operator=(const GetDeviceListReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetDeviceListReply& operator=(GetDeviceListReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetDeviceListReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDeviceListReply* internal_default_instance() {
    return reinterpret_cast<const GetDeviceListReply*>(
               &_GetDeviceListReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(GetDeviceListReply& a, GetDeviceListReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetDeviceListReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetDeviceListReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetDeviceListReply* New() const final {
    return CreateMaybeMessage<GetDeviceListReply>(nullptr);
  }

  GetDeviceListReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetDeviceListReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetDeviceListReply& from);
  void MergeFrom(const GetDeviceListReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetDeviceListReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.GetDeviceListReply";
  }
  protected:
  explicit GetDeviceListReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated .GB28181.DeviceList deviceList = 1;
  int devicelist_size() const;
  private:
  int _internal_devicelist_size() const;
  public:
  void clear_devicelist();
  ::GB28181::DeviceList* mutable_devicelist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::DeviceList >*
      mutable_devicelist();
  private:
  const ::GB28181::DeviceList& _internal_devicelist(int index) const;
  ::GB28181::DeviceList* _internal_add_devicelist();
  public:
  const ::GB28181::DeviceList& devicelist(int index) const;
  ::GB28181::DeviceList* add_devicelist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::DeviceList >&
      devicelist() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.GetDeviceListReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::DeviceList > devicelist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class DeviceRebootRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.DeviceRebootRequest) */ {
 public:
  inline DeviceRebootRequest() : DeviceRebootRequest(nullptr) {};
  virtual ~DeviceRebootRequest();

  DeviceRebootRequest(const DeviceRebootRequest& from);
  DeviceRebootRequest(DeviceRebootRequest&& from) noexcept
    : DeviceRebootRequest() {
    *this = ::std::move(from);
  }

  inline DeviceRebootRequest& operator=(const DeviceRebootRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRebootRequest& operator=(DeviceRebootRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceRebootRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRebootRequest* internal_default_instance() {
    return reinterpret_cast<const DeviceRebootRequest*>(
               &_DeviceRebootRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(DeviceRebootRequest& a, DeviceRebootRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRebootRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRebootRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRebootRequest* New() const final {
    return CreateMaybeMessage<DeviceRebootRequest>(nullptr);
  }

  DeviceRebootRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRebootRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceRebootRequest& from);
  void MergeFrom(const DeviceRebootRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRebootRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.DeviceRebootRequest";
  }
  protected:
  explicit DeviceRebootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.DeviceRebootRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class DeviceRebootReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.DeviceRebootReply) */ {
 public:
  inline DeviceRebootReply() : DeviceRebootReply(nullptr) {};
  virtual ~DeviceRebootReply();

  DeviceRebootReply(const DeviceRebootReply& from);
  DeviceRebootReply(DeviceRebootReply&& from) noexcept
    : DeviceRebootReply() {
    *this = ::std::move(from);
  }

  inline DeviceRebootReply& operator=(const DeviceRebootReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceRebootReply& operator=(DeviceRebootReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceRebootReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceRebootReply* internal_default_instance() {
    return reinterpret_cast<const DeviceRebootReply*>(
               &_DeviceRebootReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(DeviceRebootReply& a, DeviceRebootReply& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceRebootReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceRebootReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceRebootReply* New() const final {
    return CreateMaybeMessage<DeviceRebootReply>(nullptr);
  }

  DeviceRebootReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceRebootReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceRebootReply& from);
  void MergeFrom(const DeviceRebootReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceRebootReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.DeviceRebootReply";
  }
  protected:
  explicit DeviceRebootReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.DeviceRebootReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StartBroadcastRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StartBroadcastRequest) */ {
 public:
  inline StartBroadcastRequest() : StartBroadcastRequest(nullptr) {};
  virtual ~StartBroadcastRequest();

  StartBroadcastRequest(const StartBroadcastRequest& from);
  StartBroadcastRequest(StartBroadcastRequest&& from) noexcept
    : StartBroadcastRequest() {
    *this = ::std::move(from);
  }

  inline StartBroadcastRequest& operator=(const StartBroadcastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBroadcastRequest& operator=(StartBroadcastRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartBroadcastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartBroadcastRequest* internal_default_instance() {
    return reinterpret_cast<const StartBroadcastRequest*>(
               &_StartBroadcastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(StartBroadcastRequest& a, StartBroadcastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBroadcastRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartBroadcastRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartBroadcastRequest* New() const final {
    return CreateMaybeMessage<StartBroadcastRequest>(nullptr);
  }

  StartBroadcastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartBroadcastRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartBroadcastRequest& from);
  void MergeFrom(const StartBroadcastRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBroadcastRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StartBroadcastRequest";
  }
  protected:
  explicit StartBroadcastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StartBroadcastRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StartBroadcastReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StartBroadcastReply) */ {
 public:
  inline StartBroadcastReply() : StartBroadcastReply(nullptr) {};
  virtual ~StartBroadcastReply();

  StartBroadcastReply(const StartBroadcastReply& from);
  StartBroadcastReply(StartBroadcastReply&& from) noexcept
    : StartBroadcastReply() {
    *this = ::std::move(from);
  }

  inline StartBroadcastReply& operator=(const StartBroadcastReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartBroadcastReply& operator=(StartBroadcastReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartBroadcastReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartBroadcastReply* internal_default_instance() {
    return reinterpret_cast<const StartBroadcastReply*>(
               &_StartBroadcastReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(StartBroadcastReply& a, StartBroadcastReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StartBroadcastReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartBroadcastReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartBroadcastReply* New() const final {
    return CreateMaybeMessage<StartBroadcastReply>(nullptr);
  }

  StartBroadcastReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartBroadcastReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartBroadcastReply& from);
  void MergeFrom(const StartBroadcastReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartBroadcastReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StartBroadcastReply";
  }
  protected:
  explicit StartBroadcastReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestIpFieldNumber = 1,
    kTokenFieldNumber = 3,
    kMsgFieldNumber = 5,
    kDestPortFieldNumber = 2,
    kCodeFieldNumber = 4,
  };
  // string destIp = 1;
  void clear_destip();
  const std::string& destip() const;
  void set_destip(const std::string& value);
  void set_destip(std::string&& value);
  void set_destip(const char* value);
  void set_destip(const char* value, size_t size);
  std::string* mutable_destip();
  std::string* release_destip();
  void set_allocated_destip(std::string* destip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destip(
      std::string* destip);
  private:
  const std::string& _internal_destip() const;
  void _internal_set_destip(const std::string& value);
  std::string* _internal_mutable_destip();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 destPort = 2;
  void clear_destport();
  ::PROTOBUF_NAMESPACE_ID::int32 destport() const;
  void set_destport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_destport() const;
  void _internal_set_destport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StartBroadcastReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 destport_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopBroadcastRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopBroadcastRequest) */ {
 public:
  inline StopBroadcastRequest() : StopBroadcastRequest(nullptr) {};
  virtual ~StopBroadcastRequest();

  StopBroadcastRequest(const StopBroadcastRequest& from);
  StopBroadcastRequest(StopBroadcastRequest&& from) noexcept
    : StopBroadcastRequest() {
    *this = ::std::move(from);
  }

  inline StopBroadcastRequest& operator=(const StopBroadcastRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopBroadcastRequest& operator=(StopBroadcastRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopBroadcastRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopBroadcastRequest* internal_default_instance() {
    return reinterpret_cast<const StopBroadcastRequest*>(
               &_StopBroadcastRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(StopBroadcastRequest& a, StopBroadcastRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopBroadcastRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopBroadcastRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopBroadcastRequest* New() const final {
    return CreateMaybeMessage<StopBroadcastRequest>(nullptr);
  }

  StopBroadcastRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopBroadcastRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopBroadcastRequest& from);
  void MergeFrom(const StopBroadcastRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopBroadcastRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopBroadcastRequest";
  }
  protected:
  explicit StopBroadcastRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopBroadcastRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopBroadcastReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopBroadcastReply) */ {
 public:
  inline StopBroadcastReply() : StopBroadcastReply(nullptr) {};
  virtual ~StopBroadcastReply();

  StopBroadcastReply(const StopBroadcastReply& from);
  StopBroadcastReply(StopBroadcastReply&& from) noexcept
    : StopBroadcastReply() {
    *this = ::std::move(from);
  }

  inline StopBroadcastReply& operator=(const StopBroadcastReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopBroadcastReply& operator=(StopBroadcastReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopBroadcastReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopBroadcastReply* internal_default_instance() {
    return reinterpret_cast<const StopBroadcastReply*>(
               &_StopBroadcastReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(StopBroadcastReply& a, StopBroadcastReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StopBroadcastReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopBroadcastReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopBroadcastReply* New() const final {
    return CreateMaybeMessage<StopBroadcastReply>(nullptr);
  }

  StopBroadcastReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopBroadcastReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopBroadcastReply& from);
  void MergeFrom(const StopBroadcastReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopBroadcastReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopBroadcastReply";
  }
  protected:
  explicit StopBroadcastReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopBroadcastReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StartTalkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StartTalkRequest) */ {
 public:
  inline StartTalkRequest() : StartTalkRequest(nullptr) {};
  virtual ~StartTalkRequest();

  StartTalkRequest(const StartTalkRequest& from);
  StartTalkRequest(StartTalkRequest&& from) noexcept
    : StartTalkRequest() {
    *this = ::std::move(from);
  }

  inline StartTalkRequest& operator=(const StartTalkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTalkRequest& operator=(StartTalkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTalkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTalkRequest* internal_default_instance() {
    return reinterpret_cast<const StartTalkRequest*>(
               &_StartTalkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(StartTalkRequest& a, StartTalkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTalkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTalkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTalkRequest* New() const final {
    return CreateMaybeMessage<StartTalkRequest>(nullptr);
  }

  StartTalkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTalkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTalkRequest& from);
  void MergeFrom(const StartTalkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTalkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StartTalkRequest";
  }
  protected:
  explicit StartTalkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMainIdFieldNumber = 1,
    kSubIdFieldNumber = 2,
    kIpFieldNumber = 3,
    kPortFieldNumber = 4,
  };
  // string mainId = 1;
  void clear_mainid();
  const std::string& mainid() const;
  void set_mainid(const std::string& value);
  void set_mainid(std::string&& value);
  void set_mainid(const char* value);
  void set_mainid(const char* value, size_t size);
  std::string* mutable_mainid();
  std::string* release_mainid();
  void set_allocated_mainid(std::string* mainid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_mainid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_mainid(
      std::string* mainid);
  private:
  const std::string& _internal_mainid() const;
  void _internal_set_mainid(const std::string& value);
  std::string* _internal_mutable_mainid();
  public:

  // string subId = 2;
  void clear_subid();
  const std::string& subid() const;
  void set_subid(const std::string& value);
  void set_subid(std::string&& value);
  void set_subid(const char* value);
  void set_subid(const char* value, size_t size);
  std::string* mutable_subid();
  std::string* release_subid();
  void set_allocated_subid(std::string* subid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_subid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subid(
      std::string* subid);
  private:
  const std::string& _internal_subid() const;
  void _internal_set_subid(const std::string& value);
  std::string* _internal_mutable_subid();
  public:

  // string ip = 3;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // int32 port = 4;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StartTalkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mainid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StartTalkReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StartTalkReply) */ {
 public:
  inline StartTalkReply() : StartTalkReply(nullptr) {};
  virtual ~StartTalkReply();

  StartTalkReply(const StartTalkReply& from);
  StartTalkReply(StartTalkReply&& from) noexcept
    : StartTalkReply() {
    *this = ::std::move(from);
  }

  inline StartTalkReply& operator=(const StartTalkReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartTalkReply& operator=(StartTalkReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartTalkReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartTalkReply* internal_default_instance() {
    return reinterpret_cast<const StartTalkReply*>(
               &_StartTalkReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(StartTalkReply& a, StartTalkReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StartTalkReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartTalkReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartTalkReply* New() const final {
    return CreateMaybeMessage<StartTalkReply>(nullptr);
  }

  StartTalkReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartTalkReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartTalkReply& from);
  void MergeFrom(const StartTalkReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartTalkReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StartTalkReply";
  }
  protected:
  explicit StartTalkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kTokenFieldNumber = 3,
    kMsgFieldNumber = 5,
    kPortFieldNumber = 2,
    kCodeFieldNumber = 4,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string msg = 5;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 4;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StartTalkReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopTalkRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopTalkRequest) */ {
 public:
  inline StopTalkRequest() : StopTalkRequest(nullptr) {};
  virtual ~StopTalkRequest();

  StopTalkRequest(const StopTalkRequest& from);
  StopTalkRequest(StopTalkRequest&& from) noexcept
    : StopTalkRequest() {
    *this = ::std::move(from);
  }

  inline StopTalkRequest& operator=(const StopTalkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTalkRequest& operator=(StopTalkRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTalkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopTalkRequest* internal_default_instance() {
    return reinterpret_cast<const StopTalkRequest*>(
               &_StopTalkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(StopTalkRequest& a, StopTalkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTalkRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTalkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTalkRequest* New() const final {
    return CreateMaybeMessage<StopTalkRequest>(nullptr);
  }

  StopTalkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTalkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTalkRequest& from);
  void MergeFrom(const StopTalkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTalkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopTalkRequest";
  }
  protected:
  explicit StopTalkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_token(
      std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopTalkRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class StopTalkReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.StopTalkReply) */ {
 public:
  inline StopTalkReply() : StopTalkReply(nullptr) {};
  virtual ~StopTalkReply();

  StopTalkReply(const StopTalkReply& from);
  StopTalkReply(StopTalkReply&& from) noexcept
    : StopTalkReply() {
    *this = ::std::move(from);
  }

  inline StopTalkReply& operator=(const StopTalkReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopTalkReply& operator=(StopTalkReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopTalkReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopTalkReply* internal_default_instance() {
    return reinterpret_cast<const StopTalkReply*>(
               &_StopTalkReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(StopTalkReply& a, StopTalkReply& b) {
    a.Swap(&b);
  }
  inline void Swap(StopTalkReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopTalkReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopTalkReply* New() const final {
    return CreateMaybeMessage<StopTalkReply>(nullptr);
  }

  StopTalkReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopTalkReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopTalkReply& from);
  void MergeFrom(const StopTalkReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopTalkReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.StopTalkReply";
  }
  protected:
  explicit StopTalkReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.StopTalkReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class ServiceStatusRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.ServiceStatusRequest) */ {
 public:
  inline ServiceStatusRequest() : ServiceStatusRequest(nullptr) {};
  virtual ~ServiceStatusRequest();

  ServiceStatusRequest(const ServiceStatusRequest& from);
  ServiceStatusRequest(ServiceStatusRequest&& from) noexcept
    : ServiceStatusRequest() {
    *this = ::std::move(from);
  }

  inline ServiceStatusRequest& operator=(const ServiceStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusRequest& operator=(ServiceStatusRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusRequest*>(
               &_ServiceStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(ServiceStatusRequest& a, ServiceStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusRequest* New() const final {
    return CreateMaybeMessage<ServiceStatusRequest>(nullptr);
  }

  ServiceStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceStatusRequest& from);
  void MergeFrom(const ServiceStatusRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.ServiceStatusRequest";
  }
  protected:
  explicit ServiceStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GB28181.ServiceStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class ServiceStatusReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.ServiceStatusReply) */ {
 public:
  inline ServiceStatusReply() : ServiceStatusReply(nullptr) {};
  virtual ~ServiceStatusReply();

  ServiceStatusReply(const ServiceStatusReply& from);
  ServiceStatusReply(ServiceStatusReply&& from) noexcept
    : ServiceStatusReply() {
    *this = ::std::move(from);
  }

  inline ServiceStatusReply& operator=(const ServiceStatusReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceStatusReply& operator=(ServiceStatusReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceStatusReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceStatusReply* internal_default_instance() {
    return reinterpret_cast<const ServiceStatusReply*>(
               &_ServiceStatusReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ServiceStatusReply& a, ServiceStatusReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceStatusReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceStatusReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceStatusReply* New() const final {
    return CreateMaybeMessage<ServiceStatusReply>(nullptr);
  }

  ServiceStatusReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceStatusReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceStatusReply& from);
  void MergeFrom(const ServiceStatusReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceStatusReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.ServiceStatusReply";
  }
  protected:
  explicit ServiceStatusReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kSipIdFieldNumber = 5,
    kMsgFieldNumber = 8,
    kDiskTotalSizeFieldNumber = 2,
    kDiskUsedSizeFieldNumber = 3,
    kDiskAvilableSizeFieldNumber = 4,
    kPortFieldNumber = 6,
    kCodeFieldNumber = 7,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string SipId = 5;
  void clear_sipid();
  const std::string& sipid() const;
  void set_sipid(const std::string& value);
  void set_sipid(std::string&& value);
  void set_sipid(const char* value);
  void set_sipid(const char* value, size_t size);
  std::string* mutable_sipid();
  std::string* release_sipid();
  void set_allocated_sipid(std::string* sipid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sipid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sipid(
      std::string* sipid);
  private:
  const std::string& _internal_sipid() const;
  void _internal_set_sipid(const std::string& value);
  std::string* _internal_mutable_sipid();
  public:

  // string msg = 8;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 diskTotalSize = 2;
  void clear_disktotalsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 disktotalsize() const;
  void set_disktotalsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_disktotalsize() const;
  void _internal_set_disktotalsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 diskUsedSize = 3;
  void clear_diskusedsize();
  ::PROTOBUF_NAMESPACE_ID::uint64 diskusedsize() const;
  void set_diskusedsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_diskusedsize() const;
  void _internal_set_diskusedsize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 diskAvilableSize = 4;
  void clear_diskavilablesize();
  ::PROTOBUF_NAMESPACE_ID::uint64 diskavilablesize() const;
  void set_diskavilablesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_diskavilablesize() const;
  void _internal_set_diskavilablesize(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int32 port = 6;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 code = 7;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.ServiceStatusReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sipid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::uint64 disktotalsize_;
  ::PROTOBUF_NAMESPACE_ID::uint64 diskusedsize_;
  ::PROTOBUF_NAMESPACE_ID::uint64 diskavilablesize_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifPtzMoveRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifPtzMoveRequest) */ {
 public:
  inline OnvifPtzMoveRequest() : OnvifPtzMoveRequest(nullptr) {};
  virtual ~OnvifPtzMoveRequest();

  OnvifPtzMoveRequest(const OnvifPtzMoveRequest& from);
  OnvifPtzMoveRequest(OnvifPtzMoveRequest&& from) noexcept
    : OnvifPtzMoveRequest() {
    *this = ::std::move(from);
  }

  inline OnvifPtzMoveRequest& operator=(const OnvifPtzMoveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifPtzMoveRequest& operator=(OnvifPtzMoveRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifPtzMoveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifPtzMoveRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifPtzMoveRequest*>(
               &_OnvifPtzMoveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(OnvifPtzMoveRequest& a, OnvifPtzMoveRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifPtzMoveRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifPtzMoveRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifPtzMoveRequest* New() const final {
    return CreateMaybeMessage<OnvifPtzMoveRequest>(nullptr);
  }

  OnvifPtzMoveRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifPtzMoveRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifPtzMoveRequest& from);
  void MergeFrom(const OnvifPtzMoveRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifPtzMoveRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifPtzMoveRequest";
  }
  protected:
  explicit OnvifPtzMoveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
    kDirectoryFieldNumber = 6,
    kSpeedFieldNumber = 7,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 directory = 6;
  void clear_directory();
  ::PROTOBUF_NAMESPACE_ID::int32 directory() const;
  void set_directory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_directory() const;
  void _internal_set_directory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 7;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifPtzMoveRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 directory_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifPtzMoveReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifPtzMoveReply) */ {
 public:
  inline OnvifPtzMoveReply() : OnvifPtzMoveReply(nullptr) {};
  virtual ~OnvifPtzMoveReply();

  OnvifPtzMoveReply(const OnvifPtzMoveReply& from);
  OnvifPtzMoveReply(OnvifPtzMoveReply&& from) noexcept
    : OnvifPtzMoveReply() {
    *this = ::std::move(from);
  }

  inline OnvifPtzMoveReply& operator=(const OnvifPtzMoveReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifPtzMoveReply& operator=(OnvifPtzMoveReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifPtzMoveReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifPtzMoveReply* internal_default_instance() {
    return reinterpret_cast<const OnvifPtzMoveReply*>(
               &_OnvifPtzMoveReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(OnvifPtzMoveReply& a, OnvifPtzMoveReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifPtzMoveReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifPtzMoveReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifPtzMoveReply* New() const final {
    return CreateMaybeMessage<OnvifPtzMoveReply>(nullptr);
  }

  OnvifPtzMoveReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifPtzMoveReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifPtzMoveReply& from);
  void MergeFrom(const OnvifPtzMoveReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifPtzMoveReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifPtzMoveReply";
  }
  protected:
  explicit OnvifPtzMoveReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifPtzMoveReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifPtzStopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifPtzStopRequest) */ {
 public:
  inline OnvifPtzStopRequest() : OnvifPtzStopRequest(nullptr) {};
  virtual ~OnvifPtzStopRequest();

  OnvifPtzStopRequest(const OnvifPtzStopRequest& from);
  OnvifPtzStopRequest(OnvifPtzStopRequest&& from) noexcept
    : OnvifPtzStopRequest() {
    *this = ::std::move(from);
  }

  inline OnvifPtzStopRequest& operator=(const OnvifPtzStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifPtzStopRequest& operator=(OnvifPtzStopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifPtzStopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifPtzStopRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifPtzStopRequest*>(
               &_OnvifPtzStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(OnvifPtzStopRequest& a, OnvifPtzStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifPtzStopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifPtzStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifPtzStopRequest* New() const final {
    return CreateMaybeMessage<OnvifPtzStopRequest>(nullptr);
  }

  OnvifPtzStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifPtzStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifPtzStopRequest& from);
  void MergeFrom(const OnvifPtzStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifPtzStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifPtzStopRequest";
  }
  protected:
  explicit OnvifPtzStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifPtzStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifPtzStopReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifPtzStopReply) */ {
 public:
  inline OnvifPtzStopReply() : OnvifPtzStopReply(nullptr) {};
  virtual ~OnvifPtzStopReply();

  OnvifPtzStopReply(const OnvifPtzStopReply& from);
  OnvifPtzStopReply(OnvifPtzStopReply&& from) noexcept
    : OnvifPtzStopReply() {
    *this = ::std::move(from);
  }

  inline OnvifPtzStopReply& operator=(const OnvifPtzStopReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifPtzStopReply& operator=(OnvifPtzStopReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifPtzStopReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifPtzStopReply* internal_default_instance() {
    return reinterpret_cast<const OnvifPtzStopReply*>(
               &_OnvifPtzStopReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(OnvifPtzStopReply& a, OnvifPtzStopReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifPtzStopReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifPtzStopReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifPtzStopReply* New() const final {
    return CreateMaybeMessage<OnvifPtzStopReply>(nullptr);
  }

  OnvifPtzStopReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifPtzStopReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifPtzStopReply& from);
  void MergeFrom(const OnvifPtzStopReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifPtzStopReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifPtzStopReply";
  }
  protected:
  explicit OnvifPtzStopReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifPtzStopReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifZoomInRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifZoomInRequest) */ {
 public:
  inline OnvifZoomInRequest() : OnvifZoomInRequest(nullptr) {};
  virtual ~OnvifZoomInRequest();

  OnvifZoomInRequest(const OnvifZoomInRequest& from);
  OnvifZoomInRequest(OnvifZoomInRequest&& from) noexcept
    : OnvifZoomInRequest() {
    *this = ::std::move(from);
  }

  inline OnvifZoomInRequest& operator=(const OnvifZoomInRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifZoomInRequest& operator=(OnvifZoomInRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifZoomInRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifZoomInRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifZoomInRequest*>(
               &_OnvifZoomInRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(OnvifZoomInRequest& a, OnvifZoomInRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifZoomInRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifZoomInRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifZoomInRequest* New() const final {
    return CreateMaybeMessage<OnvifZoomInRequest>(nullptr);
  }

  OnvifZoomInRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifZoomInRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifZoomInRequest& from);
  void MergeFrom(const OnvifZoomInRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifZoomInRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifZoomInRequest";
  }
  protected:
  explicit OnvifZoomInRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
    kSpeedFieldNumber = 6,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 6;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifZoomInRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifZoomInReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifZoomInReply) */ {
 public:
  inline OnvifZoomInReply() : OnvifZoomInReply(nullptr) {};
  virtual ~OnvifZoomInReply();

  OnvifZoomInReply(const OnvifZoomInReply& from);
  OnvifZoomInReply(OnvifZoomInReply&& from) noexcept
    : OnvifZoomInReply() {
    *this = ::std::move(from);
  }

  inline OnvifZoomInReply& operator=(const OnvifZoomInReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifZoomInReply& operator=(OnvifZoomInReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifZoomInReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifZoomInReply* internal_default_instance() {
    return reinterpret_cast<const OnvifZoomInReply*>(
               &_OnvifZoomInReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(OnvifZoomInReply& a, OnvifZoomInReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifZoomInReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifZoomInReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifZoomInReply* New() const final {
    return CreateMaybeMessage<OnvifZoomInReply>(nullptr);
  }

  OnvifZoomInReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifZoomInReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifZoomInReply& from);
  void MergeFrom(const OnvifZoomInReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifZoomInReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifZoomInReply";
  }
  protected:
  explicit OnvifZoomInReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifZoomInReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifZoomOutRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifZoomOutRequest) */ {
 public:
  inline OnvifZoomOutRequest() : OnvifZoomOutRequest(nullptr) {};
  virtual ~OnvifZoomOutRequest();

  OnvifZoomOutRequest(const OnvifZoomOutRequest& from);
  OnvifZoomOutRequest(OnvifZoomOutRequest&& from) noexcept
    : OnvifZoomOutRequest() {
    *this = ::std::move(from);
  }

  inline OnvifZoomOutRequest& operator=(const OnvifZoomOutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifZoomOutRequest& operator=(OnvifZoomOutRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifZoomOutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifZoomOutRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifZoomOutRequest*>(
               &_OnvifZoomOutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(OnvifZoomOutRequest& a, OnvifZoomOutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifZoomOutRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifZoomOutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifZoomOutRequest* New() const final {
    return CreateMaybeMessage<OnvifZoomOutRequest>(nullptr);
  }

  OnvifZoomOutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifZoomOutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifZoomOutRequest& from);
  void MergeFrom(const OnvifZoomOutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifZoomOutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifZoomOutRequest";
  }
  protected:
  explicit OnvifZoomOutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
    kSpeedFieldNumber = 6,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 6;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifZoomOutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifZoomOutReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifZoomOutReply) */ {
 public:
  inline OnvifZoomOutReply() : OnvifZoomOutReply(nullptr) {};
  virtual ~OnvifZoomOutReply();

  OnvifZoomOutReply(const OnvifZoomOutReply& from);
  OnvifZoomOutReply(OnvifZoomOutReply&& from) noexcept
    : OnvifZoomOutReply() {
    *this = ::std::move(from);
  }

  inline OnvifZoomOutReply& operator=(const OnvifZoomOutReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifZoomOutReply& operator=(OnvifZoomOutReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifZoomOutReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifZoomOutReply* internal_default_instance() {
    return reinterpret_cast<const OnvifZoomOutReply*>(
               &_OnvifZoomOutReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(OnvifZoomOutReply& a, OnvifZoomOutReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifZoomOutReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifZoomOutReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifZoomOutReply* New() const final {
    return CreateMaybeMessage<OnvifZoomOutReply>(nullptr);
  }

  OnvifZoomOutReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifZoomOutReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifZoomOutReply& from);
  void MergeFrom(const OnvifZoomOutReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifZoomOutReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifZoomOutReply";
  }
  protected:
  explicit OnvifZoomOutReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifZoomOutReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifZoomStopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifZoomStopRequest) */ {
 public:
  inline OnvifZoomStopRequest() : OnvifZoomStopRequest(nullptr) {};
  virtual ~OnvifZoomStopRequest();

  OnvifZoomStopRequest(const OnvifZoomStopRequest& from);
  OnvifZoomStopRequest(OnvifZoomStopRequest&& from) noexcept
    : OnvifZoomStopRequest() {
    *this = ::std::move(from);
  }

  inline OnvifZoomStopRequest& operator=(const OnvifZoomStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifZoomStopRequest& operator=(OnvifZoomStopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifZoomStopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifZoomStopRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifZoomStopRequest*>(
               &_OnvifZoomStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(OnvifZoomStopRequest& a, OnvifZoomStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifZoomStopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifZoomStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifZoomStopRequest* New() const final {
    return CreateMaybeMessage<OnvifZoomStopRequest>(nullptr);
  }

  OnvifZoomStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifZoomStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifZoomStopRequest& from);
  void MergeFrom(const OnvifZoomStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifZoomStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifZoomStopRequest";
  }
  protected:
  explicit OnvifZoomStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifZoomStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifZoomStopReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifZoomStopReply) */ {
 public:
  inline OnvifZoomStopReply() : OnvifZoomStopReply(nullptr) {};
  virtual ~OnvifZoomStopReply();

  OnvifZoomStopReply(const OnvifZoomStopReply& from);
  OnvifZoomStopReply(OnvifZoomStopReply&& from) noexcept
    : OnvifZoomStopReply() {
    *this = ::std::move(from);
  }

  inline OnvifZoomStopReply& operator=(const OnvifZoomStopReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifZoomStopReply& operator=(OnvifZoomStopReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifZoomStopReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifZoomStopReply* internal_default_instance() {
    return reinterpret_cast<const OnvifZoomStopReply*>(
               &_OnvifZoomStopReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(OnvifZoomStopReply& a, OnvifZoomStopReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifZoomStopReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifZoomStopReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifZoomStopReply* New() const final {
    return CreateMaybeMessage<OnvifZoomStopReply>(nullptr);
  }

  OnvifZoomStopReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifZoomStopReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifZoomStopReply& from);
  void MergeFrom(const OnvifZoomStopReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifZoomStopReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifZoomStopReply";
  }
  protected:
  explicit OnvifZoomStopReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifZoomStopReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifFocusNearRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifFocusNearRequest) */ {
 public:
  inline OnvifFocusNearRequest() : OnvifFocusNearRequest(nullptr) {};
  virtual ~OnvifFocusNearRequest();

  OnvifFocusNearRequest(const OnvifFocusNearRequest& from);
  OnvifFocusNearRequest(OnvifFocusNearRequest&& from) noexcept
    : OnvifFocusNearRequest() {
    *this = ::std::move(from);
  }

  inline OnvifFocusNearRequest& operator=(const OnvifFocusNearRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifFocusNearRequest& operator=(OnvifFocusNearRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifFocusNearRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifFocusNearRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifFocusNearRequest*>(
               &_OnvifFocusNearRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(OnvifFocusNearRequest& a, OnvifFocusNearRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifFocusNearRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifFocusNearRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifFocusNearRequest* New() const final {
    return CreateMaybeMessage<OnvifFocusNearRequest>(nullptr);
  }

  OnvifFocusNearRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifFocusNearRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifFocusNearRequest& from);
  void MergeFrom(const OnvifFocusNearRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifFocusNearRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifFocusNearRequest";
  }
  protected:
  explicit OnvifFocusNearRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
    kSpeedFieldNumber = 6,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 6;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifFocusNearRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifFocusNearReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifFocusNearReply) */ {
 public:
  inline OnvifFocusNearReply() : OnvifFocusNearReply(nullptr) {};
  virtual ~OnvifFocusNearReply();

  OnvifFocusNearReply(const OnvifFocusNearReply& from);
  OnvifFocusNearReply(OnvifFocusNearReply&& from) noexcept
    : OnvifFocusNearReply() {
    *this = ::std::move(from);
  }

  inline OnvifFocusNearReply& operator=(const OnvifFocusNearReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifFocusNearReply& operator=(OnvifFocusNearReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifFocusNearReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifFocusNearReply* internal_default_instance() {
    return reinterpret_cast<const OnvifFocusNearReply*>(
               &_OnvifFocusNearReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(OnvifFocusNearReply& a, OnvifFocusNearReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifFocusNearReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifFocusNearReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifFocusNearReply* New() const final {
    return CreateMaybeMessage<OnvifFocusNearReply>(nullptr);
  }

  OnvifFocusNearReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifFocusNearReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifFocusNearReply& from);
  void MergeFrom(const OnvifFocusNearReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifFocusNearReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifFocusNearReply";
  }
  protected:
  explicit OnvifFocusNearReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifFocusNearReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifFocusFarRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifFocusFarRequest) */ {
 public:
  inline OnvifFocusFarRequest() : OnvifFocusFarRequest(nullptr) {};
  virtual ~OnvifFocusFarRequest();

  OnvifFocusFarRequest(const OnvifFocusFarRequest& from);
  OnvifFocusFarRequest(OnvifFocusFarRequest&& from) noexcept
    : OnvifFocusFarRequest() {
    *this = ::std::move(from);
  }

  inline OnvifFocusFarRequest& operator=(const OnvifFocusFarRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifFocusFarRequest& operator=(OnvifFocusFarRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifFocusFarRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifFocusFarRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifFocusFarRequest*>(
               &_OnvifFocusFarRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(OnvifFocusFarRequest& a, OnvifFocusFarRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifFocusFarRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifFocusFarRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifFocusFarRequest* New() const final {
    return CreateMaybeMessage<OnvifFocusFarRequest>(nullptr);
  }

  OnvifFocusFarRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifFocusFarRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifFocusFarRequest& from);
  void MergeFrom(const OnvifFocusFarRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifFocusFarRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifFocusFarRequest";
  }
  protected:
  explicit OnvifFocusFarRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
    kSpeedFieldNumber = 6,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float speed = 6;
  void clear_speed();
  float speed() const;
  void set_speed(float value);
  private:
  float _internal_speed() const;
  void _internal_set_speed(float value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifFocusFarRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  float speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifFocusFarReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifFocusFarReply) */ {
 public:
  inline OnvifFocusFarReply() : OnvifFocusFarReply(nullptr) {};
  virtual ~OnvifFocusFarReply();

  OnvifFocusFarReply(const OnvifFocusFarReply& from);
  OnvifFocusFarReply(OnvifFocusFarReply&& from) noexcept
    : OnvifFocusFarReply() {
    *this = ::std::move(from);
  }

  inline OnvifFocusFarReply& operator=(const OnvifFocusFarReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifFocusFarReply& operator=(OnvifFocusFarReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifFocusFarReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifFocusFarReply* internal_default_instance() {
    return reinterpret_cast<const OnvifFocusFarReply*>(
               &_OnvifFocusFarReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(OnvifFocusFarReply& a, OnvifFocusFarReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifFocusFarReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifFocusFarReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifFocusFarReply* New() const final {
    return CreateMaybeMessage<OnvifFocusFarReply>(nullptr);
  }

  OnvifFocusFarReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifFocusFarReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifFocusFarReply& from);
  void MergeFrom(const OnvifFocusFarReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifFocusFarReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifFocusFarReply";
  }
  protected:
  explicit OnvifFocusFarReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifFocusFarReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifFocusStopRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifFocusStopRequest) */ {
 public:
  inline OnvifFocusStopRequest() : OnvifFocusStopRequest(nullptr) {};
  virtual ~OnvifFocusStopRequest();

  OnvifFocusStopRequest(const OnvifFocusStopRequest& from);
  OnvifFocusStopRequest(OnvifFocusStopRequest&& from) noexcept
    : OnvifFocusStopRequest() {
    *this = ::std::move(from);
  }

  inline OnvifFocusStopRequest& operator=(const OnvifFocusStopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifFocusStopRequest& operator=(OnvifFocusStopRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifFocusStopRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifFocusStopRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifFocusStopRequest*>(
               &_OnvifFocusStopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(OnvifFocusStopRequest& a, OnvifFocusStopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifFocusStopRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifFocusStopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifFocusStopRequest* New() const final {
    return CreateMaybeMessage<OnvifFocusStopRequest>(nullptr);
  }

  OnvifFocusStopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifFocusStopRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifFocusStopRequest& from);
  void MergeFrom(const OnvifFocusStopRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifFocusStopRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifFocusStopRequest";
  }
  protected:
  explicit OnvifFocusStopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifFocusStopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifFocusStopReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifFocusStopReply) */ {
 public:
  inline OnvifFocusStopReply() : OnvifFocusStopReply(nullptr) {};
  virtual ~OnvifFocusStopReply();

  OnvifFocusStopReply(const OnvifFocusStopReply& from);
  OnvifFocusStopReply(OnvifFocusStopReply&& from) noexcept
    : OnvifFocusStopReply() {
    *this = ::std::move(from);
  }

  inline OnvifFocusStopReply& operator=(const OnvifFocusStopReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifFocusStopReply& operator=(OnvifFocusStopReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifFocusStopReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifFocusStopReply* internal_default_instance() {
    return reinterpret_cast<const OnvifFocusStopReply*>(
               &_OnvifFocusStopReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(OnvifFocusStopReply& a, OnvifFocusStopReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifFocusStopReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifFocusStopReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifFocusStopReply* New() const final {
    return CreateMaybeMessage<OnvifFocusStopReply>(nullptr);
  }

  OnvifFocusStopReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifFocusStopReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifFocusStopReply& from);
  void MergeFrom(const OnvifFocusStopReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifFocusStopReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifFocusStopReply";
  }
  protected:
  explicit OnvifFocusStopReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifFocusStopReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifPtz3DRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifPtz3DRequest) */ {
 public:
  inline OnvifPtz3DRequest() : OnvifPtz3DRequest(nullptr) {};
  virtual ~OnvifPtz3DRequest();

  OnvifPtz3DRequest(const OnvifPtz3DRequest& from);
  OnvifPtz3DRequest(OnvifPtz3DRequest&& from) noexcept
    : OnvifPtz3DRequest() {
    *this = ::std::move(from);
  }

  inline OnvifPtz3DRequest& operator=(const OnvifPtz3DRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifPtz3DRequest& operator=(OnvifPtz3DRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifPtz3DRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifPtz3DRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifPtz3DRequest*>(
               &_OnvifPtz3DRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(OnvifPtz3DRequest& a, OnvifPtz3DRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifPtz3DRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifPtz3DRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifPtz3DRequest* New() const final {
    return CreateMaybeMessage<OnvifPtz3DRequest>(nullptr);
  }

  OnvifPtz3DRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifPtz3DRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifPtz3DRequest& from);
  void MergeFrom(const OnvifPtz3DRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifPtz3DRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifPtz3DRequest";
  }
  protected:
  explicit OnvifPtz3DRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
    kX1FieldNumber = 6,
    kY1FieldNumber = 7,
    kX2FieldNumber = 8,
    kY2FieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x1 = 6;
  void clear_x1();
  ::PROTOBUF_NAMESPACE_ID::int32 x1() const;
  void set_x1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x1() const;
  void _internal_set_x1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y1 = 7;
  void clear_y1();
  ::PROTOBUF_NAMESPACE_ID::int32 y1() const;
  void set_y1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y1() const;
  void _internal_set_y1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 x2 = 8;
  void clear_x2();
  ::PROTOBUF_NAMESPACE_ID::int32 x2() const;
  void set_x2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_x2() const;
  void _internal_set_x2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 y2 = 9;
  void clear_y2();
  ::PROTOBUF_NAMESPACE_ID::int32 y2() const;
  void set_y2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_y2() const;
  void _internal_set_y2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 width = 10;
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::int32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 height = 11;
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::int32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifPtz3DRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 x1_;
  ::PROTOBUF_NAMESPACE_ID::int32 y1_;
  ::PROTOBUF_NAMESPACE_ID::int32 x2_;
  ::PROTOBUF_NAMESPACE_ID::int32 y2_;
  ::PROTOBUF_NAMESPACE_ID::int32 width_;
  ::PROTOBUF_NAMESPACE_ID::int32 height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifPtz3DReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifPtz3DReply) */ {
 public:
  inline OnvifPtz3DReply() : OnvifPtz3DReply(nullptr) {};
  virtual ~OnvifPtz3DReply();

  OnvifPtz3DReply(const OnvifPtz3DReply& from);
  OnvifPtz3DReply(OnvifPtz3DReply&& from) noexcept
    : OnvifPtz3DReply() {
    *this = ::std::move(from);
  }

  inline OnvifPtz3DReply& operator=(const OnvifPtz3DReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifPtz3DReply& operator=(OnvifPtz3DReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifPtz3DReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifPtz3DReply* internal_default_instance() {
    return reinterpret_cast<const OnvifPtz3DReply*>(
               &_OnvifPtz3DReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(OnvifPtz3DReply& a, OnvifPtz3DReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifPtz3DReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifPtz3DReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifPtz3DReply* New() const final {
    return CreateMaybeMessage<OnvifPtz3DReply>(nullptr);
  }

  OnvifPtz3DReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifPtz3DReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifPtz3DReply& from);
  void MergeFrom(const OnvifPtz3DReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifPtz3DReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifPtz3DReply";
  }
  protected:
  explicit OnvifPtz3DReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifPtz3DReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifPresetInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifPresetInfo) */ {
 public:
  inline OnvifPresetInfo() : OnvifPresetInfo(nullptr) {};
  virtual ~OnvifPresetInfo();

  OnvifPresetInfo(const OnvifPresetInfo& from);
  OnvifPresetInfo(OnvifPresetInfo&& from) noexcept
    : OnvifPresetInfo() {
    *this = ::std::move(from);
  }

  inline OnvifPresetInfo& operator=(const OnvifPresetInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifPresetInfo& operator=(OnvifPresetInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifPresetInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifPresetInfo* internal_default_instance() {
    return reinterpret_cast<const OnvifPresetInfo*>(
               &_OnvifPresetInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(OnvifPresetInfo& a, OnvifPresetInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifPresetInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifPresetInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifPresetInfo* New() const final {
    return CreateMaybeMessage<OnvifPresetInfo>(nullptr);
  }

  OnvifPresetInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifPresetInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifPresetInfo& from);
  void MergeFrom(const OnvifPresetInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifPresetInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifPresetInfo";
  }
  protected:
  explicit OnvifPresetInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreTokenFieldNumber = 1,
    kPreNameFieldNumber = 2,
  };
  // bytes preToken = 1;
  void clear_pretoken();
  const std::string& pretoken() const;
  void set_pretoken(const std::string& value);
  void set_pretoken(std::string&& value);
  void set_pretoken(const char* value);
  void set_pretoken(const void* value, size_t size);
  std::string* mutable_pretoken();
  std::string* release_pretoken();
  void set_allocated_pretoken(std::string* pretoken);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pretoken();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pretoken(
      std::string* pretoken);
  private:
  const std::string& _internal_pretoken() const;
  void _internal_set_pretoken(const std::string& value);
  std::string* _internal_mutable_pretoken();
  public:

  // bytes preName = 2;
  void clear_prename();
  const std::string& prename() const;
  void set_prename(const std::string& value);
  void set_prename(std::string&& value);
  void set_prename(const char* value);
  void set_prename(const void* value, size_t size);
  std::string* mutable_prename();
  std::string* release_prename();
  void set_allocated_prename(std::string* prename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prename(
      std::string* prename);
  private:
  const std::string& _internal_prename() const;
  void _internal_set_prename(const std::string& value);
  std::string* _internal_mutable_prename();
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifPresetInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pretoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifGetPresetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifGetPresetRequest) */ {
 public:
  inline OnvifGetPresetRequest() : OnvifGetPresetRequest(nullptr) {};
  virtual ~OnvifGetPresetRequest();

  OnvifGetPresetRequest(const OnvifGetPresetRequest& from);
  OnvifGetPresetRequest(OnvifGetPresetRequest&& from) noexcept
    : OnvifGetPresetRequest() {
    *this = ::std::move(from);
  }

  inline OnvifGetPresetRequest& operator=(const OnvifGetPresetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifGetPresetRequest& operator=(OnvifGetPresetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifGetPresetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifGetPresetRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifGetPresetRequest*>(
               &_OnvifGetPresetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(OnvifGetPresetRequest& a, OnvifGetPresetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifGetPresetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifGetPresetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifGetPresetRequest* New() const final {
    return CreateMaybeMessage<OnvifGetPresetRequest>(nullptr);
  }

  OnvifGetPresetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifGetPresetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifGetPresetRequest& from);
  void MergeFrom(const OnvifGetPresetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifGetPresetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifGetPresetRequest";
  }
  protected:
  explicit OnvifGetPresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifGetPresetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifGetPresetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifGetPresetReply) */ {
 public:
  inline OnvifGetPresetReply() : OnvifGetPresetReply(nullptr) {};
  virtual ~OnvifGetPresetReply();

  OnvifGetPresetReply(const OnvifGetPresetReply& from);
  OnvifGetPresetReply(OnvifGetPresetReply&& from) noexcept
    : OnvifGetPresetReply() {
    *this = ::std::move(from);
  }

  inline OnvifGetPresetReply& operator=(const OnvifGetPresetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifGetPresetReply& operator=(OnvifGetPresetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifGetPresetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifGetPresetReply* internal_default_instance() {
    return reinterpret_cast<const OnvifGetPresetReply*>(
               &_OnvifGetPresetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(OnvifGetPresetReply& a, OnvifGetPresetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifGetPresetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifGetPresetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifGetPresetReply* New() const final {
    return CreateMaybeMessage<OnvifGetPresetReply>(nullptr);
  }

  OnvifGetPresetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifGetPresetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifGetPresetReply& from);
  void MergeFrom(const OnvifGetPresetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifGetPresetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifGetPresetReply";
  }
  protected:
  explicit OnvifGetPresetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetListFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // repeated .GB28181.OnvifPresetInfo presetList = 1;
  int presetlist_size() const;
  private:
  int _internal_presetlist_size() const;
  public:
  void clear_presetlist();
  ::GB28181::OnvifPresetInfo* mutable_presetlist(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::OnvifPresetInfo >*
      mutable_presetlist();
  private:
  const ::GB28181::OnvifPresetInfo& _internal_presetlist(int index) const;
  ::GB28181::OnvifPresetInfo* _internal_add_presetlist();
  public:
  const ::GB28181::OnvifPresetInfo& presetlist(int index) const;
  ::GB28181::OnvifPresetInfo* add_presetlist();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::OnvifPresetInfo >&
      presetlist() const;

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifGetPresetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::OnvifPresetInfo > presetlist_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifGotoPresetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifGotoPresetRequest) */ {
 public:
  inline OnvifGotoPresetRequest() : OnvifGotoPresetRequest(nullptr) {};
  virtual ~OnvifGotoPresetRequest();

  OnvifGotoPresetRequest(const OnvifGotoPresetRequest& from);
  OnvifGotoPresetRequest(OnvifGotoPresetRequest&& from) noexcept
    : OnvifGotoPresetRequest() {
    *this = ::std::move(from);
  }

  inline OnvifGotoPresetRequest& operator=(const OnvifGotoPresetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifGotoPresetRequest& operator=(OnvifGotoPresetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifGotoPresetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifGotoPresetRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifGotoPresetRequest*>(
               &_OnvifGotoPresetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(OnvifGotoPresetRequest& a, OnvifGotoPresetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifGotoPresetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifGotoPresetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifGotoPresetRequest* New() const final {
    return CreateMaybeMessage<OnvifGotoPresetRequest>(nullptr);
  }

  OnvifGotoPresetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifGotoPresetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifGotoPresetRequest& from);
  void MergeFrom(const OnvifGotoPresetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifGotoPresetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifGotoPresetRequest";
  }
  protected:
  explicit OnvifGotoPresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPreTokenFieldNumber = 6,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bytes preToken = 6;
  void clear_pretoken();
  const std::string& pretoken() const;
  void set_pretoken(const std::string& value);
  void set_pretoken(std::string&& value);
  void set_pretoken(const char* value);
  void set_pretoken(const void* value, size_t size);
  std::string* mutable_pretoken();
  std::string* release_pretoken();
  void set_allocated_pretoken(std::string* pretoken);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pretoken();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pretoken(
      std::string* pretoken);
  private:
  const std::string& _internal_pretoken() const;
  void _internal_set_pretoken(const std::string& value);
  std::string* _internal_mutable_pretoken();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifGotoPresetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pretoken_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifGotoPresetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifGotoPresetReply) */ {
 public:
  inline OnvifGotoPresetReply() : OnvifGotoPresetReply(nullptr) {};
  virtual ~OnvifGotoPresetReply();

  OnvifGotoPresetReply(const OnvifGotoPresetReply& from);
  OnvifGotoPresetReply(OnvifGotoPresetReply&& from) noexcept
    : OnvifGotoPresetReply() {
    *this = ::std::move(from);
  }

  inline OnvifGotoPresetReply& operator=(const OnvifGotoPresetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifGotoPresetReply& operator=(OnvifGotoPresetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifGotoPresetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifGotoPresetReply* internal_default_instance() {
    return reinterpret_cast<const OnvifGotoPresetReply*>(
               &_OnvifGotoPresetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(OnvifGotoPresetReply& a, OnvifGotoPresetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifGotoPresetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifGotoPresetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifGotoPresetReply* New() const final {
    return CreateMaybeMessage<OnvifGotoPresetReply>(nullptr);
  }

  OnvifGotoPresetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifGotoPresetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifGotoPresetReply& from);
  void MergeFrom(const OnvifGotoPresetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifGotoPresetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifGotoPresetReply";
  }
  protected:
  explicit OnvifGotoPresetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifGotoPresetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifSetPresetRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifSetPresetRequest) */ {
 public:
  inline OnvifSetPresetRequest() : OnvifSetPresetRequest(nullptr) {};
  virtual ~OnvifSetPresetRequest();

  OnvifSetPresetRequest(const OnvifSetPresetRequest& from);
  OnvifSetPresetRequest(OnvifSetPresetRequest&& from) noexcept
    : OnvifSetPresetRequest() {
    *this = ::std::move(from);
  }

  inline OnvifSetPresetRequest& operator=(const OnvifSetPresetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifSetPresetRequest& operator=(OnvifSetPresetRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifSetPresetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifSetPresetRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifSetPresetRequest*>(
               &_OnvifSetPresetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(OnvifSetPresetRequest& a, OnvifSetPresetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifSetPresetRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifSetPresetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifSetPresetRequest* New() const final {
    return CreateMaybeMessage<OnvifSetPresetRequest>(nullptr);
  }

  OnvifSetPresetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifSetPresetRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifSetPresetRequest& from);
  void MergeFrom(const OnvifSetPresetRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifSetPresetRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifSetPresetRequest";
  }
  protected:
  explicit OnvifSetPresetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPreTokenFieldNumber = 6,
    kPreNameFieldNumber = 7,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bytes preToken = 6;
  void clear_pretoken();
  const std::string& pretoken() const;
  void set_pretoken(const std::string& value);
  void set_pretoken(std::string&& value);
  void set_pretoken(const char* value);
  void set_pretoken(const void* value, size_t size);
  std::string* mutable_pretoken();
  std::string* release_pretoken();
  void set_allocated_pretoken(std::string* pretoken);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_pretoken();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_pretoken(
      std::string* pretoken);
  private:
  const std::string& _internal_pretoken() const;
  void _internal_set_pretoken(const std::string& value);
  std::string* _internal_mutable_pretoken();
  public:

  // bytes preName = 7;
  void clear_prename();
  const std::string& prename() const;
  void set_prename(const std::string& value);
  void set_prename(std::string&& value);
  void set_prename(const char* value);
  void set_prename(const void* value, size_t size);
  std::string* mutable_prename();
  std::string* release_prename();
  void set_allocated_prename(std::string* prename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_prename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_prename(
      std::string* prename);
  private:
  const std::string& _internal_prename() const;
  void _internal_set_prename(const std::string& value);
  std::string* _internal_mutable_prename();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifSetPresetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pretoken_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prename_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifSetPresetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifSetPresetReply) */ {
 public:
  inline OnvifSetPresetReply() : OnvifSetPresetReply(nullptr) {};
  virtual ~OnvifSetPresetReply();

  OnvifSetPresetReply(const OnvifSetPresetReply& from);
  OnvifSetPresetReply(OnvifSetPresetReply&& from) noexcept
    : OnvifSetPresetReply() {
    *this = ::std::move(from);
  }

  inline OnvifSetPresetReply& operator=(const OnvifSetPresetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifSetPresetReply& operator=(OnvifSetPresetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifSetPresetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifSetPresetReply* internal_default_instance() {
    return reinterpret_cast<const OnvifSetPresetReply*>(
               &_OnvifSetPresetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(OnvifSetPresetReply& a, OnvifSetPresetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifSetPresetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifSetPresetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifSetPresetReply* New() const final {
    return CreateMaybeMessage<OnvifSetPresetReply>(nullptr);
  }

  OnvifSetPresetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifSetPresetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifSetPresetReply& from);
  void MergeFrom(const OnvifSetPresetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifSetPresetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifSetPresetReply";
  }
  protected:
  explicit OnvifSetPresetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifSetPresetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifDeviceRebootRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifDeviceRebootRequest) */ {
 public:
  inline OnvifDeviceRebootRequest() : OnvifDeviceRebootRequest(nullptr) {};
  virtual ~OnvifDeviceRebootRequest();

  OnvifDeviceRebootRequest(const OnvifDeviceRebootRequest& from);
  OnvifDeviceRebootRequest(OnvifDeviceRebootRequest&& from) noexcept
    : OnvifDeviceRebootRequest() {
    *this = ::std::move(from);
  }

  inline OnvifDeviceRebootRequest& operator=(const OnvifDeviceRebootRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifDeviceRebootRequest& operator=(OnvifDeviceRebootRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifDeviceRebootRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifDeviceRebootRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifDeviceRebootRequest*>(
               &_OnvifDeviceRebootRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(OnvifDeviceRebootRequest& a, OnvifDeviceRebootRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifDeviceRebootRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifDeviceRebootRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifDeviceRebootRequest* New() const final {
    return CreateMaybeMessage<OnvifDeviceRebootRequest>(nullptr);
  }

  OnvifDeviceRebootRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifDeviceRebootRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifDeviceRebootRequest& from);
  void MergeFrom(const OnvifDeviceRebootRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifDeviceRebootRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifDeviceRebootRequest";
  }
  protected:
  explicit OnvifDeviceRebootRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifDeviceRebootRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifDeviceRebootReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifDeviceRebootReply) */ {
 public:
  inline OnvifDeviceRebootReply() : OnvifDeviceRebootReply(nullptr) {};
  virtual ~OnvifDeviceRebootReply();

  OnvifDeviceRebootReply(const OnvifDeviceRebootReply& from);
  OnvifDeviceRebootReply(OnvifDeviceRebootReply&& from) noexcept
    : OnvifDeviceRebootReply() {
    *this = ::std::move(from);
  }

  inline OnvifDeviceRebootReply& operator=(const OnvifDeviceRebootReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifDeviceRebootReply& operator=(OnvifDeviceRebootReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifDeviceRebootReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifDeviceRebootReply* internal_default_instance() {
    return reinterpret_cast<const OnvifDeviceRebootReply*>(
               &_OnvifDeviceRebootReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(OnvifDeviceRebootReply& a, OnvifDeviceRebootReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifDeviceRebootReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifDeviceRebootReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifDeviceRebootReply* New() const final {
    return CreateMaybeMessage<OnvifDeviceRebootReply>(nullptr);
  }

  OnvifDeviceRebootReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifDeviceRebootReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifDeviceRebootReply& from);
  void MergeFrom(const OnvifDeviceRebootReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifDeviceRebootReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifDeviceRebootReply";
  }
  protected:
  explicit OnvifDeviceRebootReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 1;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifDeviceRebootReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifGetMainUrlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifGetMainUrlRequest) */ {
 public:
  inline OnvifGetMainUrlRequest() : OnvifGetMainUrlRequest(nullptr) {};
  virtual ~OnvifGetMainUrlRequest();

  OnvifGetMainUrlRequest(const OnvifGetMainUrlRequest& from);
  OnvifGetMainUrlRequest(OnvifGetMainUrlRequest&& from) noexcept
    : OnvifGetMainUrlRequest() {
    *this = ::std::move(from);
  }

  inline OnvifGetMainUrlRequest& operator=(const OnvifGetMainUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifGetMainUrlRequest& operator=(OnvifGetMainUrlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifGetMainUrlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifGetMainUrlRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifGetMainUrlRequest*>(
               &_OnvifGetMainUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(OnvifGetMainUrlRequest& a, OnvifGetMainUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifGetMainUrlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifGetMainUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifGetMainUrlRequest* New() const final {
    return CreateMaybeMessage<OnvifGetMainUrlRequest>(nullptr);
  }

  OnvifGetMainUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifGetMainUrlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifGetMainUrlRequest& from);
  void MergeFrom(const OnvifGetMainUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifGetMainUrlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifGetMainUrlRequest";
  }
  protected:
  explicit OnvifGetMainUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifGetMainUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifGetMainUrlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifGetMainUrlReply) */ {
 public:
  inline OnvifGetMainUrlReply() : OnvifGetMainUrlReply(nullptr) {};
  virtual ~OnvifGetMainUrlReply();

  OnvifGetMainUrlReply(const OnvifGetMainUrlReply& from);
  OnvifGetMainUrlReply(OnvifGetMainUrlReply&& from) noexcept
    : OnvifGetMainUrlReply() {
    *this = ::std::move(from);
  }

  inline OnvifGetMainUrlReply& operator=(const OnvifGetMainUrlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifGetMainUrlReply& operator=(OnvifGetMainUrlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifGetMainUrlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifGetMainUrlReply* internal_default_instance() {
    return reinterpret_cast<const OnvifGetMainUrlReply*>(
               &_OnvifGetMainUrlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(OnvifGetMainUrlReply& a, OnvifGetMainUrlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifGetMainUrlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifGetMainUrlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifGetMainUrlReply* New() const final {
    return CreateMaybeMessage<OnvifGetMainUrlReply>(nullptr);
  }

  OnvifGetMainUrlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifGetMainUrlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifGetMainUrlReply& from);
  void MergeFrom(const OnvifGetMainUrlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifGetMainUrlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifGetMainUrlReply";
  }
  protected:
  explicit OnvifGetMainUrlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifGetMainUrlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifGetSubUrlRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifGetSubUrlRequest) */ {
 public:
  inline OnvifGetSubUrlRequest() : OnvifGetSubUrlRequest(nullptr) {};
  virtual ~OnvifGetSubUrlRequest();

  OnvifGetSubUrlRequest(const OnvifGetSubUrlRequest& from);
  OnvifGetSubUrlRequest(OnvifGetSubUrlRequest&& from) noexcept
    : OnvifGetSubUrlRequest() {
    *this = ::std::move(from);
  }

  inline OnvifGetSubUrlRequest& operator=(const OnvifGetSubUrlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifGetSubUrlRequest& operator=(OnvifGetSubUrlRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifGetSubUrlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifGetSubUrlRequest* internal_default_instance() {
    return reinterpret_cast<const OnvifGetSubUrlRequest*>(
               &_OnvifGetSubUrlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(OnvifGetSubUrlRequest& a, OnvifGetSubUrlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifGetSubUrlRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifGetSubUrlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifGetSubUrlRequest* New() const final {
    return CreateMaybeMessage<OnvifGetSubUrlRequest>(nullptr);
  }

  OnvifGetSubUrlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifGetSubUrlRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifGetSubUrlRequest& from);
  void MergeFrom(const OnvifGetSubUrlRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifGetSubUrlRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifGetSubUrlRequest";
  }
  protected:
  explicit OnvifGetSubUrlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kUserFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kPortFieldNumber = 2,
    kChannelFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ip();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ip(
      std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string user = 3;
  void clear_user();
  const std::string& user() const;
  void set_user(const std::string& value);
  void set_user(std::string&& value);
  void set_user(const char* value);
  void set_user(const char* value, size_t size);
  std::string* mutable_user();
  std::string* release_user();
  void set_allocated_user(std::string* user);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_user();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_user(
      std::string* user);
  private:
  const std::string& _internal_user() const;
  void _internal_set_user(const std::string& value);
  std::string* _internal_mutable_user();
  public:

  // string password = 4;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_password();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_password(
      std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // int32 port = 2;
  void clear_port();
  ::PROTOBUF_NAMESPACE_ID::int32 port() const;
  void set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_port() const;
  void _internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 channel = 5;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifGetSubUrlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::int32 port_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// -------------------------------------------------------------------

class OnvifGetSubUrlReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GB28181.OnvifGetSubUrlReply) */ {
 public:
  inline OnvifGetSubUrlReply() : OnvifGetSubUrlReply(nullptr) {};
  virtual ~OnvifGetSubUrlReply();

  OnvifGetSubUrlReply(const OnvifGetSubUrlReply& from);
  OnvifGetSubUrlReply(OnvifGetSubUrlReply&& from) noexcept
    : OnvifGetSubUrlReply() {
    *this = ::std::move(from);
  }

  inline OnvifGetSubUrlReply& operator=(const OnvifGetSubUrlReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline OnvifGetSubUrlReply& operator=(OnvifGetSubUrlReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OnvifGetSubUrlReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OnvifGetSubUrlReply* internal_default_instance() {
    return reinterpret_cast<const OnvifGetSubUrlReply*>(
               &_OnvifGetSubUrlReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(OnvifGetSubUrlReply& a, OnvifGetSubUrlReply& b) {
    a.Swap(&b);
  }
  inline void Swap(OnvifGetSubUrlReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OnvifGetSubUrlReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OnvifGetSubUrlReply* New() const final {
    return CreateMaybeMessage<OnvifGetSubUrlReply>(nullptr);
  }

  OnvifGetSubUrlReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OnvifGetSubUrlReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OnvifGetSubUrlReply& from);
  void MergeFrom(const OnvifGetSubUrlReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OnvifGetSubUrlReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GB28181.OnvifGetSubUrlReply";
  }
  protected:
  explicit OnvifGetSubUrlReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_gb28181_2eproto);
    return ::descriptor_table_gb28181_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kMsgFieldNumber = 3,
    kCodeFieldNumber = 2,
  };
  // string url = 1;
  void clear_url();
  const std::string& url() const;
  void set_url(const std::string& value);
  void set_url(std::string&& value);
  void set_url(const char* value);
  void set_url(const char* value, size_t size);
  std::string* mutable_url();
  std::string* release_url();
  void set_allocated_url(std::string* url);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_url();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_url(
      std::string* url);
  private:
  const std::string& _internal_url() const;
  void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string msg = 3;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 code = 2;
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::int32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:GB28181.OnvifGetSubUrlReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_gb28181_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PtzCommandRequest

// string mainId = 1;
inline void PtzCommandRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzCommandRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzCommandRequest.mainId)
  return _internal_mainid();
}
inline void PtzCommandRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzCommandRequest.mainId)
}
inline std::string* PtzCommandRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzCommandRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzCommandRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzCommandRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzCommandRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzCommandRequest.mainId)
}
inline void PtzCommandRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzCommandRequest.mainId)
}
inline void PtzCommandRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzCommandRequest.mainId)
}
inline std::string* PtzCommandRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzCommandRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzCommandRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzCommandRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzCommandRequest.mainId)
}
inline std::string* PtzCommandRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzCommandRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzCommandRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzCommandRequest.mainId)
}

// string subId = 2;
inline void PtzCommandRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzCommandRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzCommandRequest.subId)
  return _internal_subid();
}
inline void PtzCommandRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzCommandRequest.subId)
}
inline std::string* PtzCommandRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzCommandRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzCommandRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzCommandRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzCommandRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzCommandRequest.subId)
}
inline void PtzCommandRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzCommandRequest.subId)
}
inline void PtzCommandRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzCommandRequest.subId)
}
inline std::string* PtzCommandRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzCommandRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzCommandRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzCommandRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzCommandRequest.subId)
}
inline std::string* PtzCommandRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzCommandRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzCommandRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzCommandRequest.subId)
}

// int32 speed = 3;
inline void PtzCommandRequest::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzCommandRequest::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzCommandRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzCommandRequest.speed)
  return _internal_speed();
}
inline void PtzCommandRequest::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void PtzCommandRequest::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzCommandRequest.speed)
}

// int32 direction = 4;
inline void PtzCommandRequest::clear_direction() {
  direction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzCommandRequest::_internal_direction() const {
  return direction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzCommandRequest::direction() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzCommandRequest.direction)
  return _internal_direction();
}
inline void PtzCommandRequest::_internal_set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  direction_ = value;
}
inline void PtzCommandRequest::set_direction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzCommandRequest.direction)
}

// -------------------------------------------------------------------

// ControlReply

// int32 code = 1;
inline void ControlReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ControlReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.ControlReply.code)
  return _internal_code();
}
inline void ControlReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ControlReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.ControlReply.code)
}

// string msg = 2;
inline void ControlReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ControlReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.ControlReply.msg)
  return _internal_msg();
}
inline void ControlReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.ControlReply.msg)
}
inline std::string* ControlReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.ControlReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& ControlReply::_internal_msg() const {
  return msg_.Get();
}
inline void ControlReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ControlReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.ControlReply.msg)
}
inline void ControlReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.ControlReply.msg)
}
inline void ControlReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.ControlReply.msg)
}
inline std::string* ControlReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ControlReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.ControlReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ControlReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.ControlReply.msg)
}
inline std::string* ControlReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.ControlReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ControlReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.ControlReply.msg)
}

// -------------------------------------------------------------------

// PtzZoomInRequest

// string mainId = 1;
inline void PtzZoomInRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzZoomInRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomInRequest.mainId)
  return _internal_mainid();
}
inline void PtzZoomInRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomInRequest.mainId)
}
inline std::string* PtzZoomInRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzZoomInRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzZoomInRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzZoomInRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzZoomInRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzZoomInRequest.mainId)
}
inline void PtzZoomInRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzZoomInRequest.mainId)
}
inline void PtzZoomInRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzZoomInRequest.mainId)
}
inline std::string* PtzZoomInRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzZoomInRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzZoomInRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzZoomInRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzZoomInRequest.mainId)
}
inline std::string* PtzZoomInRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzZoomInRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzZoomInRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzZoomInRequest.mainId)
}

// string subId = 2;
inline void PtzZoomInRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzZoomInRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomInRequest.subId)
  return _internal_subid();
}
inline void PtzZoomInRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomInRequest.subId)
}
inline std::string* PtzZoomInRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzZoomInRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzZoomInRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzZoomInRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzZoomInRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzZoomInRequest.subId)
}
inline void PtzZoomInRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzZoomInRequest.subId)
}
inline void PtzZoomInRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzZoomInRequest.subId)
}
inline std::string* PtzZoomInRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzZoomInRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzZoomInRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzZoomInRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzZoomInRequest.subId)
}
inline std::string* PtzZoomInRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzZoomInRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzZoomInRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzZoomInRequest.subId)
}

// int32 speed = 3;
inline void PtzZoomInRequest::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzZoomInRequest::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzZoomInRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomInRequest.speed)
  return _internal_speed();
}
inline void PtzZoomInRequest::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void PtzZoomInRequest::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomInRequest.speed)
}

// -------------------------------------------------------------------

// PtzZoomInReply

// int32 code = 1;
inline void PtzZoomInReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzZoomInReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzZoomInReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomInReply.code)
  return _internal_code();
}
inline void PtzZoomInReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PtzZoomInReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomInReply.code)
}

// string msg = 2;
inline void PtzZoomInReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzZoomInReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomInReply.msg)
  return _internal_msg();
}
inline void PtzZoomInReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomInReply.msg)
}
inline std::string* PtzZoomInReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzZoomInReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PtzZoomInReply::_internal_msg() const {
  return msg_.Get();
}
inline void PtzZoomInReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzZoomInReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzZoomInReply.msg)
}
inline void PtzZoomInReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzZoomInReply.msg)
}
inline void PtzZoomInReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzZoomInReply.msg)
}
inline std::string* PtzZoomInReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzZoomInReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PtzZoomInReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzZoomInReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzZoomInReply.msg)
}
inline std::string* PtzZoomInReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzZoomInReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzZoomInReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzZoomInReply.msg)
}

// -------------------------------------------------------------------

// PtzZoomOutRequest

// string mainId = 1;
inline void PtzZoomOutRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzZoomOutRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomOutRequest.mainId)
  return _internal_mainid();
}
inline void PtzZoomOutRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomOutRequest.mainId)
}
inline std::string* PtzZoomOutRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzZoomOutRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzZoomOutRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzZoomOutRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzZoomOutRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzZoomOutRequest.mainId)
}
inline void PtzZoomOutRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzZoomOutRequest.mainId)
}
inline void PtzZoomOutRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzZoomOutRequest.mainId)
}
inline std::string* PtzZoomOutRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzZoomOutRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzZoomOutRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzZoomOutRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzZoomOutRequest.mainId)
}
inline std::string* PtzZoomOutRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzZoomOutRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzZoomOutRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzZoomOutRequest.mainId)
}

// string subId = 2;
inline void PtzZoomOutRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzZoomOutRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomOutRequest.subId)
  return _internal_subid();
}
inline void PtzZoomOutRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomOutRequest.subId)
}
inline std::string* PtzZoomOutRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzZoomOutRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzZoomOutRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzZoomOutRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzZoomOutRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzZoomOutRequest.subId)
}
inline void PtzZoomOutRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzZoomOutRequest.subId)
}
inline void PtzZoomOutRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzZoomOutRequest.subId)
}
inline std::string* PtzZoomOutRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzZoomOutRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzZoomOutRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzZoomOutRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzZoomOutRequest.subId)
}
inline std::string* PtzZoomOutRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzZoomOutRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzZoomOutRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzZoomOutRequest.subId)
}

// int32 speed = 3;
inline void PtzZoomOutRequest::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzZoomOutRequest::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzZoomOutRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomOutRequest.speed)
  return _internal_speed();
}
inline void PtzZoomOutRequest::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void PtzZoomOutRequest::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomOutRequest.speed)
}

// -------------------------------------------------------------------

// PtzZoomOutReply

// int32 code = 1;
inline void PtzZoomOutReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzZoomOutReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzZoomOutReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomOutReply.code)
  return _internal_code();
}
inline void PtzZoomOutReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PtzZoomOutReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomOutReply.code)
}

// string msg = 2;
inline void PtzZoomOutReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzZoomOutReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzZoomOutReply.msg)
  return _internal_msg();
}
inline void PtzZoomOutReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzZoomOutReply.msg)
}
inline std::string* PtzZoomOutReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzZoomOutReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PtzZoomOutReply::_internal_msg() const {
  return msg_.Get();
}
inline void PtzZoomOutReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzZoomOutReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzZoomOutReply.msg)
}
inline void PtzZoomOutReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzZoomOutReply.msg)
}
inline void PtzZoomOutReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzZoomOutReply.msg)
}
inline std::string* PtzZoomOutReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzZoomOutReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PtzZoomOutReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzZoomOutReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzZoomOutReply.msg)
}
inline std::string* PtzZoomOutReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzZoomOutReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzZoomOutReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzZoomOutReply.msg)
}

// -------------------------------------------------------------------

// PtzStopRequest

// string mainId = 1;
inline void PtzStopRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzStopRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzStopRequest.mainId)
  return _internal_mainid();
}
inline void PtzStopRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzStopRequest.mainId)
}
inline std::string* PtzStopRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzStopRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzStopRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzStopRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzStopRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzStopRequest.mainId)
}
inline void PtzStopRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzStopRequest.mainId)
}
inline void PtzStopRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzStopRequest.mainId)
}
inline std::string* PtzStopRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzStopRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzStopRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzStopRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzStopRequest.mainId)
}
inline std::string* PtzStopRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzStopRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzStopRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzStopRequest.mainId)
}

// string subId = 2;
inline void PtzStopRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzStopRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzStopRequest.subId)
  return _internal_subid();
}
inline void PtzStopRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzStopRequest.subId)
}
inline std::string* PtzStopRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzStopRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzStopRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzStopRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzStopRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzStopRequest.subId)
}
inline void PtzStopRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzStopRequest.subId)
}
inline void PtzStopRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzStopRequest.subId)
}
inline std::string* PtzStopRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzStopRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzStopRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzStopRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzStopRequest.subId)
}
inline std::string* PtzStopRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzStopRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzStopRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzStopRequest.subId)
}

// -------------------------------------------------------------------

// PtzStopReply

// int32 code = 1;
inline void PtzStopReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzStopReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzStopReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzStopReply.code)
  return _internal_code();
}
inline void PtzStopReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PtzStopReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzStopReply.code)
}

// string msg = 2;
inline void PtzStopReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzStopReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzStopReply.msg)
  return _internal_msg();
}
inline void PtzStopReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzStopReply.msg)
}
inline std::string* PtzStopReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzStopReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PtzStopReply::_internal_msg() const {
  return msg_.Get();
}
inline void PtzStopReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzStopReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzStopReply.msg)
}
inline void PtzStopReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzStopReply.msg)
}
inline void PtzStopReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzStopReply.msg)
}
inline std::string* PtzStopReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzStopReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PtzStopReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzStopReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzStopReply.msg)
}
inline std::string* PtzStopReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzStopReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzStopReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzStopReply.msg)
}

// -------------------------------------------------------------------

// PtzIrisBigRequest

// string mainId = 1;
inline void PtzIrisBigRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIrisBigRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisBigRequest.mainId)
  return _internal_mainid();
}
inline void PtzIrisBigRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisBigRequest.mainId)
}
inline std::string* PtzIrisBigRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIrisBigRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzIrisBigRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzIrisBigRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIrisBigRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIrisBigRequest.mainId)
}
inline void PtzIrisBigRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIrisBigRequest.mainId)
}
inline void PtzIrisBigRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIrisBigRequest.mainId)
}
inline std::string* PtzIrisBigRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIrisBigRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIrisBigRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIrisBigRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIrisBigRequest.mainId)
}
inline std::string* PtzIrisBigRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIrisBigRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIrisBigRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIrisBigRequest.mainId)
}

// string subId = 2;
inline void PtzIrisBigRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIrisBigRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisBigRequest.subId)
  return _internal_subid();
}
inline void PtzIrisBigRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisBigRequest.subId)
}
inline std::string* PtzIrisBigRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIrisBigRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzIrisBigRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzIrisBigRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIrisBigRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIrisBigRequest.subId)
}
inline void PtzIrisBigRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIrisBigRequest.subId)
}
inline void PtzIrisBigRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIrisBigRequest.subId)
}
inline std::string* PtzIrisBigRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIrisBigRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIrisBigRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIrisBigRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIrisBigRequest.subId)
}
inline std::string* PtzIrisBigRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIrisBigRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIrisBigRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIrisBigRequest.subId)
}

// int32 speed = 3;
inline void PtzIrisBigRequest::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIrisBigRequest::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIrisBigRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisBigRequest.speed)
  return _internal_speed();
}
inline void PtzIrisBigRequest::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void PtzIrisBigRequest::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisBigRequest.speed)
}

// -------------------------------------------------------------------

// PtzIrisBigReply

// int32 code = 1;
inline void PtzIrisBigReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIrisBigReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIrisBigReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisBigReply.code)
  return _internal_code();
}
inline void PtzIrisBigReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PtzIrisBigReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisBigReply.code)
}

// string msg = 2;
inline void PtzIrisBigReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIrisBigReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisBigReply.msg)
  return _internal_msg();
}
inline void PtzIrisBigReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisBigReply.msg)
}
inline std::string* PtzIrisBigReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIrisBigReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PtzIrisBigReply::_internal_msg() const {
  return msg_.Get();
}
inline void PtzIrisBigReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIrisBigReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIrisBigReply.msg)
}
inline void PtzIrisBigReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIrisBigReply.msg)
}
inline void PtzIrisBigReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIrisBigReply.msg)
}
inline std::string* PtzIrisBigReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIrisBigReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIrisBigReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIrisBigReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIrisBigReply.msg)
}
inline std::string* PtzIrisBigReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIrisBigReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIrisBigReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIrisBigReply.msg)
}

// -------------------------------------------------------------------

// PtzIrisSmallRequest

// string mainId = 1;
inline void PtzIrisSmallRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIrisSmallRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisSmallRequest.mainId)
  return _internal_mainid();
}
inline void PtzIrisSmallRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisSmallRequest.mainId)
}
inline std::string* PtzIrisSmallRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIrisSmallRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzIrisSmallRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzIrisSmallRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIrisSmallRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIrisSmallRequest.mainId)
}
inline void PtzIrisSmallRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIrisSmallRequest.mainId)
}
inline void PtzIrisSmallRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIrisSmallRequest.mainId)
}
inline std::string* PtzIrisSmallRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIrisSmallRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIrisSmallRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIrisSmallRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIrisSmallRequest.mainId)
}
inline std::string* PtzIrisSmallRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIrisSmallRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIrisSmallRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIrisSmallRequest.mainId)
}

// string subId = 2;
inline void PtzIrisSmallRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIrisSmallRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisSmallRequest.subId)
  return _internal_subid();
}
inline void PtzIrisSmallRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisSmallRequest.subId)
}
inline std::string* PtzIrisSmallRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIrisSmallRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzIrisSmallRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzIrisSmallRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIrisSmallRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIrisSmallRequest.subId)
}
inline void PtzIrisSmallRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIrisSmallRequest.subId)
}
inline void PtzIrisSmallRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIrisSmallRequest.subId)
}
inline std::string* PtzIrisSmallRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIrisSmallRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIrisSmallRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIrisSmallRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIrisSmallRequest.subId)
}
inline std::string* PtzIrisSmallRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIrisSmallRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIrisSmallRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIrisSmallRequest.subId)
}

// int32 speed = 3;
inline void PtzIrisSmallRequest::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIrisSmallRequest::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIrisSmallRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisSmallRequest.speed)
  return _internal_speed();
}
inline void PtzIrisSmallRequest::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void PtzIrisSmallRequest::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisSmallRequest.speed)
}

// -------------------------------------------------------------------

// PtzIrisSmallReply

// int32 code = 1;
inline void PtzIrisSmallReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIrisSmallReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIrisSmallReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisSmallReply.code)
  return _internal_code();
}
inline void PtzIrisSmallReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PtzIrisSmallReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisSmallReply.code)
}

// string msg = 2;
inline void PtzIrisSmallReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIrisSmallReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIrisSmallReply.msg)
  return _internal_msg();
}
inline void PtzIrisSmallReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIrisSmallReply.msg)
}
inline std::string* PtzIrisSmallReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIrisSmallReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PtzIrisSmallReply::_internal_msg() const {
  return msg_.Get();
}
inline void PtzIrisSmallReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIrisSmallReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIrisSmallReply.msg)
}
inline void PtzIrisSmallReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIrisSmallReply.msg)
}
inline void PtzIrisSmallReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIrisSmallReply.msg)
}
inline std::string* PtzIrisSmallReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIrisSmallReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIrisSmallReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIrisSmallReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIrisSmallReply.msg)
}
inline std::string* PtzIrisSmallReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIrisSmallReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIrisSmallReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIrisSmallReply.msg)
}

// -------------------------------------------------------------------

// PtzFocusOutRequest

// string mainId = 1;
inline void PtzFocusOutRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzFocusOutRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusOutRequest.mainId)
  return _internal_mainid();
}
inline void PtzFocusOutRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusOutRequest.mainId)
}
inline std::string* PtzFocusOutRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzFocusOutRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzFocusOutRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzFocusOutRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzFocusOutRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzFocusOutRequest.mainId)
}
inline void PtzFocusOutRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzFocusOutRequest.mainId)
}
inline void PtzFocusOutRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzFocusOutRequest.mainId)
}
inline std::string* PtzFocusOutRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzFocusOutRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzFocusOutRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzFocusOutRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzFocusOutRequest.mainId)
}
inline std::string* PtzFocusOutRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzFocusOutRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzFocusOutRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzFocusOutRequest.mainId)
}

// string subId = 2;
inline void PtzFocusOutRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzFocusOutRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusOutRequest.subId)
  return _internal_subid();
}
inline void PtzFocusOutRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusOutRequest.subId)
}
inline std::string* PtzFocusOutRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzFocusOutRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzFocusOutRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzFocusOutRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzFocusOutRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzFocusOutRequest.subId)
}
inline void PtzFocusOutRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzFocusOutRequest.subId)
}
inline void PtzFocusOutRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzFocusOutRequest.subId)
}
inline std::string* PtzFocusOutRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzFocusOutRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzFocusOutRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzFocusOutRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzFocusOutRequest.subId)
}
inline std::string* PtzFocusOutRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzFocusOutRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzFocusOutRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzFocusOutRequest.subId)
}

// int32 speed = 3;
inline void PtzFocusOutRequest::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzFocusOutRequest::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzFocusOutRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusOutRequest.speed)
  return _internal_speed();
}
inline void PtzFocusOutRequest::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void PtzFocusOutRequest::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusOutRequest.speed)
}

// -------------------------------------------------------------------

// PtzFocusOutReply

// int32 code = 1;
inline void PtzFocusOutReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzFocusOutReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzFocusOutReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusOutReply.code)
  return _internal_code();
}
inline void PtzFocusOutReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PtzFocusOutReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusOutReply.code)
}

// string msg = 2;
inline void PtzFocusOutReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzFocusOutReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusOutReply.msg)
  return _internal_msg();
}
inline void PtzFocusOutReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusOutReply.msg)
}
inline std::string* PtzFocusOutReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzFocusOutReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PtzFocusOutReply::_internal_msg() const {
  return msg_.Get();
}
inline void PtzFocusOutReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzFocusOutReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzFocusOutReply.msg)
}
inline void PtzFocusOutReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzFocusOutReply.msg)
}
inline void PtzFocusOutReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzFocusOutReply.msg)
}
inline std::string* PtzFocusOutReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzFocusOutReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PtzFocusOutReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzFocusOutReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzFocusOutReply.msg)
}
inline std::string* PtzFocusOutReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzFocusOutReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzFocusOutReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzFocusOutReply.msg)
}

// -------------------------------------------------------------------

// PtzFocusInRequest

// string mainId = 1;
inline void PtzFocusInRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzFocusInRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusInRequest.mainId)
  return _internal_mainid();
}
inline void PtzFocusInRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusInRequest.mainId)
}
inline std::string* PtzFocusInRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzFocusInRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzFocusInRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzFocusInRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzFocusInRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzFocusInRequest.mainId)
}
inline void PtzFocusInRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzFocusInRequest.mainId)
}
inline void PtzFocusInRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzFocusInRequest.mainId)
}
inline std::string* PtzFocusInRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzFocusInRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzFocusInRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzFocusInRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzFocusInRequest.mainId)
}
inline std::string* PtzFocusInRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzFocusInRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzFocusInRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzFocusInRequest.mainId)
}

// string subId = 2;
inline void PtzFocusInRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzFocusInRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusInRequest.subId)
  return _internal_subid();
}
inline void PtzFocusInRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusInRequest.subId)
}
inline std::string* PtzFocusInRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzFocusInRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzFocusInRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzFocusInRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzFocusInRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzFocusInRequest.subId)
}
inline void PtzFocusInRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzFocusInRequest.subId)
}
inline void PtzFocusInRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzFocusInRequest.subId)
}
inline std::string* PtzFocusInRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzFocusInRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzFocusInRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzFocusInRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzFocusInRequest.subId)
}
inline std::string* PtzFocusInRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzFocusInRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzFocusInRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzFocusInRequest.subId)
}

// int32 speed = 3;
inline void PtzFocusInRequest::clear_speed() {
  speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzFocusInRequest::_internal_speed() const {
  return speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzFocusInRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusInRequest.speed)
  return _internal_speed();
}
inline void PtzFocusInRequest::_internal_set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  speed_ = value;
}
inline void PtzFocusInRequest::set_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusInRequest.speed)
}

// -------------------------------------------------------------------

// PtzFocusInReply

// int32 code = 1;
inline void PtzFocusInReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzFocusInReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzFocusInReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusInReply.code)
  return _internal_code();
}
inline void PtzFocusInReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PtzFocusInReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusInReply.code)
}

// string msg = 2;
inline void PtzFocusInReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzFocusInReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzFocusInReply.msg)
  return _internal_msg();
}
inline void PtzFocusInReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzFocusInReply.msg)
}
inline std::string* PtzFocusInReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzFocusInReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PtzFocusInReply::_internal_msg() const {
  return msg_.Get();
}
inline void PtzFocusInReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzFocusInReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzFocusInReply.msg)
}
inline void PtzFocusInReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzFocusInReply.msg)
}
inline void PtzFocusInReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzFocusInReply.msg)
}
inline std::string* PtzFocusInReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzFocusInReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PtzFocusInReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzFocusInReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzFocusInReply.msg)
}
inline std::string* PtzFocusInReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzFocusInReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzFocusInReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzFocusInReply.msg)
}

// -------------------------------------------------------------------

// PtzIFStopRequest

// string mainId = 1;
inline void PtzIFStopRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIFStopRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIFStopRequest.mainId)
  return _internal_mainid();
}
inline void PtzIFStopRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIFStopRequest.mainId)
}
inline std::string* PtzIFStopRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIFStopRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PtzIFStopRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PtzIFStopRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIFStopRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIFStopRequest.mainId)
}
inline void PtzIFStopRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIFStopRequest.mainId)
}
inline void PtzIFStopRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIFStopRequest.mainId)
}
inline std::string* PtzIFStopRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIFStopRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIFStopRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIFStopRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIFStopRequest.mainId)
}
inline std::string* PtzIFStopRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIFStopRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIFStopRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIFStopRequest.mainId)
}

// string subId = 2;
inline void PtzIFStopRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIFStopRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIFStopRequest.subId)
  return _internal_subid();
}
inline void PtzIFStopRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIFStopRequest.subId)
}
inline std::string* PtzIFStopRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIFStopRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PtzIFStopRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PtzIFStopRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIFStopRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIFStopRequest.subId)
}
inline void PtzIFStopRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIFStopRequest.subId)
}
inline void PtzIFStopRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIFStopRequest.subId)
}
inline std::string* PtzIFStopRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIFStopRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIFStopRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIFStopRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIFStopRequest.subId)
}
inline std::string* PtzIFStopRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIFStopRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIFStopRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIFStopRequest.subId)
}

// -------------------------------------------------------------------

// PtzIFStopReply

// int32 code = 1;
inline void PtzIFStopReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIFStopReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PtzIFStopReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIFStopReply.code)
  return _internal_code();
}
inline void PtzIFStopReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PtzIFStopReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIFStopReply.code)
}

// string msg = 2;
inline void PtzIFStopReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PtzIFStopReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PtzIFStopReply.msg)
  return _internal_msg();
}
inline void PtzIFStopReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PtzIFStopReply.msg)
}
inline std::string* PtzIFStopReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PtzIFStopReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PtzIFStopReply::_internal_msg() const {
  return msg_.Get();
}
inline void PtzIFStopReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PtzIFStopReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PtzIFStopReply.msg)
}
inline void PtzIFStopReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PtzIFStopReply.msg)
}
inline void PtzIFStopReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PtzIFStopReply.msg)
}
inline std::string* PtzIFStopReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PtzIFStopReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PtzIFStopReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PtzIFStopReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PtzIFStopReply.msg)
}
inline std::string* PtzIFStopReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PtzIFStopReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PtzIFStopReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PtzIFStopReply.msg)
}

// -------------------------------------------------------------------

// RealPlayUrlRequest

// string mainId = 1;
inline void RealPlayUrlRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealPlayUrlRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlRequest.mainId)
  return _internal_mainid();
}
inline void RealPlayUrlRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlRequest.mainId)
}
inline std::string* RealPlayUrlRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.RealPlayUrlRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& RealPlayUrlRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void RealPlayUrlRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealPlayUrlRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RealPlayUrlRequest.mainId)
}
inline void RealPlayUrlRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RealPlayUrlRequest.mainId)
}
inline void RealPlayUrlRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RealPlayUrlRequest.mainId)
}
inline std::string* RealPlayUrlRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealPlayUrlRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.RealPlayUrlRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealPlayUrlRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RealPlayUrlRequest.mainId)
}
inline std::string* RealPlayUrlRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RealPlayUrlRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealPlayUrlRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RealPlayUrlRequest.mainId)
}

// string subId = 2;
inline void RealPlayUrlRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealPlayUrlRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlRequest.subId)
  return _internal_subid();
}
inline void RealPlayUrlRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlRequest.subId)
}
inline std::string* RealPlayUrlRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.RealPlayUrlRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& RealPlayUrlRequest::_internal_subid() const {
  return subid_.Get();
}
inline void RealPlayUrlRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealPlayUrlRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RealPlayUrlRequest.subId)
}
inline void RealPlayUrlRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RealPlayUrlRequest.subId)
}
inline void RealPlayUrlRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RealPlayUrlRequest.subId)
}
inline std::string* RealPlayUrlRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealPlayUrlRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.RealPlayUrlRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealPlayUrlRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RealPlayUrlRequest.subId)
}
inline std::string* RealPlayUrlRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RealPlayUrlRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealPlayUrlRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RealPlayUrlRequest.subId)
}

// int32 isTcp = 3;
inline void RealPlayUrlRequest::clear_istcp() {
  istcp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealPlayUrlRequest::_internal_istcp() const {
  return istcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealPlayUrlRequest::istcp() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlRequest.isTcp)
  return _internal_istcp();
}
inline void RealPlayUrlRequest::_internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istcp_ = value;
}
inline void RealPlayUrlRequest::set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istcp(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlRequest.isTcp)
}

// -------------------------------------------------------------------

// RealPlayUrlReply

// int32 code = 1;
inline void RealPlayUrlReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealPlayUrlReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealPlayUrlReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlReply.code)
  return _internal_code();
}
inline void RealPlayUrlReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void RealPlayUrlReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlReply.code)
}

// string url = 2;
inline void RealPlayUrlReply::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealPlayUrlReply::url() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlReply.url)
  return _internal_url();
}
inline void RealPlayUrlReply::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlReply.url)
}
inline std::string* RealPlayUrlReply::mutable_url() {
  // @@protoc_insertion_point(field_mutable:GB28181.RealPlayUrlReply.url)
  return _internal_mutable_url();
}
inline const std::string& RealPlayUrlReply::_internal_url() const {
  return url_.Get();
}
inline void RealPlayUrlReply::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealPlayUrlReply::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RealPlayUrlReply.url)
}
inline void RealPlayUrlReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RealPlayUrlReply.url)
}
inline void RealPlayUrlReply::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RealPlayUrlReply.url)
}
inline std::string* RealPlayUrlReply::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealPlayUrlReply::release_url() {
  // @@protoc_insertion_point(field_release:GB28181.RealPlayUrlReply.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealPlayUrlReply::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RealPlayUrlReply.url)
}
inline std::string* RealPlayUrlReply::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RealPlayUrlReply.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealPlayUrlReply::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RealPlayUrlReply.url)
}

// string msg = 3;
inline void RealPlayUrlReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealPlayUrlReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlReply.msg)
  return _internal_msg();
}
inline void RealPlayUrlReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlReply.msg)
}
inline std::string* RealPlayUrlReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.RealPlayUrlReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& RealPlayUrlReply::_internal_msg() const {
  return msg_.Get();
}
inline void RealPlayUrlReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealPlayUrlReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RealPlayUrlReply.msg)
}
inline void RealPlayUrlReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RealPlayUrlReply.msg)
}
inline void RealPlayUrlReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RealPlayUrlReply.msg)
}
inline std::string* RealPlayUrlReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealPlayUrlReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.RealPlayUrlReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealPlayUrlReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RealPlayUrlReply.msg)
}
inline std::string* RealPlayUrlReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RealPlayUrlReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealPlayUrlReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RealPlayUrlReply.msg)
}

// -------------------------------------------------------------------

// RealPlayUrlInRequest

// string mainId = 1;
inline void RealPlayUrlInRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealPlayUrlInRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlInRequest.mainId)
  return _internal_mainid();
}
inline void RealPlayUrlInRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlInRequest.mainId)
}
inline std::string* RealPlayUrlInRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.RealPlayUrlInRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& RealPlayUrlInRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void RealPlayUrlInRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealPlayUrlInRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RealPlayUrlInRequest.mainId)
}
inline void RealPlayUrlInRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RealPlayUrlInRequest.mainId)
}
inline void RealPlayUrlInRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RealPlayUrlInRequest.mainId)
}
inline std::string* RealPlayUrlInRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealPlayUrlInRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.RealPlayUrlInRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealPlayUrlInRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RealPlayUrlInRequest.mainId)
}
inline std::string* RealPlayUrlInRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RealPlayUrlInRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealPlayUrlInRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RealPlayUrlInRequest.mainId)
}

// string subId = 2;
inline void RealPlayUrlInRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealPlayUrlInRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlInRequest.subId)
  return _internal_subid();
}
inline void RealPlayUrlInRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlInRequest.subId)
}
inline std::string* RealPlayUrlInRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.RealPlayUrlInRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& RealPlayUrlInRequest::_internal_subid() const {
  return subid_.Get();
}
inline void RealPlayUrlInRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealPlayUrlInRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RealPlayUrlInRequest.subId)
}
inline void RealPlayUrlInRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RealPlayUrlInRequest.subId)
}
inline void RealPlayUrlInRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RealPlayUrlInRequest.subId)
}
inline std::string* RealPlayUrlInRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealPlayUrlInRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.RealPlayUrlInRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealPlayUrlInRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RealPlayUrlInRequest.subId)
}
inline std::string* RealPlayUrlInRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RealPlayUrlInRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealPlayUrlInRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RealPlayUrlInRequest.subId)
}

// int32 isTcp = 3;
inline void RealPlayUrlInRequest::clear_istcp() {
  istcp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealPlayUrlInRequest::_internal_istcp() const {
  return istcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealPlayUrlInRequest::istcp() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlInRequest.isTcp)
  return _internal_istcp();
}
inline void RealPlayUrlInRequest::_internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istcp_ = value;
}
inline void RealPlayUrlInRequest::set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istcp(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlInRequest.isTcp)
}

// -------------------------------------------------------------------

// RealPlayUrlInReply

// int32 code = 1;
inline void RealPlayUrlInReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealPlayUrlInReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RealPlayUrlInReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlInReply.code)
  return _internal_code();
}
inline void RealPlayUrlInReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void RealPlayUrlInReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlInReply.code)
}

// string url = 2;
inline void RealPlayUrlInReply::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealPlayUrlInReply::url() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlInReply.url)
  return _internal_url();
}
inline void RealPlayUrlInReply::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlInReply.url)
}
inline std::string* RealPlayUrlInReply::mutable_url() {
  // @@protoc_insertion_point(field_mutable:GB28181.RealPlayUrlInReply.url)
  return _internal_mutable_url();
}
inline const std::string& RealPlayUrlInReply::_internal_url() const {
  return url_.Get();
}
inline void RealPlayUrlInReply::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealPlayUrlInReply::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RealPlayUrlInReply.url)
}
inline void RealPlayUrlInReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RealPlayUrlInReply.url)
}
inline void RealPlayUrlInReply::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RealPlayUrlInReply.url)
}
inline std::string* RealPlayUrlInReply::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealPlayUrlInReply::release_url() {
  // @@protoc_insertion_point(field_release:GB28181.RealPlayUrlInReply.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealPlayUrlInReply::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RealPlayUrlInReply.url)
}
inline std::string* RealPlayUrlInReply::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RealPlayUrlInReply.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealPlayUrlInReply::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RealPlayUrlInReply.url)
}

// string msg = 3;
inline void RealPlayUrlInReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RealPlayUrlInReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.RealPlayUrlInReply.msg)
  return _internal_msg();
}
inline void RealPlayUrlInReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.RealPlayUrlInReply.msg)
}
inline std::string* RealPlayUrlInReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.RealPlayUrlInReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& RealPlayUrlInReply::_internal_msg() const {
  return msg_.Get();
}
inline void RealPlayUrlInReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RealPlayUrlInReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RealPlayUrlInReply.msg)
}
inline void RealPlayUrlInReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RealPlayUrlInReply.msg)
}
inline void RealPlayUrlInReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RealPlayUrlInReply.msg)
}
inline std::string* RealPlayUrlInReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RealPlayUrlInReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.RealPlayUrlInReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RealPlayUrlInReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RealPlayUrlInReply.msg)
}
inline std::string* RealPlayUrlInReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RealPlayUrlInReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RealPlayUrlInReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RealPlayUrlInReply.msg)
}

// -------------------------------------------------------------------

// GetRTMPUrlRequest

// string mainId = 1;
inline void GetRTMPUrlRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRTMPUrlRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlRequest.mainId)
  return _internal_mainid();
}
inline void GetRTMPUrlRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlRequest.mainId)
}
inline std::string* GetRTMPUrlRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRTMPUrlRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& GetRTMPUrlRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void GetRTMPUrlRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRTMPUrlRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRTMPUrlRequest.mainId)
}
inline void GetRTMPUrlRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRTMPUrlRequest.mainId)
}
inline void GetRTMPUrlRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRTMPUrlRequest.mainId)
}
inline std::string* GetRTMPUrlRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRTMPUrlRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.GetRTMPUrlRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRTMPUrlRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRTMPUrlRequest.mainId)
}
inline std::string* GetRTMPUrlRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRTMPUrlRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRTMPUrlRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRTMPUrlRequest.mainId)
}

// string subId = 2;
inline void GetRTMPUrlRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRTMPUrlRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlRequest.subId)
  return _internal_subid();
}
inline void GetRTMPUrlRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlRequest.subId)
}
inline std::string* GetRTMPUrlRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRTMPUrlRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& GetRTMPUrlRequest::_internal_subid() const {
  return subid_.Get();
}
inline void GetRTMPUrlRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRTMPUrlRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRTMPUrlRequest.subId)
}
inline void GetRTMPUrlRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRTMPUrlRequest.subId)
}
inline void GetRTMPUrlRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRTMPUrlRequest.subId)
}
inline std::string* GetRTMPUrlRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRTMPUrlRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.GetRTMPUrlRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRTMPUrlRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRTMPUrlRequest.subId)
}
inline std::string* GetRTMPUrlRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRTMPUrlRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRTMPUrlRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRTMPUrlRequest.subId)
}

// int32 isTcp = 3;
inline void GetRTMPUrlRequest::clear_istcp() {
  istcp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRTMPUrlRequest::_internal_istcp() const {
  return istcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRTMPUrlRequest::istcp() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlRequest.isTcp)
  return _internal_istcp();
}
inline void GetRTMPUrlRequest::_internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istcp_ = value;
}
inline void GetRTMPUrlRequest::set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istcp(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlRequest.isTcp)
}

// -------------------------------------------------------------------

// GetRTMPUrlReply

// string url = 1;
inline void GetRTMPUrlReply::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRTMPUrlReply::url() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlReply.url)
  return _internal_url();
}
inline void GetRTMPUrlReply::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlReply.url)
}
inline std::string* GetRTMPUrlReply::mutable_url() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRTMPUrlReply.url)
  return _internal_mutable_url();
}
inline const std::string& GetRTMPUrlReply::_internal_url() const {
  return url_.Get();
}
inline void GetRTMPUrlReply::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRTMPUrlReply::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRTMPUrlReply.url)
}
inline void GetRTMPUrlReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRTMPUrlReply.url)
}
inline void GetRTMPUrlReply::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRTMPUrlReply.url)
}
inline std::string* GetRTMPUrlReply::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRTMPUrlReply::release_url() {
  // @@protoc_insertion_point(field_release:GB28181.GetRTMPUrlReply.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRTMPUrlReply::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRTMPUrlReply.url)
}
inline std::string* GetRTMPUrlReply::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRTMPUrlReply.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRTMPUrlReply::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRTMPUrlReply.url)
}

// int32 code = 2;
inline void GetRTMPUrlReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRTMPUrlReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRTMPUrlReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlReply.code)
  return _internal_code();
}
inline void GetRTMPUrlReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetRTMPUrlReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlReply.code)
}

// string msg = 3;
inline void GetRTMPUrlReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRTMPUrlReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlReply.msg)
  return _internal_msg();
}
inline void GetRTMPUrlReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlReply.msg)
}
inline std::string* GetRTMPUrlReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRTMPUrlReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetRTMPUrlReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetRTMPUrlReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRTMPUrlReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRTMPUrlReply.msg)
}
inline void GetRTMPUrlReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRTMPUrlReply.msg)
}
inline void GetRTMPUrlReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRTMPUrlReply.msg)
}
inline std::string* GetRTMPUrlReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRTMPUrlReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetRTMPUrlReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRTMPUrlReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRTMPUrlReply.msg)
}
inline std::string* GetRTMPUrlReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRTMPUrlReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRTMPUrlReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRTMPUrlReply.msg)
}

// -------------------------------------------------------------------

// GetRTMPUrlInRequest

// string mainId = 1;
inline void GetRTMPUrlInRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRTMPUrlInRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlInRequest.mainId)
  return _internal_mainid();
}
inline void GetRTMPUrlInRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlInRequest.mainId)
}
inline std::string* GetRTMPUrlInRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRTMPUrlInRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& GetRTMPUrlInRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void GetRTMPUrlInRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRTMPUrlInRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRTMPUrlInRequest.mainId)
}
inline void GetRTMPUrlInRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRTMPUrlInRequest.mainId)
}
inline void GetRTMPUrlInRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRTMPUrlInRequest.mainId)
}
inline std::string* GetRTMPUrlInRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRTMPUrlInRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.GetRTMPUrlInRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRTMPUrlInRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRTMPUrlInRequest.mainId)
}
inline std::string* GetRTMPUrlInRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRTMPUrlInRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRTMPUrlInRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRTMPUrlInRequest.mainId)
}

// string subId = 2;
inline void GetRTMPUrlInRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRTMPUrlInRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlInRequest.subId)
  return _internal_subid();
}
inline void GetRTMPUrlInRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlInRequest.subId)
}
inline std::string* GetRTMPUrlInRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRTMPUrlInRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& GetRTMPUrlInRequest::_internal_subid() const {
  return subid_.Get();
}
inline void GetRTMPUrlInRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRTMPUrlInRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRTMPUrlInRequest.subId)
}
inline void GetRTMPUrlInRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRTMPUrlInRequest.subId)
}
inline void GetRTMPUrlInRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRTMPUrlInRequest.subId)
}
inline std::string* GetRTMPUrlInRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRTMPUrlInRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.GetRTMPUrlInRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRTMPUrlInRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRTMPUrlInRequest.subId)
}
inline std::string* GetRTMPUrlInRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRTMPUrlInRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRTMPUrlInRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRTMPUrlInRequest.subId)
}

// int32 isTcp = 3;
inline void GetRTMPUrlInRequest::clear_istcp() {
  istcp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRTMPUrlInRequest::_internal_istcp() const {
  return istcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRTMPUrlInRequest::istcp() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlInRequest.isTcp)
  return _internal_istcp();
}
inline void GetRTMPUrlInRequest::_internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istcp_ = value;
}
inline void GetRTMPUrlInRequest::set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istcp(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlInRequest.isTcp)
}

// -------------------------------------------------------------------

// GetRTMPUrlInReply

// string url = 1;
inline void GetRTMPUrlInReply::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRTMPUrlInReply::url() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlInReply.url)
  return _internal_url();
}
inline void GetRTMPUrlInReply::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlInReply.url)
}
inline std::string* GetRTMPUrlInReply::mutable_url() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRTMPUrlInReply.url)
  return _internal_mutable_url();
}
inline const std::string& GetRTMPUrlInReply::_internal_url() const {
  return url_.Get();
}
inline void GetRTMPUrlInReply::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRTMPUrlInReply::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRTMPUrlInReply.url)
}
inline void GetRTMPUrlInReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRTMPUrlInReply.url)
}
inline void GetRTMPUrlInReply::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRTMPUrlInReply.url)
}
inline std::string* GetRTMPUrlInReply::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRTMPUrlInReply::release_url() {
  // @@protoc_insertion_point(field_release:GB28181.GetRTMPUrlInReply.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRTMPUrlInReply::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRTMPUrlInReply.url)
}
inline std::string* GetRTMPUrlInReply::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRTMPUrlInReply.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRTMPUrlInReply::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRTMPUrlInReply.url)
}

// int32 code = 2;
inline void GetRTMPUrlInReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRTMPUrlInReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRTMPUrlInReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlInReply.code)
  return _internal_code();
}
inline void GetRTMPUrlInReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetRTMPUrlInReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlInReply.code)
}

// string msg = 3;
inline void GetRTMPUrlInReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRTMPUrlInReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRTMPUrlInReply.msg)
  return _internal_msg();
}
inline void GetRTMPUrlInReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRTMPUrlInReply.msg)
}
inline std::string* GetRTMPUrlInReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRTMPUrlInReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetRTMPUrlInReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetRTMPUrlInReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRTMPUrlInReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRTMPUrlInReply.msg)
}
inline void GetRTMPUrlInReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRTMPUrlInReply.msg)
}
inline void GetRTMPUrlInReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRTMPUrlInReply.msg)
}
inline std::string* GetRTMPUrlInReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRTMPUrlInReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetRTMPUrlInReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRTMPUrlInReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRTMPUrlInReply.msg)
}
inline std::string* GetRTMPUrlInReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRTMPUrlInReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRTMPUrlInReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRTMPUrlInReply.msg)
}

// -------------------------------------------------------------------

// GetHLSUrlRequest

// string mainId = 1;
inline void GetHLSUrlRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHLSUrlRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlRequest.mainId)
  return _internal_mainid();
}
inline void GetHLSUrlRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlRequest.mainId)
}
inline std::string* GetHLSUrlRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetHLSUrlRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& GetHLSUrlRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void GetHLSUrlRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHLSUrlRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetHLSUrlRequest.mainId)
}
inline void GetHLSUrlRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetHLSUrlRequest.mainId)
}
inline void GetHLSUrlRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetHLSUrlRequest.mainId)
}
inline std::string* GetHLSUrlRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHLSUrlRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.GetHLSUrlRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHLSUrlRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetHLSUrlRequest.mainId)
}
inline std::string* GetHLSUrlRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetHLSUrlRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetHLSUrlRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetHLSUrlRequest.mainId)
}

// string subId = 2;
inline void GetHLSUrlRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHLSUrlRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlRequest.subId)
  return _internal_subid();
}
inline void GetHLSUrlRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlRequest.subId)
}
inline std::string* GetHLSUrlRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetHLSUrlRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& GetHLSUrlRequest::_internal_subid() const {
  return subid_.Get();
}
inline void GetHLSUrlRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHLSUrlRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetHLSUrlRequest.subId)
}
inline void GetHLSUrlRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetHLSUrlRequest.subId)
}
inline void GetHLSUrlRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetHLSUrlRequest.subId)
}
inline std::string* GetHLSUrlRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHLSUrlRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.GetHLSUrlRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHLSUrlRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetHLSUrlRequest.subId)
}
inline std::string* GetHLSUrlRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetHLSUrlRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetHLSUrlRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetHLSUrlRequest.subId)
}

// int32 isTcp = 3;
inline void GetHLSUrlRequest::clear_istcp() {
  istcp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHLSUrlRequest::_internal_istcp() const {
  return istcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHLSUrlRequest::istcp() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlRequest.isTcp)
  return _internal_istcp();
}
inline void GetHLSUrlRequest::_internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istcp_ = value;
}
inline void GetHLSUrlRequest::set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istcp(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlRequest.isTcp)
}

// -------------------------------------------------------------------

// GetHLSUrlReply

// string url = 1;
inline void GetHLSUrlReply::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHLSUrlReply::url() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlReply.url)
  return _internal_url();
}
inline void GetHLSUrlReply::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlReply.url)
}
inline std::string* GetHLSUrlReply::mutable_url() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetHLSUrlReply.url)
  return _internal_mutable_url();
}
inline const std::string& GetHLSUrlReply::_internal_url() const {
  return url_.Get();
}
inline void GetHLSUrlReply::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHLSUrlReply::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetHLSUrlReply.url)
}
inline void GetHLSUrlReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetHLSUrlReply.url)
}
inline void GetHLSUrlReply::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetHLSUrlReply.url)
}
inline std::string* GetHLSUrlReply::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHLSUrlReply::release_url() {
  // @@protoc_insertion_point(field_release:GB28181.GetHLSUrlReply.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHLSUrlReply::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetHLSUrlReply.url)
}
inline std::string* GetHLSUrlReply::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetHLSUrlReply.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetHLSUrlReply::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetHLSUrlReply.url)
}

// int32 code = 2;
inline void GetHLSUrlReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHLSUrlReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHLSUrlReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlReply.code)
  return _internal_code();
}
inline void GetHLSUrlReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetHLSUrlReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlReply.code)
}

// string msg = 3;
inline void GetHLSUrlReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHLSUrlReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlReply.msg)
  return _internal_msg();
}
inline void GetHLSUrlReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlReply.msg)
}
inline std::string* GetHLSUrlReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetHLSUrlReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetHLSUrlReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetHLSUrlReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHLSUrlReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetHLSUrlReply.msg)
}
inline void GetHLSUrlReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetHLSUrlReply.msg)
}
inline void GetHLSUrlReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetHLSUrlReply.msg)
}
inline std::string* GetHLSUrlReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHLSUrlReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetHLSUrlReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHLSUrlReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetHLSUrlReply.msg)
}
inline std::string* GetHLSUrlReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetHLSUrlReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetHLSUrlReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetHLSUrlReply.msg)
}

// -------------------------------------------------------------------

// GetHLSUrlInRequest

// string mainId = 1;
inline void GetHLSUrlInRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHLSUrlInRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlInRequest.mainId)
  return _internal_mainid();
}
inline void GetHLSUrlInRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlInRequest.mainId)
}
inline std::string* GetHLSUrlInRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetHLSUrlInRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& GetHLSUrlInRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void GetHLSUrlInRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHLSUrlInRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetHLSUrlInRequest.mainId)
}
inline void GetHLSUrlInRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetHLSUrlInRequest.mainId)
}
inline void GetHLSUrlInRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetHLSUrlInRequest.mainId)
}
inline std::string* GetHLSUrlInRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHLSUrlInRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.GetHLSUrlInRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHLSUrlInRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetHLSUrlInRequest.mainId)
}
inline std::string* GetHLSUrlInRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetHLSUrlInRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetHLSUrlInRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetHLSUrlInRequest.mainId)
}

// string subId = 2;
inline void GetHLSUrlInRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHLSUrlInRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlInRequest.subId)
  return _internal_subid();
}
inline void GetHLSUrlInRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlInRequest.subId)
}
inline std::string* GetHLSUrlInRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetHLSUrlInRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& GetHLSUrlInRequest::_internal_subid() const {
  return subid_.Get();
}
inline void GetHLSUrlInRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHLSUrlInRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetHLSUrlInRequest.subId)
}
inline void GetHLSUrlInRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetHLSUrlInRequest.subId)
}
inline void GetHLSUrlInRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetHLSUrlInRequest.subId)
}
inline std::string* GetHLSUrlInRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHLSUrlInRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.GetHLSUrlInRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHLSUrlInRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetHLSUrlInRequest.subId)
}
inline std::string* GetHLSUrlInRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetHLSUrlInRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetHLSUrlInRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetHLSUrlInRequest.subId)
}

// int32 isTcp = 3;
inline void GetHLSUrlInRequest::clear_istcp() {
  istcp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHLSUrlInRequest::_internal_istcp() const {
  return istcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHLSUrlInRequest::istcp() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlInRequest.isTcp)
  return _internal_istcp();
}
inline void GetHLSUrlInRequest::_internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istcp_ = value;
}
inline void GetHLSUrlInRequest::set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istcp(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlInRequest.isTcp)
}

// -------------------------------------------------------------------

// GetHLSUrlInReply

// string url = 1;
inline void GetHLSUrlInReply::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHLSUrlInReply::url() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlInReply.url)
  return _internal_url();
}
inline void GetHLSUrlInReply::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlInReply.url)
}
inline std::string* GetHLSUrlInReply::mutable_url() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetHLSUrlInReply.url)
  return _internal_mutable_url();
}
inline const std::string& GetHLSUrlInReply::_internal_url() const {
  return url_.Get();
}
inline void GetHLSUrlInReply::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHLSUrlInReply::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetHLSUrlInReply.url)
}
inline void GetHLSUrlInReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetHLSUrlInReply.url)
}
inline void GetHLSUrlInReply::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetHLSUrlInReply.url)
}
inline std::string* GetHLSUrlInReply::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHLSUrlInReply::release_url() {
  // @@protoc_insertion_point(field_release:GB28181.GetHLSUrlInReply.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHLSUrlInReply::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetHLSUrlInReply.url)
}
inline std::string* GetHLSUrlInReply::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetHLSUrlInReply.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetHLSUrlInReply::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetHLSUrlInReply.url)
}

// int32 code = 2;
inline void GetHLSUrlInReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHLSUrlInReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetHLSUrlInReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlInReply.code)
  return _internal_code();
}
inline void GetHLSUrlInReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetHLSUrlInReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlInReply.code)
}

// string msg = 3;
inline void GetHLSUrlInReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetHLSUrlInReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetHLSUrlInReply.msg)
  return _internal_msg();
}
inline void GetHLSUrlInReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetHLSUrlInReply.msg)
}
inline std::string* GetHLSUrlInReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetHLSUrlInReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetHLSUrlInReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetHLSUrlInReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetHLSUrlInReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetHLSUrlInReply.msg)
}
inline void GetHLSUrlInReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetHLSUrlInReply.msg)
}
inline void GetHLSUrlInReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetHLSUrlInReply.msg)
}
inline std::string* GetHLSUrlInReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetHLSUrlInReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetHLSUrlInReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetHLSUrlInReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetHLSUrlInReply.msg)
}
inline std::string* GetHLSUrlInReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetHLSUrlInReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetHLSUrlInReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetHLSUrlInReply.msg)
}

// -------------------------------------------------------------------

// StopVideoByIdRequest

// string mainId = 1;
inline void StopVideoByIdRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopVideoByIdRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.StopVideoByIdRequest.mainId)
  return _internal_mainid();
}
inline void StopVideoByIdRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.StopVideoByIdRequest.mainId)
}
inline std::string* StopVideoByIdRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopVideoByIdRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& StopVideoByIdRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void StopVideoByIdRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopVideoByIdRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopVideoByIdRequest.mainId)
}
inline void StopVideoByIdRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopVideoByIdRequest.mainId)
}
inline void StopVideoByIdRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopVideoByIdRequest.mainId)
}
inline std::string* StopVideoByIdRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopVideoByIdRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.StopVideoByIdRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopVideoByIdRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopVideoByIdRequest.mainId)
}
inline std::string* StopVideoByIdRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopVideoByIdRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopVideoByIdRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopVideoByIdRequest.mainId)
}

// string subId = 2;
inline void StopVideoByIdRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopVideoByIdRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.StopVideoByIdRequest.subId)
  return _internal_subid();
}
inline void StopVideoByIdRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.StopVideoByIdRequest.subId)
}
inline std::string* StopVideoByIdRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopVideoByIdRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& StopVideoByIdRequest::_internal_subid() const {
  return subid_.Get();
}
inline void StopVideoByIdRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopVideoByIdRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopVideoByIdRequest.subId)
}
inline void StopVideoByIdRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopVideoByIdRequest.subId)
}
inline void StopVideoByIdRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopVideoByIdRequest.subId)
}
inline std::string* StopVideoByIdRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopVideoByIdRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.StopVideoByIdRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopVideoByIdRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopVideoByIdRequest.subId)
}
inline std::string* StopVideoByIdRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopVideoByIdRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopVideoByIdRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopVideoByIdRequest.subId)
}

// int32 isTcp = 3;
inline void StopVideoByIdRequest::clear_istcp() {
  istcp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopVideoByIdRequest::_internal_istcp() const {
  return istcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopVideoByIdRequest::istcp() const {
  // @@protoc_insertion_point(field_get:GB28181.StopVideoByIdRequest.isTcp)
  return _internal_istcp();
}
inline void StopVideoByIdRequest::_internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istcp_ = value;
}
inline void StopVideoByIdRequest::set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istcp(value);
  // @@protoc_insertion_point(field_set:GB28181.StopVideoByIdRequest.isTcp)
}

// -------------------------------------------------------------------

// StopVideoByIdReply

// int32 code = 1;
inline void StopVideoByIdReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopVideoByIdReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopVideoByIdReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.StopVideoByIdReply.code)
  return _internal_code();
}
inline void StopVideoByIdReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void StopVideoByIdReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.StopVideoByIdReply.code)
}

// string msg = 2;
inline void StopVideoByIdReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopVideoByIdReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.StopVideoByIdReply.msg)
  return _internal_msg();
}
inline void StopVideoByIdReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.StopVideoByIdReply.msg)
}
inline std::string* StopVideoByIdReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopVideoByIdReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& StopVideoByIdReply::_internal_msg() const {
  return msg_.Get();
}
inline void StopVideoByIdReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopVideoByIdReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopVideoByIdReply.msg)
}
inline void StopVideoByIdReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopVideoByIdReply.msg)
}
inline void StopVideoByIdReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopVideoByIdReply.msg)
}
inline std::string* StopVideoByIdReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopVideoByIdReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.StopVideoByIdReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopVideoByIdReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopVideoByIdReply.msg)
}
inline std::string* StopVideoByIdReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopVideoByIdReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopVideoByIdReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopVideoByIdReply.msg)
}

// -------------------------------------------------------------------

// StopVideoBySsrcRequest

// string ssrc = 1;
inline void StopVideoBySsrcRequest::clear_ssrc() {
  ssrc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopVideoBySsrcRequest::ssrc() const {
  // @@protoc_insertion_point(field_get:GB28181.StopVideoBySsrcRequest.ssrc)
  return _internal_ssrc();
}
inline void StopVideoBySsrcRequest::set_ssrc(const std::string& value) {
  _internal_set_ssrc(value);
  // @@protoc_insertion_point(field_set:GB28181.StopVideoBySsrcRequest.ssrc)
}
inline std::string* StopVideoBySsrcRequest::mutable_ssrc() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopVideoBySsrcRequest.ssrc)
  return _internal_mutable_ssrc();
}
inline const std::string& StopVideoBySsrcRequest::_internal_ssrc() const {
  return ssrc_.Get();
}
inline void StopVideoBySsrcRequest::_internal_set_ssrc(const std::string& value) {
  
  ssrc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopVideoBySsrcRequest::set_ssrc(std::string&& value) {
  
  ssrc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopVideoBySsrcRequest.ssrc)
}
inline void StopVideoBySsrcRequest::set_ssrc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssrc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopVideoBySsrcRequest.ssrc)
}
inline void StopVideoBySsrcRequest::set_ssrc(const char* value,
    size_t size) {
  
  ssrc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopVideoBySsrcRequest.ssrc)
}
inline std::string* StopVideoBySsrcRequest::_internal_mutable_ssrc() {
  
  return ssrc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopVideoBySsrcRequest::release_ssrc() {
  // @@protoc_insertion_point(field_release:GB28181.StopVideoBySsrcRequest.ssrc)
  return ssrc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopVideoBySsrcRequest::set_allocated_ssrc(std::string* ssrc) {
  if (ssrc != nullptr) {
    
  } else {
    
  }
  ssrc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssrc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopVideoBySsrcRequest.ssrc)
}
inline std::string* StopVideoBySsrcRequest::unsafe_arena_release_ssrc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopVideoBySsrcRequest.ssrc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ssrc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopVideoBySsrcRequest::unsafe_arena_set_allocated_ssrc(
    std::string* ssrc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ssrc != nullptr) {
    
  } else {
    
  }
  ssrc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ssrc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopVideoBySsrcRequest.ssrc)
}

// -------------------------------------------------------------------

// StopVideoBySsrcReply

// int32 code = 1;
inline void StopVideoBySsrcReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopVideoBySsrcReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopVideoBySsrcReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.StopVideoBySsrcReply.code)
  return _internal_code();
}
inline void StopVideoBySsrcReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void StopVideoBySsrcReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.StopVideoBySsrcReply.code)
}

// string msg = 2;
inline void StopVideoBySsrcReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopVideoBySsrcReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.StopVideoBySsrcReply.msg)
  return _internal_msg();
}
inline void StopVideoBySsrcReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.StopVideoBySsrcReply.msg)
}
inline std::string* StopVideoBySsrcReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopVideoBySsrcReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& StopVideoBySsrcReply::_internal_msg() const {
  return msg_.Get();
}
inline void StopVideoBySsrcReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopVideoBySsrcReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopVideoBySsrcReply.msg)
}
inline void StopVideoBySsrcReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopVideoBySsrcReply.msg)
}
inline void StopVideoBySsrcReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopVideoBySsrcReply.msg)
}
inline std::string* StopVideoBySsrcReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopVideoBySsrcReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.StopVideoBySsrcReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopVideoBySsrcReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopVideoBySsrcReply.msg)
}
inline std::string* StopVideoBySsrcReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopVideoBySsrcReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopVideoBySsrcReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopVideoBySsrcReply.msg)
}

// -------------------------------------------------------------------

// PlayBackUrlRequest

// string mainId = 1;
inline void PlayBackUrlRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayBackUrlRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlRequest.mainId)
  return _internal_mainid();
}
inline void PlayBackUrlRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlRequest.mainId)
}
inline std::string* PlayBackUrlRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayBackUrlRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PlayBackUrlRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PlayBackUrlRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayBackUrlRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayBackUrlRequest.mainId)
}
inline void PlayBackUrlRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayBackUrlRequest.mainId)
}
inline void PlayBackUrlRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayBackUrlRequest.mainId)
}
inline std::string* PlayBackUrlRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayBackUrlRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PlayBackUrlRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayBackUrlRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayBackUrlRequest.mainId)
}
inline std::string* PlayBackUrlRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayBackUrlRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayBackUrlRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayBackUrlRequest.mainId)
}

// string subId = 2;
inline void PlayBackUrlRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayBackUrlRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlRequest.subId)
  return _internal_subid();
}
inline void PlayBackUrlRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlRequest.subId)
}
inline std::string* PlayBackUrlRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayBackUrlRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PlayBackUrlRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PlayBackUrlRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayBackUrlRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayBackUrlRequest.subId)
}
inline void PlayBackUrlRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayBackUrlRequest.subId)
}
inline void PlayBackUrlRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayBackUrlRequest.subId)
}
inline std::string* PlayBackUrlRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayBackUrlRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PlayBackUrlRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayBackUrlRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayBackUrlRequest.subId)
}
inline std::string* PlayBackUrlRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayBackUrlRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayBackUrlRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayBackUrlRequest.subId)
}

// string startTime = 3;
inline void PlayBackUrlRequest::clear_starttime() {
  starttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayBackUrlRequest::starttime() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlRequest.startTime)
  return _internal_starttime();
}
inline void PlayBackUrlRequest::set_starttime(const std::string& value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlRequest.startTime)
}
inline std::string* PlayBackUrlRequest::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayBackUrlRequest.startTime)
  return _internal_mutable_starttime();
}
inline const std::string& PlayBackUrlRequest::_internal_starttime() const {
  return starttime_.Get();
}
inline void PlayBackUrlRequest::_internal_set_starttime(const std::string& value) {
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayBackUrlRequest::set_starttime(std::string&& value) {
  
  starttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayBackUrlRequest.startTime)
}
inline void PlayBackUrlRequest::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayBackUrlRequest.startTime)
}
inline void PlayBackUrlRequest::set_starttime(const char* value,
    size_t size) {
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayBackUrlRequest.startTime)
}
inline std::string* PlayBackUrlRequest::_internal_mutable_starttime() {
  
  return starttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayBackUrlRequest::release_starttime() {
  // @@protoc_insertion_point(field_release:GB28181.PlayBackUrlRequest.startTime)
  return starttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayBackUrlRequest::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayBackUrlRequest.startTime)
}
inline std::string* PlayBackUrlRequest::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayBackUrlRequest.startTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return starttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayBackUrlRequest::unsafe_arena_set_allocated_starttime(
    std::string* starttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      starttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayBackUrlRequest.startTime)
}

// string endTime = 4;
inline void PlayBackUrlRequest::clear_endtime() {
  endtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayBackUrlRequest::endtime() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlRequest.endTime)
  return _internal_endtime();
}
inline void PlayBackUrlRequest::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlRequest.endTime)
}
inline std::string* PlayBackUrlRequest::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayBackUrlRequest.endTime)
  return _internal_mutable_endtime();
}
inline const std::string& PlayBackUrlRequest::_internal_endtime() const {
  return endtime_.Get();
}
inline void PlayBackUrlRequest::_internal_set_endtime(const std::string& value) {
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayBackUrlRequest::set_endtime(std::string&& value) {
  
  endtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayBackUrlRequest.endTime)
}
inline void PlayBackUrlRequest::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayBackUrlRequest.endTime)
}
inline void PlayBackUrlRequest::set_endtime(const char* value,
    size_t size) {
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayBackUrlRequest.endTime)
}
inline std::string* PlayBackUrlRequest::_internal_mutable_endtime() {
  
  return endtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayBackUrlRequest::release_endtime() {
  // @@protoc_insertion_point(field_release:GB28181.PlayBackUrlRequest.endTime)
  return endtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayBackUrlRequest::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayBackUrlRequest.endTime)
}
inline std::string* PlayBackUrlRequest::unsafe_arena_release_endtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayBackUrlRequest.endTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayBackUrlRequest::unsafe_arena_set_allocated_endtime(
    std::string* endtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayBackUrlRequest.endTime)
}

// int32 isTcp = 5;
inline void PlayBackUrlRequest::clear_istcp() {
  istcp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayBackUrlRequest::_internal_istcp() const {
  return istcp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayBackUrlRequest::istcp() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlRequest.isTcp)
  return _internal_istcp();
}
inline void PlayBackUrlRequest::_internal_set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  istcp_ = value;
}
inline void PlayBackUrlRequest::set_istcp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_istcp(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlRequest.isTcp)
}

// -------------------------------------------------------------------

// PlayBackUrlReply

// int32 code = 1;
inline void PlayBackUrlReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayBackUrlReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayBackUrlReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlReply.code)
  return _internal_code();
}
inline void PlayBackUrlReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PlayBackUrlReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlReply.code)
}

// string rtspUrl = 2;
inline void PlayBackUrlReply::clear_rtspurl() {
  rtspurl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayBackUrlReply::rtspurl() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlReply.rtspUrl)
  return _internal_rtspurl();
}
inline void PlayBackUrlReply::set_rtspurl(const std::string& value) {
  _internal_set_rtspurl(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlReply.rtspUrl)
}
inline std::string* PlayBackUrlReply::mutable_rtspurl() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayBackUrlReply.rtspUrl)
  return _internal_mutable_rtspurl();
}
inline const std::string& PlayBackUrlReply::_internal_rtspurl() const {
  return rtspurl_.Get();
}
inline void PlayBackUrlReply::_internal_set_rtspurl(const std::string& value) {
  
  rtspurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayBackUrlReply::set_rtspurl(std::string&& value) {
  
  rtspurl_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayBackUrlReply.rtspUrl)
}
inline void PlayBackUrlReply::set_rtspurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rtspurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayBackUrlReply.rtspUrl)
}
inline void PlayBackUrlReply::set_rtspurl(const char* value,
    size_t size) {
  
  rtspurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayBackUrlReply.rtspUrl)
}
inline std::string* PlayBackUrlReply::_internal_mutable_rtspurl() {
  
  return rtspurl_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayBackUrlReply::release_rtspurl() {
  // @@protoc_insertion_point(field_release:GB28181.PlayBackUrlReply.rtspUrl)
  return rtspurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayBackUrlReply::set_allocated_rtspurl(std::string* rtspurl) {
  if (rtspurl != nullptr) {
    
  } else {
    
  }
  rtspurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rtspurl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayBackUrlReply.rtspUrl)
}
inline std::string* PlayBackUrlReply::unsafe_arena_release_rtspurl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayBackUrlReply.rtspUrl)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rtspurl_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayBackUrlReply::unsafe_arena_set_allocated_rtspurl(
    std::string* rtspurl) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rtspurl != nullptr) {
    
  } else {
    
  }
  rtspurl_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rtspurl, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayBackUrlReply.rtspUrl)
}

// string rtmpUrl = 3;
inline void PlayBackUrlReply::clear_rtmpurl() {
  rtmpurl_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayBackUrlReply::rtmpurl() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlReply.rtmpUrl)
  return _internal_rtmpurl();
}
inline void PlayBackUrlReply::set_rtmpurl(const std::string& value) {
  _internal_set_rtmpurl(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlReply.rtmpUrl)
}
inline std::string* PlayBackUrlReply::mutable_rtmpurl() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayBackUrlReply.rtmpUrl)
  return _internal_mutable_rtmpurl();
}
inline const std::string& PlayBackUrlReply::_internal_rtmpurl() const {
  return rtmpurl_.Get();
}
inline void PlayBackUrlReply::_internal_set_rtmpurl(const std::string& value) {
  
  rtmpurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayBackUrlReply::set_rtmpurl(std::string&& value) {
  
  rtmpurl_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayBackUrlReply.rtmpUrl)
}
inline void PlayBackUrlReply::set_rtmpurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  rtmpurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayBackUrlReply.rtmpUrl)
}
inline void PlayBackUrlReply::set_rtmpurl(const char* value,
    size_t size) {
  
  rtmpurl_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayBackUrlReply.rtmpUrl)
}
inline std::string* PlayBackUrlReply::_internal_mutable_rtmpurl() {
  
  return rtmpurl_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayBackUrlReply::release_rtmpurl() {
  // @@protoc_insertion_point(field_release:GB28181.PlayBackUrlReply.rtmpUrl)
  return rtmpurl_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayBackUrlReply::set_allocated_rtmpurl(std::string* rtmpurl) {
  if (rtmpurl != nullptr) {
    
  } else {
    
  }
  rtmpurl_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rtmpurl,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayBackUrlReply.rtmpUrl)
}
inline std::string* PlayBackUrlReply::unsafe_arena_release_rtmpurl() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayBackUrlReply.rtmpUrl)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return rtmpurl_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayBackUrlReply::unsafe_arena_set_allocated_rtmpurl(
    std::string* rtmpurl) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (rtmpurl != nullptr) {
    
  } else {
    
  }
  rtmpurl_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      rtmpurl, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayBackUrlReply.rtmpUrl)
}

// string msg = 4;
inline void PlayBackUrlReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayBackUrlReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlReply.msg)
  return _internal_msg();
}
inline void PlayBackUrlReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlReply.msg)
}
inline std::string* PlayBackUrlReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayBackUrlReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PlayBackUrlReply::_internal_msg() const {
  return msg_.Get();
}
inline void PlayBackUrlReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayBackUrlReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayBackUrlReply.msg)
}
inline void PlayBackUrlReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayBackUrlReply.msg)
}
inline void PlayBackUrlReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayBackUrlReply.msg)
}
inline std::string* PlayBackUrlReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayBackUrlReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PlayBackUrlReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayBackUrlReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayBackUrlReply.msg)
}
inline std::string* PlayBackUrlReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayBackUrlReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayBackUrlReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayBackUrlReply.msg)
}

// string token = 5;
inline void PlayBackUrlReply::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayBackUrlReply::token() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayBackUrlReply.token)
  return _internal_token();
}
inline void PlayBackUrlReply::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayBackUrlReply.token)
}
inline std::string* PlayBackUrlReply::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayBackUrlReply.token)
  return _internal_mutable_token();
}
inline const std::string& PlayBackUrlReply::_internal_token() const {
  return token_.Get();
}
inline void PlayBackUrlReply::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayBackUrlReply::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayBackUrlReply.token)
}
inline void PlayBackUrlReply::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayBackUrlReply.token)
}
inline void PlayBackUrlReply::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayBackUrlReply.token)
}
inline std::string* PlayBackUrlReply::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayBackUrlReply::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.PlayBackUrlReply.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayBackUrlReply::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayBackUrlReply.token)
}
inline std::string* PlayBackUrlReply::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayBackUrlReply.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayBackUrlReply::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayBackUrlReply.token)
}

// -------------------------------------------------------------------

// PresetGoRequest

// string mainId = 1;
inline void PresetGoRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetGoRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetGoRequest.mainId)
  return _internal_mainid();
}
inline void PresetGoRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetGoRequest.mainId)
}
inline std::string* PresetGoRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetGoRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PresetGoRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PresetGoRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetGoRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetGoRequest.mainId)
}
inline void PresetGoRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetGoRequest.mainId)
}
inline void PresetGoRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetGoRequest.mainId)
}
inline std::string* PresetGoRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetGoRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PresetGoRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetGoRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetGoRequest.mainId)
}
inline std::string* PresetGoRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetGoRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetGoRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetGoRequest.mainId)
}

// string subId = 2;
inline void PresetGoRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetGoRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetGoRequest.subId)
  return _internal_subid();
}
inline void PresetGoRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetGoRequest.subId)
}
inline std::string* PresetGoRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetGoRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PresetGoRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PresetGoRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetGoRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetGoRequest.subId)
}
inline void PresetGoRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetGoRequest.subId)
}
inline void PresetGoRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetGoRequest.subId)
}
inline std::string* PresetGoRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetGoRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PresetGoRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetGoRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetGoRequest.subId)
}
inline std::string* PresetGoRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetGoRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetGoRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetGoRequest.subId)
}

// int32 presetId = 3;
inline void PresetGoRequest::clear_presetid() {
  presetid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetGoRequest::_internal_presetid() const {
  return presetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetGoRequest::presetid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetGoRequest.presetId)
  return _internal_presetid();
}
inline void PresetGoRequest::_internal_set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  presetid_ = value;
}
inline void PresetGoRequest::set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_presetid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetGoRequest.presetId)
}

// -------------------------------------------------------------------

// PresetSetRequest

// string mainId = 1;
inline void PresetSetRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetSetRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetSetRequest.mainId)
  return _internal_mainid();
}
inline void PresetSetRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetSetRequest.mainId)
}
inline std::string* PresetSetRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetSetRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PresetSetRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PresetSetRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetSetRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetSetRequest.mainId)
}
inline void PresetSetRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetSetRequest.mainId)
}
inline void PresetSetRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetSetRequest.mainId)
}
inline std::string* PresetSetRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetSetRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PresetSetRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetSetRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetSetRequest.mainId)
}
inline std::string* PresetSetRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetSetRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetSetRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetSetRequest.mainId)
}

// string subId = 2;
inline void PresetSetRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetSetRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetSetRequest.subId)
  return _internal_subid();
}
inline void PresetSetRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetSetRequest.subId)
}
inline std::string* PresetSetRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetSetRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PresetSetRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PresetSetRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetSetRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetSetRequest.subId)
}
inline void PresetSetRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetSetRequest.subId)
}
inline void PresetSetRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetSetRequest.subId)
}
inline std::string* PresetSetRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetSetRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PresetSetRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetSetRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetSetRequest.subId)
}
inline std::string* PresetSetRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetSetRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetSetRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetSetRequest.subId)
}

// int32 presetId = 3;
inline void PresetSetRequest::clear_presetid() {
  presetid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetSetRequest::_internal_presetid() const {
  return presetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetSetRequest::presetid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetSetRequest.presetId)
  return _internal_presetid();
}
inline void PresetSetRequest::_internal_set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  presetid_ = value;
}
inline void PresetSetRequest::set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_presetid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetSetRequest.presetId)
}

// -------------------------------------------------------------------

// PresetDelRequest

// string mainId = 1;
inline void PresetDelRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetDelRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetDelRequest.mainId)
  return _internal_mainid();
}
inline void PresetDelRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetDelRequest.mainId)
}
inline std::string* PresetDelRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetDelRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PresetDelRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PresetDelRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetDelRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetDelRequest.mainId)
}
inline void PresetDelRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetDelRequest.mainId)
}
inline void PresetDelRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetDelRequest.mainId)
}
inline std::string* PresetDelRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetDelRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PresetDelRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetDelRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetDelRequest.mainId)
}
inline std::string* PresetDelRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetDelRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetDelRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetDelRequest.mainId)
}

// string subId = 2;
inline void PresetDelRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetDelRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetDelRequest.subId)
  return _internal_subid();
}
inline void PresetDelRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetDelRequest.subId)
}
inline std::string* PresetDelRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetDelRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PresetDelRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PresetDelRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetDelRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetDelRequest.subId)
}
inline void PresetDelRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetDelRequest.subId)
}
inline void PresetDelRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetDelRequest.subId)
}
inline std::string* PresetDelRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetDelRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PresetDelRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetDelRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetDelRequest.subId)
}
inline std::string* PresetDelRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetDelRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetDelRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetDelRequest.subId)
}

// int32 presetId = 3;
inline void PresetDelRequest::clear_presetid() {
  presetid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetDelRequest::_internal_presetid() const {
  return presetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetDelRequest::presetid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetDelRequest.presetId)
  return _internal_presetid();
}
inline void PresetDelRequest::_internal_set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  presetid_ = value;
}
inline void PresetDelRequest::set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_presetid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetDelRequest.presetId)
}

// -------------------------------------------------------------------

// PresetQueryRequest

// string mainId = 1;
inline void PresetQueryRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetQueryRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetQueryRequest.mainId)
  return _internal_mainid();
}
inline void PresetQueryRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetQueryRequest.mainId)
}
inline std::string* PresetQueryRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetQueryRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& PresetQueryRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void PresetQueryRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetQueryRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetQueryRequest.mainId)
}
inline void PresetQueryRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetQueryRequest.mainId)
}
inline void PresetQueryRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetQueryRequest.mainId)
}
inline std::string* PresetQueryRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetQueryRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.PresetQueryRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetQueryRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetQueryRequest.mainId)
}
inline std::string* PresetQueryRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetQueryRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetQueryRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetQueryRequest.mainId)
}

// string subId = 2;
inline void PresetQueryRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetQueryRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetQueryRequest.subId)
  return _internal_subid();
}
inline void PresetQueryRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetQueryRequest.subId)
}
inline std::string* PresetQueryRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetQueryRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& PresetQueryRequest::_internal_subid() const {
  return subid_.Get();
}
inline void PresetQueryRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetQueryRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetQueryRequest.subId)
}
inline void PresetQueryRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetQueryRequest.subId)
}
inline void PresetQueryRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetQueryRequest.subId)
}
inline std::string* PresetQueryRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetQueryRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.PresetQueryRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetQueryRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetQueryRequest.subId)
}
inline std::string* PresetQueryRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetQueryRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetQueryRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetQueryRequest.subId)
}

// -------------------------------------------------------------------

// PresetQueryReply

// int32 sn = 1;
inline void PresetQueryReply::clear_sn() {
  sn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetQueryReply::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetQueryReply::sn() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetQueryReply.sn)
  return _internal_sn();
}
inline void PresetQueryReply::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sn_ = value;
}
inline void PresetQueryReply::set_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetQueryReply.sn)
}

// int32 code = 2;
inline void PresetQueryReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetQueryReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetQueryReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetQueryReply.code)
  return _internal_code();
}
inline void PresetQueryReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PresetQueryReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetQueryReply.code)
}

// string msg = 3;
inline void PresetQueryReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetQueryReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetQueryReply.msg)
  return _internal_msg();
}
inline void PresetQueryReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetQueryReply.msg)
}
inline std::string* PresetQueryReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetQueryReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PresetQueryReply::_internal_msg() const {
  return msg_.Get();
}
inline void PresetQueryReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetQueryReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetQueryReply.msg)
}
inline void PresetQueryReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetQueryReply.msg)
}
inline void PresetQueryReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetQueryReply.msg)
}
inline std::string* PresetQueryReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetQueryReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PresetQueryReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetQueryReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetQueryReply.msg)
}
inline std::string* PresetQueryReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetQueryReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetQueryReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetQueryReply.msg)
}

// -------------------------------------------------------------------

// GetPresetRequest

// int32 sn = 1;
inline void GetPresetRequest::clear_sn() {
  sn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPresetRequest::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPresetRequest::sn() const {
  // @@protoc_insertion_point(field_get:GB28181.GetPresetRequest.sn)
  return _internal_sn();
}
inline void GetPresetRequest::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sn_ = value;
}
inline void GetPresetRequest::set_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:GB28181.GetPresetRequest.sn)
}

// -------------------------------------------------------------------

// PresetInfo

// int32 presetId = 1;
inline void PresetInfo::clear_presetid() {
  presetid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetInfo::_internal_presetid() const {
  return presetid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PresetInfo::presetid() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetInfo.presetId)
  return _internal_presetid();
}
inline void PresetInfo::_internal_set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  presetid_ = value;
}
inline void PresetInfo::set_presetid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_presetid(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetInfo.presetId)
}

// string presetName = 2;
inline void PresetInfo::clear_presetname() {
  presetname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PresetInfo::presetname() const {
  // @@protoc_insertion_point(field_get:GB28181.PresetInfo.presetName)
  return _internal_presetname();
}
inline void PresetInfo::set_presetname(const std::string& value) {
  _internal_set_presetname(value);
  // @@protoc_insertion_point(field_set:GB28181.PresetInfo.presetName)
}
inline std::string* PresetInfo::mutable_presetname() {
  // @@protoc_insertion_point(field_mutable:GB28181.PresetInfo.presetName)
  return _internal_mutable_presetname();
}
inline const std::string& PresetInfo::_internal_presetname() const {
  return presetname_.Get();
}
inline void PresetInfo::_internal_set_presetname(const std::string& value) {
  
  presetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PresetInfo::set_presetname(std::string&& value) {
  
  presetname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PresetInfo.presetName)
}
inline void PresetInfo::set_presetname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  presetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PresetInfo.presetName)
}
inline void PresetInfo::set_presetname(const char* value,
    size_t size) {
  
  presetname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PresetInfo.presetName)
}
inline std::string* PresetInfo::_internal_mutable_presetname() {
  
  return presetname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PresetInfo::release_presetname() {
  // @@protoc_insertion_point(field_release:GB28181.PresetInfo.presetName)
  return presetname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PresetInfo::set_allocated_presetname(std::string* presetname) {
  if (presetname != nullptr) {
    
  } else {
    
  }
  presetname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), presetname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PresetInfo.presetName)
}
inline std::string* PresetInfo::unsafe_arena_release_presetname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PresetInfo.presetName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return presetname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PresetInfo::unsafe_arena_set_allocated_presetname(
    std::string* presetname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (presetname != nullptr) {
    
  } else {
    
  }
  presetname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      presetname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PresetInfo.presetName)
}

// -------------------------------------------------------------------

// GetPresetReply

// repeated .GB28181.PresetInfo presetList = 1;
inline int GetPresetReply::_internal_presetlist_size() const {
  return presetlist_.size();
}
inline int GetPresetReply::presetlist_size() const {
  return _internal_presetlist_size();
}
inline void GetPresetReply::clear_presetlist() {
  presetlist_.Clear();
}
inline ::GB28181::PresetInfo* GetPresetReply::mutable_presetlist(int index) {
  // @@protoc_insertion_point(field_mutable:GB28181.GetPresetReply.presetList)
  return presetlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::PresetInfo >*
GetPresetReply::mutable_presetlist() {
  // @@protoc_insertion_point(field_mutable_list:GB28181.GetPresetReply.presetList)
  return &presetlist_;
}
inline const ::GB28181::PresetInfo& GetPresetReply::_internal_presetlist(int index) const {
  return presetlist_.Get(index);
}
inline const ::GB28181::PresetInfo& GetPresetReply::presetlist(int index) const {
  // @@protoc_insertion_point(field_get:GB28181.GetPresetReply.presetList)
  return _internal_presetlist(index);
}
inline ::GB28181::PresetInfo* GetPresetReply::_internal_add_presetlist() {
  return presetlist_.Add();
}
inline ::GB28181::PresetInfo* GetPresetReply::add_presetlist() {
  // @@protoc_insertion_point(field_add:GB28181.GetPresetReply.presetList)
  return _internal_add_presetlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::PresetInfo >&
GetPresetReply::presetlist() const {
  // @@protoc_insertion_point(field_list:GB28181.GetPresetReply.presetList)
  return presetlist_;
}

// int32 code = 2;
inline void GetPresetReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPresetReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetPresetReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetPresetReply.code)
  return _internal_code();
}
inline void GetPresetReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetPresetReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetPresetReply.code)
}

// string msg = 3;
inline void GetPresetReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetPresetReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetPresetReply.msg)
  return _internal_msg();
}
inline void GetPresetReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetPresetReply.msg)
}
inline std::string* GetPresetReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetPresetReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetPresetReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetPresetReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetPresetReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetPresetReply.msg)
}
inline void GetPresetReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetPresetReply.msg)
}
inline void GetPresetReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetPresetReply.msg)
}
inline std::string* GetPresetReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetPresetReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetPresetReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetPresetReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetPresetReply.msg)
}
inline std::string* GetPresetReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetPresetReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetPresetReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetPresetReply.msg)
}

// -------------------------------------------------------------------

// QueryRecordRequest

// string mainId = 1;
inline void QueryRecordRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryRecordRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.QueryRecordRequest.mainId)
  return _internal_mainid();
}
inline void QueryRecordRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.QueryRecordRequest.mainId)
}
inline std::string* QueryRecordRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.QueryRecordRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& QueryRecordRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void QueryRecordRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryRecordRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.QueryRecordRequest.mainId)
}
inline void QueryRecordRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.QueryRecordRequest.mainId)
}
inline void QueryRecordRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.QueryRecordRequest.mainId)
}
inline std::string* QueryRecordRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryRecordRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.QueryRecordRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryRecordRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.QueryRecordRequest.mainId)
}
inline std::string* QueryRecordRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.QueryRecordRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.QueryRecordRequest.mainId)
}

// string subId = 2;
inline void QueryRecordRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryRecordRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.QueryRecordRequest.subId)
  return _internal_subid();
}
inline void QueryRecordRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.QueryRecordRequest.subId)
}
inline std::string* QueryRecordRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.QueryRecordRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& QueryRecordRequest::_internal_subid() const {
  return subid_.Get();
}
inline void QueryRecordRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryRecordRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.QueryRecordRequest.subId)
}
inline void QueryRecordRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.QueryRecordRequest.subId)
}
inline void QueryRecordRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.QueryRecordRequest.subId)
}
inline std::string* QueryRecordRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryRecordRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.QueryRecordRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryRecordRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.QueryRecordRequest.subId)
}
inline std::string* QueryRecordRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.QueryRecordRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.QueryRecordRequest.subId)
}

// string startTime = 3;
inline void QueryRecordRequest::clear_starttime() {
  starttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryRecordRequest::starttime() const {
  // @@protoc_insertion_point(field_get:GB28181.QueryRecordRequest.startTime)
  return _internal_starttime();
}
inline void QueryRecordRequest::set_starttime(const std::string& value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:GB28181.QueryRecordRequest.startTime)
}
inline std::string* QueryRecordRequest::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:GB28181.QueryRecordRequest.startTime)
  return _internal_mutable_starttime();
}
inline const std::string& QueryRecordRequest::_internal_starttime() const {
  return starttime_.Get();
}
inline void QueryRecordRequest::_internal_set_starttime(const std::string& value) {
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryRecordRequest::set_starttime(std::string&& value) {
  
  starttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.QueryRecordRequest.startTime)
}
inline void QueryRecordRequest::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.QueryRecordRequest.startTime)
}
inline void QueryRecordRequest::set_starttime(const char* value,
    size_t size) {
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.QueryRecordRequest.startTime)
}
inline std::string* QueryRecordRequest::_internal_mutable_starttime() {
  
  return starttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryRecordRequest::release_starttime() {
  // @@protoc_insertion_point(field_release:GB28181.QueryRecordRequest.startTime)
  return starttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryRecordRequest::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.QueryRecordRequest.startTime)
}
inline std::string* QueryRecordRequest::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.QueryRecordRequest.startTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return starttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_starttime(
    std::string* starttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      starttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.QueryRecordRequest.startTime)
}

// string endTime = 4;
inline void QueryRecordRequest::clear_endtime() {
  endtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryRecordRequest::endtime() const {
  // @@protoc_insertion_point(field_get:GB28181.QueryRecordRequest.endTime)
  return _internal_endtime();
}
inline void QueryRecordRequest::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:GB28181.QueryRecordRequest.endTime)
}
inline std::string* QueryRecordRequest::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:GB28181.QueryRecordRequest.endTime)
  return _internal_mutable_endtime();
}
inline const std::string& QueryRecordRequest::_internal_endtime() const {
  return endtime_.Get();
}
inline void QueryRecordRequest::_internal_set_endtime(const std::string& value) {
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryRecordRequest::set_endtime(std::string&& value) {
  
  endtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.QueryRecordRequest.endTime)
}
inline void QueryRecordRequest::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.QueryRecordRequest.endTime)
}
inline void QueryRecordRequest::set_endtime(const char* value,
    size_t size) {
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.QueryRecordRequest.endTime)
}
inline std::string* QueryRecordRequest::_internal_mutable_endtime() {
  
  return endtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryRecordRequest::release_endtime() {
  // @@protoc_insertion_point(field_release:GB28181.QueryRecordRequest.endTime)
  return endtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryRecordRequest::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.QueryRecordRequest.endTime)
}
inline std::string* QueryRecordRequest::unsafe_arena_release_endtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.QueryRecordRequest.endTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryRecordRequest::unsafe_arena_set_allocated_endtime(
    std::string* endtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.QueryRecordRequest.endTime)
}

// -------------------------------------------------------------------

// QueryRecordReply

// int32 sn = 1;
inline void QueryRecordReply::clear_sn() {
  sn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRecordReply::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRecordReply::sn() const {
  // @@protoc_insertion_point(field_get:GB28181.QueryRecordReply.sn)
  return _internal_sn();
}
inline void QueryRecordReply::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sn_ = value;
}
inline void QueryRecordReply::set_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:GB28181.QueryRecordReply.sn)
}

// int32 code = 2;
inline void QueryRecordReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRecordReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRecordReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.QueryRecordReply.code)
  return _internal_code();
}
inline void QueryRecordReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void QueryRecordReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.QueryRecordReply.code)
}

// string msg = 3;
inline void QueryRecordReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& QueryRecordReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.QueryRecordReply.msg)
  return _internal_msg();
}
inline void QueryRecordReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.QueryRecordReply.msg)
}
inline std::string* QueryRecordReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.QueryRecordReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& QueryRecordReply::_internal_msg() const {
  return msg_.Get();
}
inline void QueryRecordReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void QueryRecordReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.QueryRecordReply.msg)
}
inline void QueryRecordReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.QueryRecordReply.msg)
}
inline void QueryRecordReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.QueryRecordReply.msg)
}
inline std::string* QueryRecordReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* QueryRecordReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.QueryRecordReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void QueryRecordReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.QueryRecordReply.msg)
}
inline std::string* QueryRecordReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.QueryRecordReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void QueryRecordReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.QueryRecordReply.msg)
}

// -------------------------------------------------------------------

// GetRecordRequest

// int32 sn = 1;
inline void GetRecordRequest::clear_sn() {
  sn_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRecordRequest::_internal_sn() const {
  return sn_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRecordRequest::sn() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRecordRequest.sn)
  return _internal_sn();
}
inline void GetRecordRequest::_internal_set_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sn_ = value;
}
inline void GetRecordRequest::set_sn(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRecordRequest.sn)
}

// -------------------------------------------------------------------

// RecordInfo

// string name = 1;
inline void RecordInfo::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordInfo::name() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordInfo.name)
  return _internal_name();
}
inline void RecordInfo::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordInfo.name)
}
inline std::string* RecordInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordInfo.name)
  return _internal_mutable_name();
}
inline const std::string& RecordInfo::_internal_name() const {
  return name_.Get();
}
inline void RecordInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordInfo::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordInfo.name)
}
inline void RecordInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordInfo.name)
}
inline void RecordInfo::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordInfo.name)
}
inline std::string* RecordInfo::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordInfo::release_name() {
  // @@protoc_insertion_point(field_release:GB28181.RecordInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordInfo.name)
}
inline std::string* RecordInfo::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordInfo.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordInfo::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordInfo.name)
}

// string startTime = 2;
inline void RecordInfo::clear_starttime() {
  starttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordInfo::starttime() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordInfo.startTime)
  return _internal_starttime();
}
inline void RecordInfo::set_starttime(const std::string& value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordInfo.startTime)
}
inline std::string* RecordInfo::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordInfo.startTime)
  return _internal_mutable_starttime();
}
inline const std::string& RecordInfo::_internal_starttime() const {
  return starttime_.Get();
}
inline void RecordInfo::_internal_set_starttime(const std::string& value) {
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordInfo::set_starttime(std::string&& value) {
  
  starttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordInfo.startTime)
}
inline void RecordInfo::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordInfo.startTime)
}
inline void RecordInfo::set_starttime(const char* value,
    size_t size) {
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordInfo.startTime)
}
inline std::string* RecordInfo::_internal_mutable_starttime() {
  
  return starttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordInfo::release_starttime() {
  // @@protoc_insertion_point(field_release:GB28181.RecordInfo.startTime)
  return starttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordInfo::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordInfo.startTime)
}
inline std::string* RecordInfo::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordInfo.startTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return starttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordInfo::unsafe_arena_set_allocated_starttime(
    std::string* starttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      starttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordInfo.startTime)
}

// string endTime = 3;
inline void RecordInfo::clear_endtime() {
  endtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordInfo::endtime() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordInfo.endTime)
  return _internal_endtime();
}
inline void RecordInfo::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordInfo.endTime)
}
inline std::string* RecordInfo::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordInfo.endTime)
  return _internal_mutable_endtime();
}
inline const std::string& RecordInfo::_internal_endtime() const {
  return endtime_.Get();
}
inline void RecordInfo::_internal_set_endtime(const std::string& value) {
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordInfo::set_endtime(std::string&& value) {
  
  endtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordInfo.endTime)
}
inline void RecordInfo::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordInfo.endTime)
}
inline void RecordInfo::set_endtime(const char* value,
    size_t size) {
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordInfo.endTime)
}
inline std::string* RecordInfo::_internal_mutable_endtime() {
  
  return endtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordInfo::release_endtime() {
  // @@protoc_insertion_point(field_release:GB28181.RecordInfo.endTime)
  return endtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordInfo::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordInfo.endTime)
}
inline std::string* RecordInfo::unsafe_arena_release_endtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordInfo.endTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordInfo::unsafe_arena_set_allocated_endtime(
    std::string* endtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordInfo.endTime)
}

// -------------------------------------------------------------------

// GetRecordReply

// repeated .GB28181.RecordInfo recordList = 1;
inline int GetRecordReply::_internal_recordlist_size() const {
  return recordlist_.size();
}
inline int GetRecordReply::recordlist_size() const {
  return _internal_recordlist_size();
}
inline void GetRecordReply::clear_recordlist() {
  recordlist_.Clear();
}
inline ::GB28181::RecordInfo* GetRecordReply::mutable_recordlist(int index) {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRecordReply.recordList)
  return recordlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::RecordInfo >*
GetRecordReply::mutable_recordlist() {
  // @@protoc_insertion_point(field_mutable_list:GB28181.GetRecordReply.recordList)
  return &recordlist_;
}
inline const ::GB28181::RecordInfo& GetRecordReply::_internal_recordlist(int index) const {
  return recordlist_.Get(index);
}
inline const ::GB28181::RecordInfo& GetRecordReply::recordlist(int index) const {
  // @@protoc_insertion_point(field_get:GB28181.GetRecordReply.recordList)
  return _internal_recordlist(index);
}
inline ::GB28181::RecordInfo* GetRecordReply::_internal_add_recordlist() {
  return recordlist_.Add();
}
inline ::GB28181::RecordInfo* GetRecordReply::add_recordlist() {
  // @@protoc_insertion_point(field_add:GB28181.GetRecordReply.recordList)
  return _internal_add_recordlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::RecordInfo >&
GetRecordReply::recordlist() const {
  // @@protoc_insertion_point(field_list:GB28181.GetRecordReply.recordList)
  return recordlist_;
}

// int32 code = 2;
inline void GetRecordReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRecordReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetRecordReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRecordReply.code)
  return _internal_code();
}
inline void GetRecordReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetRecordReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRecordReply.code)
}

// string msg = 3;
inline void GetRecordReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetRecordReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetRecordReply.msg)
  return _internal_msg();
}
inline void GetRecordReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetRecordReply.msg)
}
inline std::string* GetRecordReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetRecordReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetRecordReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetRecordReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetRecordReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetRecordReply.msg)
}
inline void GetRecordReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetRecordReply.msg)
}
inline void GetRecordReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetRecordReply.msg)
}
inline std::string* GetRecordReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetRecordReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetRecordReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetRecordReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetRecordReply.msg)
}
inline std::string* GetRecordReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetRecordReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetRecordReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetRecordReply.msg)
}

// -------------------------------------------------------------------

// PlayFastRequest

// string token = 1;
inline void PlayFastRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayFastRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayFastRequest.token)
  return _internal_token();
}
inline void PlayFastRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayFastRequest.token)
}
inline std::string* PlayFastRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayFastRequest.token)
  return _internal_mutable_token();
}
inline const std::string& PlayFastRequest::_internal_token() const {
  return token_.Get();
}
inline void PlayFastRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayFastRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayFastRequest.token)
}
inline void PlayFastRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayFastRequest.token)
}
inline void PlayFastRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayFastRequest.token)
}
inline std::string* PlayFastRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayFastRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.PlayFastRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayFastRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayFastRequest.token)
}
inline std::string* PlayFastRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayFastRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayFastRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayFastRequest.token)
}

// -------------------------------------------------------------------

// PlayFastReply

// float scale = 1;
inline void PlayFastReply::clear_scale() {
  scale_ = 0;
}
inline float PlayFastReply::_internal_scale() const {
  return scale_;
}
inline float PlayFastReply::scale() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayFastReply.scale)
  return _internal_scale();
}
inline void PlayFastReply::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void PlayFastReply::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayFastReply.scale)
}

// int32 code = 2;
inline void PlayFastReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayFastReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayFastReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayFastReply.code)
  return _internal_code();
}
inline void PlayFastReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PlayFastReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayFastReply.code)
}

// string msg = 3;
inline void PlayFastReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayFastReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayFastReply.msg)
  return _internal_msg();
}
inline void PlayFastReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayFastReply.msg)
}
inline std::string* PlayFastReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayFastReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PlayFastReply::_internal_msg() const {
  return msg_.Get();
}
inline void PlayFastReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayFastReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayFastReply.msg)
}
inline void PlayFastReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayFastReply.msg)
}
inline void PlayFastReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayFastReply.msg)
}
inline std::string* PlayFastReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayFastReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PlayFastReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayFastReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayFastReply.msg)
}
inline std::string* PlayFastReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayFastReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayFastReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayFastReply.msg)
}

// -------------------------------------------------------------------

// PlaySlowRequest

// string token = 1;
inline void PlaySlowRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlaySlowRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.PlaySlowRequest.token)
  return _internal_token();
}
inline void PlaySlowRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.PlaySlowRequest.token)
}
inline std::string* PlaySlowRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlaySlowRequest.token)
  return _internal_mutable_token();
}
inline const std::string& PlaySlowRequest::_internal_token() const {
  return token_.Get();
}
inline void PlaySlowRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlaySlowRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlaySlowRequest.token)
}
inline void PlaySlowRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlaySlowRequest.token)
}
inline void PlaySlowRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlaySlowRequest.token)
}
inline std::string* PlaySlowRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlaySlowRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.PlaySlowRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaySlowRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlaySlowRequest.token)
}
inline std::string* PlaySlowRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlaySlowRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlaySlowRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlaySlowRequest.token)
}

// -------------------------------------------------------------------

// PlaySlowReply

// float scale = 1;
inline void PlaySlowReply::clear_scale() {
  scale_ = 0;
}
inline float PlaySlowReply::_internal_scale() const {
  return scale_;
}
inline float PlaySlowReply::scale() const {
  // @@protoc_insertion_point(field_get:GB28181.PlaySlowReply.scale)
  return _internal_scale();
}
inline void PlaySlowReply::_internal_set_scale(float value) {
  
  scale_ = value;
}
inline void PlaySlowReply::set_scale(float value) {
  _internal_set_scale(value);
  // @@protoc_insertion_point(field_set:GB28181.PlaySlowReply.scale)
}

// int32 code = 2;
inline void PlaySlowReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaySlowReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaySlowReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PlaySlowReply.code)
  return _internal_code();
}
inline void PlaySlowReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PlaySlowReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PlaySlowReply.code)
}

// string msg = 3;
inline void PlaySlowReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlaySlowReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PlaySlowReply.msg)
  return _internal_msg();
}
inline void PlaySlowReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PlaySlowReply.msg)
}
inline std::string* PlaySlowReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlaySlowReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PlaySlowReply::_internal_msg() const {
  return msg_.Get();
}
inline void PlaySlowReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlaySlowReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlaySlowReply.msg)
}
inline void PlaySlowReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlaySlowReply.msg)
}
inline void PlaySlowReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlaySlowReply.msg)
}
inline std::string* PlaySlowReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlaySlowReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PlaySlowReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlaySlowReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlaySlowReply.msg)
}
inline std::string* PlaySlowReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlaySlowReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlaySlowReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlaySlowReply.msg)
}

// -------------------------------------------------------------------

// PauseRequest

// string token = 1;
inline void PauseRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PauseRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.PauseRequest.token)
  return _internal_token();
}
inline void PauseRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.PauseRequest.token)
}
inline std::string* PauseRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.PauseRequest.token)
  return _internal_mutable_token();
}
inline const std::string& PauseRequest::_internal_token() const {
  return token_.Get();
}
inline void PauseRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PauseRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PauseRequest.token)
}
inline void PauseRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PauseRequest.token)
}
inline void PauseRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PauseRequest.token)
}
inline std::string* PauseRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PauseRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.PauseRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PauseRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PauseRequest.token)
}
inline std::string* PauseRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PauseRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PauseRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PauseRequest.token)
}

// -------------------------------------------------------------------

// PauseReply

// int32 code = 1;
inline void PauseReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PauseReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PauseReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PauseReply.code)
  return _internal_code();
}
inline void PauseReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PauseReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PauseReply.code)
}

// string msg = 2;
inline void PauseReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PauseReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PauseReply.msg)
  return _internal_msg();
}
inline void PauseReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PauseReply.msg)
}
inline std::string* PauseReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PauseReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PauseReply::_internal_msg() const {
  return msg_.Get();
}
inline void PauseReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PauseReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PauseReply.msg)
}
inline void PauseReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PauseReply.msg)
}
inline void PauseReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PauseReply.msg)
}
inline std::string* PauseReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PauseReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PauseReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PauseReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PauseReply.msg)
}
inline std::string* PauseReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PauseReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PauseReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PauseReply.msg)
}

// -------------------------------------------------------------------

// PlayRequest

// string token = 1;
inline void PlayRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayRequest.token)
  return _internal_token();
}
inline void PlayRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayRequest.token)
}
inline std::string* PlayRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayRequest.token)
  return _internal_mutable_token();
}
inline const std::string& PlayRequest::_internal_token() const {
  return token_.Get();
}
inline void PlayRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayRequest.token)
}
inline void PlayRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayRequest.token)
}
inline void PlayRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayRequest.token)
}
inline std::string* PlayRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.PlayRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayRequest.token)
}
inline std::string* PlayRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayRequest.token)
}

// -------------------------------------------------------------------

// PlayReply

// int32 code = 1;
inline void PlayReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayReply.code)
  return _internal_code();
}
inline void PlayReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void PlayReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayReply.code)
}

// string msg = 2;
inline void PlayReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PlayReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.PlayReply.msg)
  return _internal_msg();
}
inline void PlayReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.PlayReply.msg)
}
inline std::string* PlayReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.PlayReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& PlayReply::_internal_msg() const {
  return msg_.Get();
}
inline void PlayReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PlayReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.PlayReply.msg)
}
inline void PlayReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.PlayReply.msg)
}
inline void PlayReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.PlayReply.msg)
}
inline std::string* PlayReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PlayReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.PlayReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PlayReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.PlayReply.msg)
}
inline std::string* PlayReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.PlayReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PlayReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.PlayReply.msg)
}

// -------------------------------------------------------------------

// SeekRequest

// string token = 1;
inline void SeekRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SeekRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.SeekRequest.token)
  return _internal_token();
}
inline void SeekRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.SeekRequest.token)
}
inline std::string* SeekRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.SeekRequest.token)
  return _internal_mutable_token();
}
inline const std::string& SeekRequest::_internal_token() const {
  return token_.Get();
}
inline void SeekRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SeekRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.SeekRequest.token)
}
inline void SeekRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.SeekRequest.token)
}
inline void SeekRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.SeekRequest.token)
}
inline std::string* SeekRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SeekRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.SeekRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeekRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.SeekRequest.token)
}
inline std::string* SeekRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.SeekRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SeekRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.SeekRequest.token)
}

// int32 time = 2;
inline void SeekRequest::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeekRequest::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeekRequest::time() const {
  // @@protoc_insertion_point(field_get:GB28181.SeekRequest.time)
  return _internal_time();
}
inline void SeekRequest::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
}
inline void SeekRequest::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:GB28181.SeekRequest.time)
}

// -------------------------------------------------------------------

// SeekReply

// int32 code = 1;
inline void SeekReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeekReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SeekReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.SeekReply.code)
  return _internal_code();
}
inline void SeekReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void SeekReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.SeekReply.code)
}

// string msg = 2;
inline void SeekReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SeekReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.SeekReply.msg)
  return _internal_msg();
}
inline void SeekReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.SeekReply.msg)
}
inline std::string* SeekReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.SeekReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& SeekReply::_internal_msg() const {
  return msg_.Get();
}
inline void SeekReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SeekReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.SeekReply.msg)
}
inline void SeekReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.SeekReply.msg)
}
inline void SeekReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.SeekReply.msg)
}
inline std::string* SeekReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SeekReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.SeekReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SeekReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.SeekReply.msg)
}
inline std::string* SeekReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.SeekReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SeekReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.SeekReply.msg)
}

// -------------------------------------------------------------------

// GoForwardRequest

// string token = 1;
inline void GoForwardRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GoForwardRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.GoForwardRequest.token)
  return _internal_token();
}
inline void GoForwardRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.GoForwardRequest.token)
}
inline std::string* GoForwardRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.GoForwardRequest.token)
  return _internal_mutable_token();
}
inline const std::string& GoForwardRequest::_internal_token() const {
  return token_.Get();
}
inline void GoForwardRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GoForwardRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GoForwardRequest.token)
}
inline void GoForwardRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GoForwardRequest.token)
}
inline void GoForwardRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GoForwardRequest.token)
}
inline std::string* GoForwardRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GoForwardRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.GoForwardRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GoForwardRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GoForwardRequest.token)
}
inline std::string* GoForwardRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GoForwardRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GoForwardRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GoForwardRequest.token)
}

// int32 nowTime = 2;
inline void GoForwardRequest::clear_nowtime() {
  nowtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoForwardRequest::_internal_nowtime() const {
  return nowtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoForwardRequest::nowtime() const {
  // @@protoc_insertion_point(field_get:GB28181.GoForwardRequest.nowTime)
  return _internal_nowtime();
}
inline void GoForwardRequest::_internal_set_nowtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nowtime_ = value;
}
inline void GoForwardRequest::set_nowtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nowtime(value);
  // @@protoc_insertion_point(field_set:GB28181.GoForwardRequest.nowTime)
}

// -------------------------------------------------------------------

// GoForwardReply

// int32 code = 1;
inline void GoForwardReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoForwardReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoForwardReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GoForwardReply.code)
  return _internal_code();
}
inline void GoForwardReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GoForwardReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GoForwardReply.code)
}

// string msg = 2;
inline void GoForwardReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GoForwardReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GoForwardReply.msg)
  return _internal_msg();
}
inline void GoForwardReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GoForwardReply.msg)
}
inline std::string* GoForwardReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GoForwardReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GoForwardReply::_internal_msg() const {
  return msg_.Get();
}
inline void GoForwardReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GoForwardReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GoForwardReply.msg)
}
inline void GoForwardReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GoForwardReply.msg)
}
inline void GoForwardReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GoForwardReply.msg)
}
inline std::string* GoForwardReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GoForwardReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GoForwardReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GoForwardReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GoForwardReply.msg)
}
inline std::string* GoForwardReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GoForwardReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GoForwardReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GoForwardReply.msg)
}

// -------------------------------------------------------------------

// GoBackRequest

// string token = 1;
inline void GoBackRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GoBackRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.GoBackRequest.token)
  return _internal_token();
}
inline void GoBackRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.GoBackRequest.token)
}
inline std::string* GoBackRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.GoBackRequest.token)
  return _internal_mutable_token();
}
inline const std::string& GoBackRequest::_internal_token() const {
  return token_.Get();
}
inline void GoBackRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GoBackRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GoBackRequest.token)
}
inline void GoBackRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GoBackRequest.token)
}
inline void GoBackRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GoBackRequest.token)
}
inline std::string* GoBackRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GoBackRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.GoBackRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GoBackRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GoBackRequest.token)
}
inline std::string* GoBackRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GoBackRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GoBackRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GoBackRequest.token)
}

// int32 nowTime = 2;
inline void GoBackRequest::clear_nowtime() {
  nowtime_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoBackRequest::_internal_nowtime() const {
  return nowtime_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoBackRequest::nowtime() const {
  // @@protoc_insertion_point(field_get:GB28181.GoBackRequest.nowTime)
  return _internal_nowtime();
}
inline void GoBackRequest::_internal_set_nowtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nowtime_ = value;
}
inline void GoBackRequest::set_nowtime(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nowtime(value);
  // @@protoc_insertion_point(field_set:GB28181.GoBackRequest.nowTime)
}

// -------------------------------------------------------------------

// GoBackReply

// int32 code = 1;
inline void GoBackReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoBackReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GoBackReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GoBackReply.code)
  return _internal_code();
}
inline void GoBackReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GoBackReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GoBackReply.code)
}

// string msg = 2;
inline void GoBackReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GoBackReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GoBackReply.msg)
  return _internal_msg();
}
inline void GoBackReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GoBackReply.msg)
}
inline std::string* GoBackReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GoBackReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GoBackReply::_internal_msg() const {
  return msg_.Get();
}
inline void GoBackReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GoBackReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GoBackReply.msg)
}
inline void GoBackReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GoBackReply.msg)
}
inline void GoBackReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GoBackReply.msg)
}
inline std::string* GoBackReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GoBackReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GoBackReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GoBackReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GoBackReply.msg)
}
inline std::string* GoBackReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GoBackReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GoBackReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GoBackReply.msg)
}

// -------------------------------------------------------------------

// StopPlayRecordRequest

// string token = 1;
inline void StopPlayRecordRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopPlayRecordRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.StopPlayRecordRequest.token)
  return _internal_token();
}
inline void StopPlayRecordRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.StopPlayRecordRequest.token)
}
inline std::string* StopPlayRecordRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopPlayRecordRequest.token)
  return _internal_mutable_token();
}
inline const std::string& StopPlayRecordRequest::_internal_token() const {
  return token_.Get();
}
inline void StopPlayRecordRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopPlayRecordRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopPlayRecordRequest.token)
}
inline void StopPlayRecordRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopPlayRecordRequest.token)
}
inline void StopPlayRecordRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopPlayRecordRequest.token)
}
inline std::string* StopPlayRecordRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopPlayRecordRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.StopPlayRecordRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopPlayRecordRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopPlayRecordRequest.token)
}
inline std::string* StopPlayRecordRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopPlayRecordRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopPlayRecordRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopPlayRecordRequest.token)
}

// -------------------------------------------------------------------

// StopPlayRecordReply

// int32 code = 1;
inline void StopPlayRecordReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopPlayRecordReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopPlayRecordReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.StopPlayRecordReply.code)
  return _internal_code();
}
inline void StopPlayRecordReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void StopPlayRecordReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.StopPlayRecordReply.code)
}

// string msg = 3;
inline void StopPlayRecordReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopPlayRecordReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.StopPlayRecordReply.msg)
  return _internal_msg();
}
inline void StopPlayRecordReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.StopPlayRecordReply.msg)
}
inline std::string* StopPlayRecordReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopPlayRecordReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& StopPlayRecordReply::_internal_msg() const {
  return msg_.Get();
}
inline void StopPlayRecordReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopPlayRecordReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopPlayRecordReply.msg)
}
inline void StopPlayRecordReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopPlayRecordReply.msg)
}
inline void StopPlayRecordReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopPlayRecordReply.msg)
}
inline std::string* StopPlayRecordReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopPlayRecordReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.StopPlayRecordReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopPlayRecordReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopPlayRecordReply.msg)
}
inline std::string* StopPlayRecordReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopPlayRecordReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopPlayRecordReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopPlayRecordReply.msg)
}

// -------------------------------------------------------------------

// RecordDownloadRequest

// string mainId = 1;
inline void RecordDownloadRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordDownloadRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadRequest.mainId)
  return _internal_mainid();
}
inline void RecordDownloadRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadRequest.mainId)
}
inline std::string* RecordDownloadRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordDownloadRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& RecordDownloadRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void RecordDownloadRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordDownloadRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordDownloadRequest.mainId)
}
inline void RecordDownloadRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordDownloadRequest.mainId)
}
inline void RecordDownloadRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordDownloadRequest.mainId)
}
inline std::string* RecordDownloadRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordDownloadRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.RecordDownloadRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDownloadRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordDownloadRequest.mainId)
}
inline std::string* RecordDownloadRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordDownloadRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordDownloadRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordDownloadRequest.mainId)
}

// string subId = 2;
inline void RecordDownloadRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordDownloadRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadRequest.subId)
  return _internal_subid();
}
inline void RecordDownloadRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadRequest.subId)
}
inline std::string* RecordDownloadRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordDownloadRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& RecordDownloadRequest::_internal_subid() const {
  return subid_.Get();
}
inline void RecordDownloadRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordDownloadRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordDownloadRequest.subId)
}
inline void RecordDownloadRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordDownloadRequest.subId)
}
inline void RecordDownloadRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordDownloadRequest.subId)
}
inline std::string* RecordDownloadRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordDownloadRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.RecordDownloadRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDownloadRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordDownloadRequest.subId)
}
inline std::string* RecordDownloadRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordDownloadRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordDownloadRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordDownloadRequest.subId)
}

// string startTime = 3;
inline void RecordDownloadRequest::clear_starttime() {
  starttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordDownloadRequest::starttime() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadRequest.startTime)
  return _internal_starttime();
}
inline void RecordDownloadRequest::set_starttime(const std::string& value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadRequest.startTime)
}
inline std::string* RecordDownloadRequest::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordDownloadRequest.startTime)
  return _internal_mutable_starttime();
}
inline const std::string& RecordDownloadRequest::_internal_starttime() const {
  return starttime_.Get();
}
inline void RecordDownloadRequest::_internal_set_starttime(const std::string& value) {
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordDownloadRequest::set_starttime(std::string&& value) {
  
  starttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordDownloadRequest.startTime)
}
inline void RecordDownloadRequest::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordDownloadRequest.startTime)
}
inline void RecordDownloadRequest::set_starttime(const char* value,
    size_t size) {
  
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordDownloadRequest.startTime)
}
inline std::string* RecordDownloadRequest::_internal_mutable_starttime() {
  
  return starttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordDownloadRequest::release_starttime() {
  // @@protoc_insertion_point(field_release:GB28181.RecordDownloadRequest.startTime)
  return starttime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDownloadRequest::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordDownloadRequest.startTime)
}
inline std::string* RecordDownloadRequest::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordDownloadRequest.startTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return starttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordDownloadRequest::unsafe_arena_set_allocated_starttime(
    std::string* starttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (starttime != nullptr) {
    
  } else {
    
  }
  starttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      starttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordDownloadRequest.startTime)
}

// string endTime = 4;
inline void RecordDownloadRequest::clear_endtime() {
  endtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordDownloadRequest::endtime() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadRequest.endTime)
  return _internal_endtime();
}
inline void RecordDownloadRequest::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadRequest.endTime)
}
inline std::string* RecordDownloadRequest::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordDownloadRequest.endTime)
  return _internal_mutable_endtime();
}
inline const std::string& RecordDownloadRequest::_internal_endtime() const {
  return endtime_.Get();
}
inline void RecordDownloadRequest::_internal_set_endtime(const std::string& value) {
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordDownloadRequest::set_endtime(std::string&& value) {
  
  endtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordDownloadRequest.endTime)
}
inline void RecordDownloadRequest::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordDownloadRequest.endTime)
}
inline void RecordDownloadRequest::set_endtime(const char* value,
    size_t size) {
  
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordDownloadRequest.endTime)
}
inline std::string* RecordDownloadRequest::_internal_mutable_endtime() {
  
  return endtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordDownloadRequest::release_endtime() {
  // @@protoc_insertion_point(field_release:GB28181.RecordDownloadRequest.endTime)
  return endtime_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDownloadRequest::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordDownloadRequest.endTime)
}
inline std::string* RecordDownloadRequest::unsafe_arena_release_endtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordDownloadRequest.endTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return endtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordDownloadRequest::unsafe_arena_set_allocated_endtime(
    std::string* endtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endtime != nullptr) {
    
  } else {
    
  }
  endtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordDownloadRequest.endTime)
}

// string destIp = 5;
inline void RecordDownloadRequest::clear_destip() {
  destip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordDownloadRequest::destip() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadRequest.destIp)
  return _internal_destip();
}
inline void RecordDownloadRequest::set_destip(const std::string& value) {
  _internal_set_destip(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadRequest.destIp)
}
inline std::string* RecordDownloadRequest::mutable_destip() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordDownloadRequest.destIp)
  return _internal_mutable_destip();
}
inline const std::string& RecordDownloadRequest::_internal_destip() const {
  return destip_.Get();
}
inline void RecordDownloadRequest::_internal_set_destip(const std::string& value) {
  
  destip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordDownloadRequest::set_destip(std::string&& value) {
  
  destip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordDownloadRequest.destIp)
}
inline void RecordDownloadRequest::set_destip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordDownloadRequest.destIp)
}
inline void RecordDownloadRequest::set_destip(const char* value,
    size_t size) {
  
  destip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordDownloadRequest.destIp)
}
inline std::string* RecordDownloadRequest::_internal_mutable_destip() {
  
  return destip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordDownloadRequest::release_destip() {
  // @@protoc_insertion_point(field_release:GB28181.RecordDownloadRequest.destIp)
  return destip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDownloadRequest::set_allocated_destip(std::string* destip) {
  if (destip != nullptr) {
    
  } else {
    
  }
  destip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordDownloadRequest.destIp)
}
inline std::string* RecordDownloadRequest::unsafe_arena_release_destip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordDownloadRequest.destIp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return destip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordDownloadRequest::unsafe_arena_set_allocated_destip(
    std::string* destip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (destip != nullptr) {
    
  } else {
    
  }
  destip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordDownloadRequest.destIp)
}

// int32 destPort = 6;
inline void RecordDownloadRequest::clear_destport() {
  destport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordDownloadRequest::_internal_destport() const {
  return destport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordDownloadRequest::destport() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadRequest.destPort)
  return _internal_destport();
}
inline void RecordDownloadRequest::_internal_set_destport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  destport_ = value;
}
inline void RecordDownloadRequest::set_destport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_destport(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadRequest.destPort)
}

// -------------------------------------------------------------------

// RecordDownloadReply

// string token = 1;
inline void RecordDownloadReply::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordDownloadReply::token() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadReply.token)
  return _internal_token();
}
inline void RecordDownloadReply::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadReply.token)
}
inline std::string* RecordDownloadReply::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordDownloadReply.token)
  return _internal_mutable_token();
}
inline const std::string& RecordDownloadReply::_internal_token() const {
  return token_.Get();
}
inline void RecordDownloadReply::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordDownloadReply::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordDownloadReply.token)
}
inline void RecordDownloadReply::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordDownloadReply.token)
}
inline void RecordDownloadReply::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordDownloadReply.token)
}
inline std::string* RecordDownloadReply::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordDownloadReply::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.RecordDownloadReply.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDownloadReply::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordDownloadReply.token)
}
inline std::string* RecordDownloadReply::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordDownloadReply.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordDownloadReply::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordDownloadReply.token)
}

// int64 fileSize = 2;
inline void RecordDownloadReply::clear_filesize() {
  filesize_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecordDownloadReply::_internal_filesize() const {
  return filesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecordDownloadReply::filesize() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadReply.fileSize)
  return _internal_filesize();
}
inline void RecordDownloadReply::_internal_set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  filesize_ = value;
}
inline void RecordDownloadReply::set_filesize(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_filesize(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadReply.fileSize)
}

// int32 code = 3;
inline void RecordDownloadReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordDownloadReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordDownloadReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadReply.code)
  return _internal_code();
}
inline void RecordDownloadReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void RecordDownloadReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadReply.code)
}

// string msg = 4;
inline void RecordDownloadReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& RecordDownloadReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.RecordDownloadReply.msg)
  return _internal_msg();
}
inline void RecordDownloadReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.RecordDownloadReply.msg)
}
inline std::string* RecordDownloadReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.RecordDownloadReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& RecordDownloadReply::_internal_msg() const {
  return msg_.Get();
}
inline void RecordDownloadReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RecordDownloadReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.RecordDownloadReply.msg)
}
inline void RecordDownloadReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.RecordDownloadReply.msg)
}
inline void RecordDownloadReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.RecordDownloadReply.msg)
}
inline std::string* RecordDownloadReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RecordDownloadReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.RecordDownloadReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RecordDownloadReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.RecordDownloadReply.msg)
}
inline std::string* RecordDownloadReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.RecordDownloadReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RecordDownloadReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.RecordDownloadReply.msg)
}

// -------------------------------------------------------------------

// GetDeviceStatusRequest

// string mainId = 1;
inline void GetDeviceStatusRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceStatusRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetDeviceStatusRequest.mainId)
  return _internal_mainid();
}
inline void GetDeviceStatusRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetDeviceStatusRequest.mainId)
}
inline std::string* GetDeviceStatusRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetDeviceStatusRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& GetDeviceStatusRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void GetDeviceStatusRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceStatusRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetDeviceStatusRequest.mainId)
}
inline void GetDeviceStatusRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetDeviceStatusRequest.mainId)
}
inline void GetDeviceStatusRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetDeviceStatusRequest.mainId)
}
inline std::string* GetDeviceStatusRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceStatusRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.GetDeviceStatusRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceStatusRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetDeviceStatusRequest.mainId)
}
inline std::string* GetDeviceStatusRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetDeviceStatusRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceStatusRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetDeviceStatusRequest.mainId)
}

// string subId = 2;
inline void GetDeviceStatusRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceStatusRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.GetDeviceStatusRequest.subId)
  return _internal_subid();
}
inline void GetDeviceStatusRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.GetDeviceStatusRequest.subId)
}
inline std::string* GetDeviceStatusRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetDeviceStatusRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& GetDeviceStatusRequest::_internal_subid() const {
  return subid_.Get();
}
inline void GetDeviceStatusRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceStatusRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetDeviceStatusRequest.subId)
}
inline void GetDeviceStatusRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetDeviceStatusRequest.subId)
}
inline void GetDeviceStatusRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetDeviceStatusRequest.subId)
}
inline std::string* GetDeviceStatusRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceStatusRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.GetDeviceStatusRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceStatusRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetDeviceStatusRequest.subId)
}
inline std::string* GetDeviceStatusRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetDeviceStatusRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceStatusRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetDeviceStatusRequest.subId)
}

// -------------------------------------------------------------------

// GetDeviceStatusReply

// bool isOnline = 1;
inline void GetDeviceStatusReply::clear_isonline() {
  isonline_ = false;
}
inline bool GetDeviceStatusReply::_internal_isonline() const {
  return isonline_;
}
inline bool GetDeviceStatusReply::isonline() const {
  // @@protoc_insertion_point(field_get:GB28181.GetDeviceStatusReply.isOnline)
  return _internal_isonline();
}
inline void GetDeviceStatusReply::_internal_set_isonline(bool value) {
  
  isonline_ = value;
}
inline void GetDeviceStatusReply::set_isonline(bool value) {
  _internal_set_isonline(value);
  // @@protoc_insertion_point(field_set:GB28181.GetDeviceStatusReply.isOnline)
}

// int32 code = 2;
inline void GetDeviceStatusReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDeviceStatusReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDeviceStatusReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetDeviceStatusReply.code)
  return _internal_code();
}
inline void GetDeviceStatusReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetDeviceStatusReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetDeviceStatusReply.code)
}

// string msg = 3;
inline void GetDeviceStatusReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceStatusReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetDeviceStatusReply.msg)
  return _internal_msg();
}
inline void GetDeviceStatusReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetDeviceStatusReply.msg)
}
inline std::string* GetDeviceStatusReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetDeviceStatusReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetDeviceStatusReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetDeviceStatusReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceStatusReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetDeviceStatusReply.msg)
}
inline void GetDeviceStatusReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetDeviceStatusReply.msg)
}
inline void GetDeviceStatusReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetDeviceStatusReply.msg)
}
inline std::string* GetDeviceStatusReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceStatusReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetDeviceStatusReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceStatusReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetDeviceStatusReply.msg)
}
inline std::string* GetDeviceStatusReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetDeviceStatusReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceStatusReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetDeviceStatusReply.msg)
}

// -------------------------------------------------------------------

// GetAllDeviceStatusRequest

// -------------------------------------------------------------------

// StatusInfo

// string mainId = 1;
inline void StatusInfo::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusInfo::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.StatusInfo.mainId)
  return _internal_mainid();
}
inline void StatusInfo::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.StatusInfo.mainId)
}
inline std::string* StatusInfo::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.StatusInfo.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& StatusInfo::_internal_mainid() const {
  return mainid_.Get();
}
inline void StatusInfo::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusInfo::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StatusInfo.mainId)
}
inline void StatusInfo::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StatusInfo.mainId)
}
inline void StatusInfo::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StatusInfo.mainId)
}
inline std::string* StatusInfo::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusInfo::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.StatusInfo.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusInfo::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StatusInfo.mainId)
}
inline std::string* StatusInfo::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StatusInfo.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusInfo::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StatusInfo.mainId)
}

// string subId = 2;
inline void StatusInfo::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StatusInfo::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.StatusInfo.subId)
  return _internal_subid();
}
inline void StatusInfo::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.StatusInfo.subId)
}
inline std::string* StatusInfo::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.StatusInfo.subId)
  return _internal_mutable_subid();
}
inline const std::string& StatusInfo::_internal_subid() const {
  return subid_.Get();
}
inline void StatusInfo::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StatusInfo::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StatusInfo.subId)
}
inline void StatusInfo::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StatusInfo.subId)
}
inline void StatusInfo::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StatusInfo.subId)
}
inline std::string* StatusInfo::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StatusInfo::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.StatusInfo.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StatusInfo::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StatusInfo.subId)
}
inline std::string* StatusInfo::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StatusInfo.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StatusInfo::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StatusInfo.subId)
}

// bool isOnline = 3;
inline void StatusInfo::clear_isonline() {
  isonline_ = false;
}
inline bool StatusInfo::_internal_isonline() const {
  return isonline_;
}
inline bool StatusInfo::isonline() const {
  // @@protoc_insertion_point(field_get:GB28181.StatusInfo.isOnline)
  return _internal_isonline();
}
inline void StatusInfo::_internal_set_isonline(bool value) {
  
  isonline_ = value;
}
inline void StatusInfo::set_isonline(bool value) {
  _internal_set_isonline(value);
  // @@protoc_insertion_point(field_set:GB28181.StatusInfo.isOnline)
}

// -------------------------------------------------------------------

// GetAllDeviceStatusReply

// repeated .GB28181.StatusInfo statusInfoList = 1;
inline int GetAllDeviceStatusReply::_internal_statusinfolist_size() const {
  return statusinfolist_.size();
}
inline int GetAllDeviceStatusReply::statusinfolist_size() const {
  return _internal_statusinfolist_size();
}
inline void GetAllDeviceStatusReply::clear_statusinfolist() {
  statusinfolist_.Clear();
}
inline ::GB28181::StatusInfo* GetAllDeviceStatusReply::mutable_statusinfolist(int index) {
  // @@protoc_insertion_point(field_mutable:GB28181.GetAllDeviceStatusReply.statusInfoList)
  return statusinfolist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::StatusInfo >*
GetAllDeviceStatusReply::mutable_statusinfolist() {
  // @@protoc_insertion_point(field_mutable_list:GB28181.GetAllDeviceStatusReply.statusInfoList)
  return &statusinfolist_;
}
inline const ::GB28181::StatusInfo& GetAllDeviceStatusReply::_internal_statusinfolist(int index) const {
  return statusinfolist_.Get(index);
}
inline const ::GB28181::StatusInfo& GetAllDeviceStatusReply::statusinfolist(int index) const {
  // @@protoc_insertion_point(field_get:GB28181.GetAllDeviceStatusReply.statusInfoList)
  return _internal_statusinfolist(index);
}
inline ::GB28181::StatusInfo* GetAllDeviceStatusReply::_internal_add_statusinfolist() {
  return statusinfolist_.Add();
}
inline ::GB28181::StatusInfo* GetAllDeviceStatusReply::add_statusinfolist() {
  // @@protoc_insertion_point(field_add:GB28181.GetAllDeviceStatusReply.statusInfoList)
  return _internal_add_statusinfolist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::StatusInfo >&
GetAllDeviceStatusReply::statusinfolist() const {
  // @@protoc_insertion_point(field_list:GB28181.GetAllDeviceStatusReply.statusInfoList)
  return statusinfolist_;
}

// int32 code = 2;
inline void GetAllDeviceStatusReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAllDeviceStatusReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetAllDeviceStatusReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetAllDeviceStatusReply.code)
  return _internal_code();
}
inline void GetAllDeviceStatusReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetAllDeviceStatusReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetAllDeviceStatusReply.code)
}

// string msg = 3;
inline void GetAllDeviceStatusReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetAllDeviceStatusReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetAllDeviceStatusReply.msg)
  return _internal_msg();
}
inline void GetAllDeviceStatusReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetAllDeviceStatusReply.msg)
}
inline std::string* GetAllDeviceStatusReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetAllDeviceStatusReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetAllDeviceStatusReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetAllDeviceStatusReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetAllDeviceStatusReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetAllDeviceStatusReply.msg)
}
inline void GetAllDeviceStatusReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetAllDeviceStatusReply.msg)
}
inline void GetAllDeviceStatusReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetAllDeviceStatusReply.msg)
}
inline std::string* GetAllDeviceStatusReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetAllDeviceStatusReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetAllDeviceStatusReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetAllDeviceStatusReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetAllDeviceStatusReply.msg)
}
inline std::string* GetAllDeviceStatusReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetAllDeviceStatusReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetAllDeviceStatusReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetAllDeviceStatusReply.msg)
}

// -------------------------------------------------------------------

// GetDeviceListRequest

// -------------------------------------------------------------------

// DeviceList

// string mainId = 1;
inline void DeviceList::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceList::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.DeviceList.mainId)
  return _internal_mainid();
}
inline void DeviceList::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.DeviceList.mainId)
}
inline std::string* DeviceList::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.DeviceList.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& DeviceList::_internal_mainid() const {
  return mainid_.Get();
}
inline void DeviceList::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceList::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.DeviceList.mainId)
}
inline void DeviceList::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.DeviceList.mainId)
}
inline void DeviceList::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.DeviceList.mainId)
}
inline std::string* DeviceList::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceList::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.DeviceList.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceList::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.DeviceList.mainId)
}
inline std::string* DeviceList::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.DeviceList.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceList::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.DeviceList.mainId)
}

// string subId = 2;
inline void DeviceList::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceList::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.DeviceList.subId)
  return _internal_subid();
}
inline void DeviceList::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.DeviceList.subId)
}
inline std::string* DeviceList::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.DeviceList.subId)
  return _internal_mutable_subid();
}
inline const std::string& DeviceList::_internal_subid() const {
  return subid_.Get();
}
inline void DeviceList::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceList::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.DeviceList.subId)
}
inline void DeviceList::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.DeviceList.subId)
}
inline void DeviceList::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.DeviceList.subId)
}
inline std::string* DeviceList::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceList::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.DeviceList.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceList::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.DeviceList.subId)
}
inline std::string* DeviceList::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.DeviceList.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceList::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.DeviceList.subId)
}

// string name = 3;
inline void DeviceList::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceList::name() const {
  // @@protoc_insertion_point(field_get:GB28181.DeviceList.name)
  return _internal_name();
}
inline void DeviceList::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:GB28181.DeviceList.name)
}
inline std::string* DeviceList::mutable_name() {
  // @@protoc_insertion_point(field_mutable:GB28181.DeviceList.name)
  return _internal_mutable_name();
}
inline const std::string& DeviceList::_internal_name() const {
  return name_.Get();
}
inline void DeviceList::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceList::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.DeviceList.name)
}
inline void DeviceList::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.DeviceList.name)
}
inline void DeviceList::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.DeviceList.name)
}
inline std::string* DeviceList::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceList::release_name() {
  // @@protoc_insertion_point(field_release:GB28181.DeviceList.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceList::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.DeviceList.name)
}
inline std::string* DeviceList::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.DeviceList.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceList::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.DeviceList.name)
}

// string ip = 4;
inline void DeviceList::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceList::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.DeviceList.ip)
  return _internal_ip();
}
inline void DeviceList::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.DeviceList.ip)
}
inline std::string* DeviceList::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.DeviceList.ip)
  return _internal_mutable_ip();
}
inline const std::string& DeviceList::_internal_ip() const {
  return ip_.Get();
}
inline void DeviceList::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceList::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.DeviceList.ip)
}
inline void DeviceList::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.DeviceList.ip)
}
inline void DeviceList::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.DeviceList.ip)
}
inline std::string* DeviceList::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceList::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.DeviceList.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceList::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.DeviceList.ip)
}
inline std::string* DeviceList::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.DeviceList.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceList::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.DeviceList.ip)
}

// -------------------------------------------------------------------

// GetDeviceListReply

// repeated .GB28181.DeviceList deviceList = 1;
inline int GetDeviceListReply::_internal_devicelist_size() const {
  return devicelist_.size();
}
inline int GetDeviceListReply::devicelist_size() const {
  return _internal_devicelist_size();
}
inline void GetDeviceListReply::clear_devicelist() {
  devicelist_.Clear();
}
inline ::GB28181::DeviceList* GetDeviceListReply::mutable_devicelist(int index) {
  // @@protoc_insertion_point(field_mutable:GB28181.GetDeviceListReply.deviceList)
  return devicelist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::DeviceList >*
GetDeviceListReply::mutable_devicelist() {
  // @@protoc_insertion_point(field_mutable_list:GB28181.GetDeviceListReply.deviceList)
  return &devicelist_;
}
inline const ::GB28181::DeviceList& GetDeviceListReply::_internal_devicelist(int index) const {
  return devicelist_.Get(index);
}
inline const ::GB28181::DeviceList& GetDeviceListReply::devicelist(int index) const {
  // @@protoc_insertion_point(field_get:GB28181.GetDeviceListReply.deviceList)
  return _internal_devicelist(index);
}
inline ::GB28181::DeviceList* GetDeviceListReply::_internal_add_devicelist() {
  return devicelist_.Add();
}
inline ::GB28181::DeviceList* GetDeviceListReply::add_devicelist() {
  // @@protoc_insertion_point(field_add:GB28181.GetDeviceListReply.deviceList)
  return _internal_add_devicelist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::DeviceList >&
GetDeviceListReply::devicelist() const {
  // @@protoc_insertion_point(field_list:GB28181.GetDeviceListReply.deviceList)
  return devicelist_;
}

// int32 code = 2;
inline void GetDeviceListReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDeviceListReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetDeviceListReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.GetDeviceListReply.code)
  return _internal_code();
}
inline void GetDeviceListReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void GetDeviceListReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.GetDeviceListReply.code)
}

// string msg = 3;
inline void GetDeviceListReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetDeviceListReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.GetDeviceListReply.msg)
  return _internal_msg();
}
inline void GetDeviceListReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.GetDeviceListReply.msg)
}
inline std::string* GetDeviceListReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.GetDeviceListReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& GetDeviceListReply::_internal_msg() const {
  return msg_.Get();
}
inline void GetDeviceListReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetDeviceListReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.GetDeviceListReply.msg)
}
inline void GetDeviceListReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.GetDeviceListReply.msg)
}
inline void GetDeviceListReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.GetDeviceListReply.msg)
}
inline std::string* GetDeviceListReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetDeviceListReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.GetDeviceListReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetDeviceListReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.GetDeviceListReply.msg)
}
inline std::string* GetDeviceListReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.GetDeviceListReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetDeviceListReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.GetDeviceListReply.msg)
}

// -------------------------------------------------------------------

// DeviceRebootRequest

// string mainId = 1;
inline void DeviceRebootRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRebootRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.DeviceRebootRequest.mainId)
  return _internal_mainid();
}
inline void DeviceRebootRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.DeviceRebootRequest.mainId)
}
inline std::string* DeviceRebootRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.DeviceRebootRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& DeviceRebootRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void DeviceRebootRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRebootRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.DeviceRebootRequest.mainId)
}
inline void DeviceRebootRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.DeviceRebootRequest.mainId)
}
inline void DeviceRebootRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.DeviceRebootRequest.mainId)
}
inline std::string* DeviceRebootRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRebootRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.DeviceRebootRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRebootRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.DeviceRebootRequest.mainId)
}
inline std::string* DeviceRebootRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.DeviceRebootRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceRebootRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.DeviceRebootRequest.mainId)
}

// string subId = 2;
inline void DeviceRebootRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRebootRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.DeviceRebootRequest.subId)
  return _internal_subid();
}
inline void DeviceRebootRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.DeviceRebootRequest.subId)
}
inline std::string* DeviceRebootRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.DeviceRebootRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& DeviceRebootRequest::_internal_subid() const {
  return subid_.Get();
}
inline void DeviceRebootRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRebootRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.DeviceRebootRequest.subId)
}
inline void DeviceRebootRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.DeviceRebootRequest.subId)
}
inline void DeviceRebootRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.DeviceRebootRequest.subId)
}
inline std::string* DeviceRebootRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRebootRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.DeviceRebootRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRebootRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.DeviceRebootRequest.subId)
}
inline std::string* DeviceRebootRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.DeviceRebootRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceRebootRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.DeviceRebootRequest.subId)
}

// -------------------------------------------------------------------

// DeviceRebootReply

// int32 code = 1;
inline void DeviceRebootReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceRebootReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceRebootReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.DeviceRebootReply.code)
  return _internal_code();
}
inline void DeviceRebootReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void DeviceRebootReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.DeviceRebootReply.code)
}

// string msg = 2;
inline void DeviceRebootReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& DeviceRebootReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.DeviceRebootReply.msg)
  return _internal_msg();
}
inline void DeviceRebootReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.DeviceRebootReply.msg)
}
inline std::string* DeviceRebootReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.DeviceRebootReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& DeviceRebootReply::_internal_msg() const {
  return msg_.Get();
}
inline void DeviceRebootReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceRebootReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.DeviceRebootReply.msg)
}
inline void DeviceRebootReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.DeviceRebootReply.msg)
}
inline void DeviceRebootReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.DeviceRebootReply.msg)
}
inline std::string* DeviceRebootReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceRebootReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.DeviceRebootReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceRebootReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.DeviceRebootReply.msg)
}
inline std::string* DeviceRebootReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.DeviceRebootReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceRebootReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.DeviceRebootReply.msg)
}

// -------------------------------------------------------------------

// StartBroadcastRequest

// string mainId = 1;
inline void StartBroadcastRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartBroadcastRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.StartBroadcastRequest.mainId)
  return _internal_mainid();
}
inline void StartBroadcastRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.StartBroadcastRequest.mainId)
}
inline std::string* StartBroadcastRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartBroadcastRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& StartBroadcastRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void StartBroadcastRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartBroadcastRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartBroadcastRequest.mainId)
}
inline void StartBroadcastRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartBroadcastRequest.mainId)
}
inline void StartBroadcastRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartBroadcastRequest.mainId)
}
inline std::string* StartBroadcastRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartBroadcastRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.StartBroadcastRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartBroadcastRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartBroadcastRequest.mainId)
}
inline std::string* StartBroadcastRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartBroadcastRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartBroadcastRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartBroadcastRequest.mainId)
}

// string subId = 2;
inline void StartBroadcastRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartBroadcastRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.StartBroadcastRequest.subId)
  return _internal_subid();
}
inline void StartBroadcastRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.StartBroadcastRequest.subId)
}
inline std::string* StartBroadcastRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartBroadcastRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& StartBroadcastRequest::_internal_subid() const {
  return subid_.Get();
}
inline void StartBroadcastRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartBroadcastRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartBroadcastRequest.subId)
}
inline void StartBroadcastRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartBroadcastRequest.subId)
}
inline void StartBroadcastRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartBroadcastRequest.subId)
}
inline std::string* StartBroadcastRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartBroadcastRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.StartBroadcastRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartBroadcastRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartBroadcastRequest.subId)
}
inline std::string* StartBroadcastRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartBroadcastRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartBroadcastRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartBroadcastRequest.subId)
}

// -------------------------------------------------------------------

// StartBroadcastReply

// string destIp = 1;
inline void StartBroadcastReply::clear_destip() {
  destip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartBroadcastReply::destip() const {
  // @@protoc_insertion_point(field_get:GB28181.StartBroadcastReply.destIp)
  return _internal_destip();
}
inline void StartBroadcastReply::set_destip(const std::string& value) {
  _internal_set_destip(value);
  // @@protoc_insertion_point(field_set:GB28181.StartBroadcastReply.destIp)
}
inline std::string* StartBroadcastReply::mutable_destip() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartBroadcastReply.destIp)
  return _internal_mutable_destip();
}
inline const std::string& StartBroadcastReply::_internal_destip() const {
  return destip_.Get();
}
inline void StartBroadcastReply::_internal_set_destip(const std::string& value) {
  
  destip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartBroadcastReply::set_destip(std::string&& value) {
  
  destip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartBroadcastReply.destIp)
}
inline void StartBroadcastReply::set_destip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartBroadcastReply.destIp)
}
inline void StartBroadcastReply::set_destip(const char* value,
    size_t size) {
  
  destip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartBroadcastReply.destIp)
}
inline std::string* StartBroadcastReply::_internal_mutable_destip() {
  
  return destip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartBroadcastReply::release_destip() {
  // @@protoc_insertion_point(field_release:GB28181.StartBroadcastReply.destIp)
  return destip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartBroadcastReply::set_allocated_destip(std::string* destip) {
  if (destip != nullptr) {
    
  } else {
    
  }
  destip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartBroadcastReply.destIp)
}
inline std::string* StartBroadcastReply::unsafe_arena_release_destip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartBroadcastReply.destIp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return destip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartBroadcastReply::unsafe_arena_set_allocated_destip(
    std::string* destip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (destip != nullptr) {
    
  } else {
    
  }
  destip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartBroadcastReply.destIp)
}

// int32 destPort = 2;
inline void StartBroadcastReply::clear_destport() {
  destport_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartBroadcastReply::_internal_destport() const {
  return destport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartBroadcastReply::destport() const {
  // @@protoc_insertion_point(field_get:GB28181.StartBroadcastReply.destPort)
  return _internal_destport();
}
inline void StartBroadcastReply::_internal_set_destport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  destport_ = value;
}
inline void StartBroadcastReply::set_destport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_destport(value);
  // @@protoc_insertion_point(field_set:GB28181.StartBroadcastReply.destPort)
}

// string token = 3;
inline void StartBroadcastReply::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartBroadcastReply::token() const {
  // @@protoc_insertion_point(field_get:GB28181.StartBroadcastReply.token)
  return _internal_token();
}
inline void StartBroadcastReply::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.StartBroadcastReply.token)
}
inline std::string* StartBroadcastReply::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartBroadcastReply.token)
  return _internal_mutable_token();
}
inline const std::string& StartBroadcastReply::_internal_token() const {
  return token_.Get();
}
inline void StartBroadcastReply::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartBroadcastReply::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartBroadcastReply.token)
}
inline void StartBroadcastReply::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartBroadcastReply.token)
}
inline void StartBroadcastReply::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartBroadcastReply.token)
}
inline std::string* StartBroadcastReply::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartBroadcastReply::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.StartBroadcastReply.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartBroadcastReply::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartBroadcastReply.token)
}
inline std::string* StartBroadcastReply::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartBroadcastReply.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartBroadcastReply::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartBroadcastReply.token)
}

// int32 code = 4;
inline void StartBroadcastReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartBroadcastReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartBroadcastReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.StartBroadcastReply.code)
  return _internal_code();
}
inline void StartBroadcastReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void StartBroadcastReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.StartBroadcastReply.code)
}

// string msg = 5;
inline void StartBroadcastReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartBroadcastReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.StartBroadcastReply.msg)
  return _internal_msg();
}
inline void StartBroadcastReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.StartBroadcastReply.msg)
}
inline std::string* StartBroadcastReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartBroadcastReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& StartBroadcastReply::_internal_msg() const {
  return msg_.Get();
}
inline void StartBroadcastReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartBroadcastReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartBroadcastReply.msg)
}
inline void StartBroadcastReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartBroadcastReply.msg)
}
inline void StartBroadcastReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartBroadcastReply.msg)
}
inline std::string* StartBroadcastReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartBroadcastReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.StartBroadcastReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartBroadcastReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartBroadcastReply.msg)
}
inline std::string* StartBroadcastReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartBroadcastReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartBroadcastReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartBroadcastReply.msg)
}

// -------------------------------------------------------------------

// StopBroadcastRequest

// string token = 1;
inline void StopBroadcastRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopBroadcastRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.StopBroadcastRequest.token)
  return _internal_token();
}
inline void StopBroadcastRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.StopBroadcastRequest.token)
}
inline std::string* StopBroadcastRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopBroadcastRequest.token)
  return _internal_mutable_token();
}
inline const std::string& StopBroadcastRequest::_internal_token() const {
  return token_.Get();
}
inline void StopBroadcastRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopBroadcastRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopBroadcastRequest.token)
}
inline void StopBroadcastRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopBroadcastRequest.token)
}
inline void StopBroadcastRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopBroadcastRequest.token)
}
inline std::string* StopBroadcastRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopBroadcastRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.StopBroadcastRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopBroadcastRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopBroadcastRequest.token)
}
inline std::string* StopBroadcastRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopBroadcastRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopBroadcastRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopBroadcastRequest.token)
}

// -------------------------------------------------------------------

// StopBroadcastReply

// int32 code = 1;
inline void StopBroadcastReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopBroadcastReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopBroadcastReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.StopBroadcastReply.code)
  return _internal_code();
}
inline void StopBroadcastReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void StopBroadcastReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.StopBroadcastReply.code)
}

// string msg = 2;
inline void StopBroadcastReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopBroadcastReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.StopBroadcastReply.msg)
  return _internal_msg();
}
inline void StopBroadcastReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.StopBroadcastReply.msg)
}
inline std::string* StopBroadcastReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopBroadcastReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& StopBroadcastReply::_internal_msg() const {
  return msg_.Get();
}
inline void StopBroadcastReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopBroadcastReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopBroadcastReply.msg)
}
inline void StopBroadcastReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopBroadcastReply.msg)
}
inline void StopBroadcastReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopBroadcastReply.msg)
}
inline std::string* StopBroadcastReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopBroadcastReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.StopBroadcastReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopBroadcastReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopBroadcastReply.msg)
}
inline std::string* StopBroadcastReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopBroadcastReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopBroadcastReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopBroadcastReply.msg)
}

// -------------------------------------------------------------------

// StartTalkRequest

// string mainId = 1;
inline void StartTalkRequest::clear_mainid() {
  mainid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartTalkRequest::mainid() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkRequest.mainId)
  return _internal_mainid();
}
inline void StartTalkRequest::set_mainid(const std::string& value) {
  _internal_set_mainid(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkRequest.mainId)
}
inline std::string* StartTalkRequest::mutable_mainid() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartTalkRequest.mainId)
  return _internal_mutable_mainid();
}
inline const std::string& StartTalkRequest::_internal_mainid() const {
  return mainid_.Get();
}
inline void StartTalkRequest::_internal_set_mainid(const std::string& value) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartTalkRequest::set_mainid(std::string&& value) {
  
  mainid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartTalkRequest.mainId)
}
inline void StartTalkRequest::set_mainid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartTalkRequest.mainId)
}
inline void StartTalkRequest::set_mainid(const char* value,
    size_t size) {
  
  mainid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartTalkRequest.mainId)
}
inline std::string* StartTalkRequest::_internal_mutable_mainid() {
  
  return mainid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartTalkRequest::release_mainid() {
  // @@protoc_insertion_point(field_release:GB28181.StartTalkRequest.mainId)
  return mainid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTalkRequest::set_allocated_mainid(std::string* mainid) {
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mainid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartTalkRequest.mainId)
}
inline std::string* StartTalkRequest::unsafe_arena_release_mainid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartTalkRequest.mainId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return mainid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartTalkRequest::unsafe_arena_set_allocated_mainid(
    std::string* mainid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (mainid != nullptr) {
    
  } else {
    
  }
  mainid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      mainid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartTalkRequest.mainId)
}

// string subId = 2;
inline void StartTalkRequest::clear_subid() {
  subid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartTalkRequest::subid() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkRequest.subId)
  return _internal_subid();
}
inline void StartTalkRequest::set_subid(const std::string& value) {
  _internal_set_subid(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkRequest.subId)
}
inline std::string* StartTalkRequest::mutable_subid() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartTalkRequest.subId)
  return _internal_mutable_subid();
}
inline const std::string& StartTalkRequest::_internal_subid() const {
  return subid_.Get();
}
inline void StartTalkRequest::_internal_set_subid(const std::string& value) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartTalkRequest::set_subid(std::string&& value) {
  
  subid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartTalkRequest.subId)
}
inline void StartTalkRequest::set_subid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartTalkRequest.subId)
}
inline void StartTalkRequest::set_subid(const char* value,
    size_t size) {
  
  subid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartTalkRequest.subId)
}
inline std::string* StartTalkRequest::_internal_mutable_subid() {
  
  return subid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartTalkRequest::release_subid() {
  // @@protoc_insertion_point(field_release:GB28181.StartTalkRequest.subId)
  return subid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTalkRequest::set_allocated_subid(std::string* subid) {
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartTalkRequest.subId)
}
inline std::string* StartTalkRequest::unsafe_arena_release_subid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartTalkRequest.subId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return subid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartTalkRequest::unsafe_arena_set_allocated_subid(
    std::string* subid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (subid != nullptr) {
    
  } else {
    
  }
  subid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      subid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartTalkRequest.subId)
}

// string ip = 3;
inline void StartTalkRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartTalkRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkRequest.ip)
  return _internal_ip();
}
inline void StartTalkRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkRequest.ip)
}
inline std::string* StartTalkRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartTalkRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& StartTalkRequest::_internal_ip() const {
  return ip_.Get();
}
inline void StartTalkRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartTalkRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartTalkRequest.ip)
}
inline void StartTalkRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartTalkRequest.ip)
}
inline void StartTalkRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartTalkRequest.ip)
}
inline std::string* StartTalkRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartTalkRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.StartTalkRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTalkRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartTalkRequest.ip)
}
inline std::string* StartTalkRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartTalkRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartTalkRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartTalkRequest.ip)
}

// int32 port = 4;
inline void StartTalkRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartTalkRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartTalkRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkRequest.port)
  return _internal_port();
}
inline void StartTalkRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void StartTalkRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkRequest.port)
}

// -------------------------------------------------------------------

// StartTalkReply

// string ip = 1;
inline void StartTalkReply::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartTalkReply::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkReply.ip)
  return _internal_ip();
}
inline void StartTalkReply::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkReply.ip)
}
inline std::string* StartTalkReply::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartTalkReply.ip)
  return _internal_mutable_ip();
}
inline const std::string& StartTalkReply::_internal_ip() const {
  return ip_.Get();
}
inline void StartTalkReply::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartTalkReply::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartTalkReply.ip)
}
inline void StartTalkReply::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartTalkReply.ip)
}
inline void StartTalkReply::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartTalkReply.ip)
}
inline std::string* StartTalkReply::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartTalkReply::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.StartTalkReply.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTalkReply::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartTalkReply.ip)
}
inline std::string* StartTalkReply::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartTalkReply.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartTalkReply::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartTalkReply.ip)
}

// int32 port = 2;
inline void StartTalkReply::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartTalkReply::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartTalkReply::port() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkReply.port)
  return _internal_port();
}
inline void StartTalkReply::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void StartTalkReply::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkReply.port)
}

// string token = 3;
inline void StartTalkReply::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartTalkReply::token() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkReply.token)
  return _internal_token();
}
inline void StartTalkReply::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkReply.token)
}
inline std::string* StartTalkReply::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartTalkReply.token)
  return _internal_mutable_token();
}
inline const std::string& StartTalkReply::_internal_token() const {
  return token_.Get();
}
inline void StartTalkReply::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartTalkReply::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartTalkReply.token)
}
inline void StartTalkReply::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartTalkReply.token)
}
inline void StartTalkReply::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartTalkReply.token)
}
inline std::string* StartTalkReply::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartTalkReply::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.StartTalkReply.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTalkReply::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartTalkReply.token)
}
inline std::string* StartTalkReply::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartTalkReply.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartTalkReply::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartTalkReply.token)
}

// int32 code = 4;
inline void StartTalkReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartTalkReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StartTalkReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkReply.code)
  return _internal_code();
}
inline void StartTalkReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void StartTalkReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkReply.code)
}

// string msg = 5;
inline void StartTalkReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StartTalkReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.StartTalkReply.msg)
  return _internal_msg();
}
inline void StartTalkReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.StartTalkReply.msg)
}
inline std::string* StartTalkReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.StartTalkReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& StartTalkReply::_internal_msg() const {
  return msg_.Get();
}
inline void StartTalkReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StartTalkReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StartTalkReply.msg)
}
inline void StartTalkReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StartTalkReply.msg)
}
inline void StartTalkReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StartTalkReply.msg)
}
inline std::string* StartTalkReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StartTalkReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.StartTalkReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StartTalkReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StartTalkReply.msg)
}
inline std::string* StartTalkReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StartTalkReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StartTalkReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StartTalkReply.msg)
}

// -------------------------------------------------------------------

// StopTalkRequest

// string token = 1;
inline void StopTalkRequest::clear_token() {
  token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopTalkRequest::token() const {
  // @@protoc_insertion_point(field_get:GB28181.StopTalkRequest.token)
  return _internal_token();
}
inline void StopTalkRequest::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:GB28181.StopTalkRequest.token)
}
inline std::string* StopTalkRequest::mutable_token() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopTalkRequest.token)
  return _internal_mutable_token();
}
inline const std::string& StopTalkRequest::_internal_token() const {
  return token_.Get();
}
inline void StopTalkRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopTalkRequest::set_token(std::string&& value) {
  
  token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopTalkRequest.token)
}
inline void StopTalkRequest::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopTalkRequest.token)
}
inline void StopTalkRequest::set_token(const char* value,
    size_t size) {
  
  token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopTalkRequest.token)
}
inline std::string* StopTalkRequest::_internal_mutable_token() {
  
  return token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopTalkRequest::release_token() {
  // @@protoc_insertion_point(field_release:GB28181.StopTalkRequest.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTalkRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopTalkRequest.token)
}
inline std::string* StopTalkRequest::unsafe_arena_release_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopTalkRequest.token)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopTalkRequest::unsafe_arena_set_allocated_token(
    std::string* token) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (token != nullptr) {
    
  } else {
    
  }
  token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      token, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopTalkRequest.token)
}

// -------------------------------------------------------------------

// StopTalkReply

// int32 code = 1;
inline void StopTalkReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopTalkReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StopTalkReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.StopTalkReply.code)
  return _internal_code();
}
inline void StopTalkReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void StopTalkReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.StopTalkReply.code)
}

// string msg = 2;
inline void StopTalkReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& StopTalkReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.StopTalkReply.msg)
  return _internal_msg();
}
inline void StopTalkReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.StopTalkReply.msg)
}
inline std::string* StopTalkReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.StopTalkReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& StopTalkReply::_internal_msg() const {
  return msg_.Get();
}
inline void StopTalkReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void StopTalkReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.StopTalkReply.msg)
}
inline void StopTalkReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.StopTalkReply.msg)
}
inline void StopTalkReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.StopTalkReply.msg)
}
inline std::string* StopTalkReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* StopTalkReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.StopTalkReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void StopTalkReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.StopTalkReply.msg)
}
inline std::string* StopTalkReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.StopTalkReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void StopTalkReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.StopTalkReply.msg)
}

// -------------------------------------------------------------------

// ServiceStatusRequest

// -------------------------------------------------------------------

// ServiceStatusReply

// string ip = 1;
inline void ServiceStatusReply::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceStatusReply::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.ServiceStatusReply.ip)
  return _internal_ip();
}
inline void ServiceStatusReply::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.ServiceStatusReply.ip)
}
inline std::string* ServiceStatusReply::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.ServiceStatusReply.ip)
  return _internal_mutable_ip();
}
inline const std::string& ServiceStatusReply::_internal_ip() const {
  return ip_.Get();
}
inline void ServiceStatusReply::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceStatusReply::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.ServiceStatusReply.ip)
}
inline void ServiceStatusReply::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.ServiceStatusReply.ip)
}
inline void ServiceStatusReply::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.ServiceStatusReply.ip)
}
inline std::string* ServiceStatusReply::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceStatusReply::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.ServiceStatusReply.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceStatusReply::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.ServiceStatusReply.ip)
}
inline std::string* ServiceStatusReply::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.ServiceStatusReply.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceStatusReply::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.ServiceStatusReply.ip)
}

// uint64 diskTotalSize = 2;
inline void ServiceStatusReply::clear_disktotalsize() {
  disktotalsize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceStatusReply::_internal_disktotalsize() const {
  return disktotalsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceStatusReply::disktotalsize() const {
  // @@protoc_insertion_point(field_get:GB28181.ServiceStatusReply.diskTotalSize)
  return _internal_disktotalsize();
}
inline void ServiceStatusReply::_internal_set_disktotalsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  disktotalsize_ = value;
}
inline void ServiceStatusReply::set_disktotalsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_disktotalsize(value);
  // @@protoc_insertion_point(field_set:GB28181.ServiceStatusReply.diskTotalSize)
}

// uint64 diskUsedSize = 3;
inline void ServiceStatusReply::clear_diskusedsize() {
  diskusedsize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceStatusReply::_internal_diskusedsize() const {
  return diskusedsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceStatusReply::diskusedsize() const {
  // @@protoc_insertion_point(field_get:GB28181.ServiceStatusReply.diskUsedSize)
  return _internal_diskusedsize();
}
inline void ServiceStatusReply::_internal_set_diskusedsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  diskusedsize_ = value;
}
inline void ServiceStatusReply::set_diskusedsize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_diskusedsize(value);
  // @@protoc_insertion_point(field_set:GB28181.ServiceStatusReply.diskUsedSize)
}

// uint64 diskAvilableSize = 4;
inline void ServiceStatusReply::clear_diskavilablesize() {
  diskavilablesize_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceStatusReply::_internal_diskavilablesize() const {
  return diskavilablesize_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 ServiceStatusReply::diskavilablesize() const {
  // @@protoc_insertion_point(field_get:GB28181.ServiceStatusReply.diskAvilableSize)
  return _internal_diskavilablesize();
}
inline void ServiceStatusReply::_internal_set_diskavilablesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  diskavilablesize_ = value;
}
inline void ServiceStatusReply::set_diskavilablesize(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_diskavilablesize(value);
  // @@protoc_insertion_point(field_set:GB28181.ServiceStatusReply.diskAvilableSize)
}

// string SipId = 5;
inline void ServiceStatusReply::clear_sipid() {
  sipid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceStatusReply::sipid() const {
  // @@protoc_insertion_point(field_get:GB28181.ServiceStatusReply.SipId)
  return _internal_sipid();
}
inline void ServiceStatusReply::set_sipid(const std::string& value) {
  _internal_set_sipid(value);
  // @@protoc_insertion_point(field_set:GB28181.ServiceStatusReply.SipId)
}
inline std::string* ServiceStatusReply::mutable_sipid() {
  // @@protoc_insertion_point(field_mutable:GB28181.ServiceStatusReply.SipId)
  return _internal_mutable_sipid();
}
inline const std::string& ServiceStatusReply::_internal_sipid() const {
  return sipid_.Get();
}
inline void ServiceStatusReply::_internal_set_sipid(const std::string& value) {
  
  sipid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceStatusReply::set_sipid(std::string&& value) {
  
  sipid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.ServiceStatusReply.SipId)
}
inline void ServiceStatusReply::set_sipid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sipid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.ServiceStatusReply.SipId)
}
inline void ServiceStatusReply::set_sipid(const char* value,
    size_t size) {
  
  sipid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.ServiceStatusReply.SipId)
}
inline std::string* ServiceStatusReply::_internal_mutable_sipid() {
  
  return sipid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceStatusReply::release_sipid() {
  // @@protoc_insertion_point(field_release:GB28181.ServiceStatusReply.SipId)
  return sipid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceStatusReply::set_allocated_sipid(std::string* sipid) {
  if (sipid != nullptr) {
    
  } else {
    
  }
  sipid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sipid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.ServiceStatusReply.SipId)
}
inline std::string* ServiceStatusReply::unsafe_arena_release_sipid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.ServiceStatusReply.SipId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return sipid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceStatusReply::unsafe_arena_set_allocated_sipid(
    std::string* sipid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sipid != nullptr) {
    
  } else {
    
  }
  sipid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sipid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.ServiceStatusReply.SipId)
}

// int32 port = 6;
inline void ServiceStatusReply::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceStatusReply::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceStatusReply::port() const {
  // @@protoc_insertion_point(field_get:GB28181.ServiceStatusReply.port)
  return _internal_port();
}
inline void ServiceStatusReply::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void ServiceStatusReply::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.ServiceStatusReply.port)
}

// int32 code = 7;
inline void ServiceStatusReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceStatusReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServiceStatusReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.ServiceStatusReply.code)
  return _internal_code();
}
inline void ServiceStatusReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void ServiceStatusReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.ServiceStatusReply.code)
}

// string msg = 8;
inline void ServiceStatusReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& ServiceStatusReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.ServiceStatusReply.msg)
  return _internal_msg();
}
inline void ServiceStatusReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.ServiceStatusReply.msg)
}
inline std::string* ServiceStatusReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.ServiceStatusReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& ServiceStatusReply::_internal_msg() const {
  return msg_.Get();
}
inline void ServiceStatusReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ServiceStatusReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.ServiceStatusReply.msg)
}
inline void ServiceStatusReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.ServiceStatusReply.msg)
}
inline void ServiceStatusReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.ServiceStatusReply.msg)
}
inline std::string* ServiceStatusReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ServiceStatusReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.ServiceStatusReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceStatusReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.ServiceStatusReply.msg)
}
inline std::string* ServiceStatusReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.ServiceStatusReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ServiceStatusReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.ServiceStatusReply.msg)
}

// -------------------------------------------------------------------

// OnvifPtzMoveRequest

// string ip = 1;
inline void OnvifPtzMoveRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtzMoveRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveRequest.ip)
  return _internal_ip();
}
inline void OnvifPtzMoveRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveRequest.ip)
}
inline std::string* OnvifPtzMoveRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtzMoveRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifPtzMoveRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifPtzMoveRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtzMoveRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtzMoveRequest.ip)
}
inline void OnvifPtzMoveRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtzMoveRequest.ip)
}
inline void OnvifPtzMoveRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtzMoveRequest.ip)
}
inline std::string* OnvifPtzMoveRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtzMoveRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtzMoveRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtzMoveRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtzMoveRequest.ip)
}
inline std::string* OnvifPtzMoveRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtzMoveRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtzMoveRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtzMoveRequest.ip)
}

// int32 port = 2;
inline void OnvifPtzMoveRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzMoveRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzMoveRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveRequest.port)
  return _internal_port();
}
inline void OnvifPtzMoveRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifPtzMoveRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveRequest.port)
}

// string user = 3;
inline void OnvifPtzMoveRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtzMoveRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveRequest.user)
  return _internal_user();
}
inline void OnvifPtzMoveRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveRequest.user)
}
inline std::string* OnvifPtzMoveRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtzMoveRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifPtzMoveRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifPtzMoveRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtzMoveRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtzMoveRequest.user)
}
inline void OnvifPtzMoveRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtzMoveRequest.user)
}
inline void OnvifPtzMoveRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtzMoveRequest.user)
}
inline std::string* OnvifPtzMoveRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtzMoveRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtzMoveRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtzMoveRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtzMoveRequest.user)
}
inline std::string* OnvifPtzMoveRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtzMoveRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtzMoveRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtzMoveRequest.user)
}

// string password = 4;
inline void OnvifPtzMoveRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtzMoveRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveRequest.password)
  return _internal_password();
}
inline void OnvifPtzMoveRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveRequest.password)
}
inline std::string* OnvifPtzMoveRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtzMoveRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifPtzMoveRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifPtzMoveRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtzMoveRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtzMoveRequest.password)
}
inline void OnvifPtzMoveRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtzMoveRequest.password)
}
inline void OnvifPtzMoveRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtzMoveRequest.password)
}
inline std::string* OnvifPtzMoveRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtzMoveRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtzMoveRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtzMoveRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtzMoveRequest.password)
}
inline std::string* OnvifPtzMoveRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtzMoveRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtzMoveRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtzMoveRequest.password)
}

// int32 channel = 5;
inline void OnvifPtzMoveRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzMoveRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzMoveRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveRequest.channel)
  return _internal_channel();
}
inline void OnvifPtzMoveRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifPtzMoveRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveRequest.channel)
}

// int32 directory = 6;
inline void OnvifPtzMoveRequest::clear_directory() {
  directory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzMoveRequest::_internal_directory() const {
  return directory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzMoveRequest::directory() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveRequest.directory)
  return _internal_directory();
}
inline void OnvifPtzMoveRequest::_internal_set_directory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  directory_ = value;
}
inline void OnvifPtzMoveRequest::set_directory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_directory(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveRequest.directory)
}

// float speed = 7;
inline void OnvifPtzMoveRequest::clear_speed() {
  speed_ = 0;
}
inline float OnvifPtzMoveRequest::_internal_speed() const {
  return speed_;
}
inline float OnvifPtzMoveRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveRequest.speed)
  return _internal_speed();
}
inline void OnvifPtzMoveRequest::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void OnvifPtzMoveRequest::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveRequest.speed)
}

// -------------------------------------------------------------------

// OnvifPtzMoveReply

// int32 code = 1;
inline void OnvifPtzMoveReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzMoveReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzMoveReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveReply.code)
  return _internal_code();
}
inline void OnvifPtzMoveReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifPtzMoveReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveReply.code)
}

// string msg = 2;
inline void OnvifPtzMoveReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtzMoveReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzMoveReply.msg)
  return _internal_msg();
}
inline void OnvifPtzMoveReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzMoveReply.msg)
}
inline std::string* OnvifPtzMoveReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtzMoveReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifPtzMoveReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifPtzMoveReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtzMoveReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtzMoveReply.msg)
}
inline void OnvifPtzMoveReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtzMoveReply.msg)
}
inline void OnvifPtzMoveReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtzMoveReply.msg)
}
inline std::string* OnvifPtzMoveReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtzMoveReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtzMoveReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtzMoveReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtzMoveReply.msg)
}
inline std::string* OnvifPtzMoveReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtzMoveReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtzMoveReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtzMoveReply.msg)
}

// -------------------------------------------------------------------

// OnvifPtzStopRequest

// string ip = 1;
inline void OnvifPtzStopRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtzStopRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzStopRequest.ip)
  return _internal_ip();
}
inline void OnvifPtzStopRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzStopRequest.ip)
}
inline std::string* OnvifPtzStopRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtzStopRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifPtzStopRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifPtzStopRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtzStopRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtzStopRequest.ip)
}
inline void OnvifPtzStopRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtzStopRequest.ip)
}
inline void OnvifPtzStopRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtzStopRequest.ip)
}
inline std::string* OnvifPtzStopRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtzStopRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtzStopRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtzStopRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtzStopRequest.ip)
}
inline std::string* OnvifPtzStopRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtzStopRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtzStopRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtzStopRequest.ip)
}

// int32 port = 2;
inline void OnvifPtzStopRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzStopRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzStopRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzStopRequest.port)
  return _internal_port();
}
inline void OnvifPtzStopRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifPtzStopRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzStopRequest.port)
}

// string user = 3;
inline void OnvifPtzStopRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtzStopRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzStopRequest.user)
  return _internal_user();
}
inline void OnvifPtzStopRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzStopRequest.user)
}
inline std::string* OnvifPtzStopRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtzStopRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifPtzStopRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifPtzStopRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtzStopRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtzStopRequest.user)
}
inline void OnvifPtzStopRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtzStopRequest.user)
}
inline void OnvifPtzStopRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtzStopRequest.user)
}
inline std::string* OnvifPtzStopRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtzStopRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtzStopRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtzStopRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtzStopRequest.user)
}
inline std::string* OnvifPtzStopRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtzStopRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtzStopRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtzStopRequest.user)
}

// string password = 4;
inline void OnvifPtzStopRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtzStopRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzStopRequest.password)
  return _internal_password();
}
inline void OnvifPtzStopRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzStopRequest.password)
}
inline std::string* OnvifPtzStopRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtzStopRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifPtzStopRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifPtzStopRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtzStopRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtzStopRequest.password)
}
inline void OnvifPtzStopRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtzStopRequest.password)
}
inline void OnvifPtzStopRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtzStopRequest.password)
}
inline std::string* OnvifPtzStopRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtzStopRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtzStopRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtzStopRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtzStopRequest.password)
}
inline std::string* OnvifPtzStopRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtzStopRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtzStopRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtzStopRequest.password)
}

// int32 channel = 5;
inline void OnvifPtzStopRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzStopRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzStopRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzStopRequest.channel)
  return _internal_channel();
}
inline void OnvifPtzStopRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifPtzStopRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzStopRequest.channel)
}

// -------------------------------------------------------------------

// OnvifPtzStopReply

// int32 code = 1;
inline void OnvifPtzStopReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzStopReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtzStopReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzStopReply.code)
  return _internal_code();
}
inline void OnvifPtzStopReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifPtzStopReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzStopReply.code)
}

// string msg = 2;
inline void OnvifPtzStopReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtzStopReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtzStopReply.msg)
  return _internal_msg();
}
inline void OnvifPtzStopReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtzStopReply.msg)
}
inline std::string* OnvifPtzStopReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtzStopReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifPtzStopReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifPtzStopReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtzStopReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtzStopReply.msg)
}
inline void OnvifPtzStopReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtzStopReply.msg)
}
inline void OnvifPtzStopReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtzStopReply.msg)
}
inline std::string* OnvifPtzStopReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtzStopReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtzStopReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtzStopReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtzStopReply.msg)
}
inline std::string* OnvifPtzStopReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtzStopReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtzStopReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtzStopReply.msg)
}

// -------------------------------------------------------------------

// OnvifZoomInRequest

// string ip = 1;
inline void OnvifZoomInRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomInRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomInRequest.ip)
  return _internal_ip();
}
inline void OnvifZoomInRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomInRequest.ip)
}
inline std::string* OnvifZoomInRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomInRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifZoomInRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifZoomInRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomInRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomInRequest.ip)
}
inline void OnvifZoomInRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomInRequest.ip)
}
inline void OnvifZoomInRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomInRequest.ip)
}
inline std::string* OnvifZoomInRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomInRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomInRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomInRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomInRequest.ip)
}
inline std::string* OnvifZoomInRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomInRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomInRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomInRequest.ip)
}

// int32 port = 2;
inline void OnvifZoomInRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomInRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomInRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomInRequest.port)
  return _internal_port();
}
inline void OnvifZoomInRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifZoomInRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomInRequest.port)
}

// string user = 3;
inline void OnvifZoomInRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomInRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomInRequest.user)
  return _internal_user();
}
inline void OnvifZoomInRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomInRequest.user)
}
inline std::string* OnvifZoomInRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomInRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifZoomInRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifZoomInRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomInRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomInRequest.user)
}
inline void OnvifZoomInRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomInRequest.user)
}
inline void OnvifZoomInRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomInRequest.user)
}
inline std::string* OnvifZoomInRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomInRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomInRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomInRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomInRequest.user)
}
inline std::string* OnvifZoomInRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomInRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomInRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomInRequest.user)
}

// string password = 4;
inline void OnvifZoomInRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomInRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomInRequest.password)
  return _internal_password();
}
inline void OnvifZoomInRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomInRequest.password)
}
inline std::string* OnvifZoomInRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomInRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifZoomInRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifZoomInRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomInRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomInRequest.password)
}
inline void OnvifZoomInRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomInRequest.password)
}
inline void OnvifZoomInRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomInRequest.password)
}
inline std::string* OnvifZoomInRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomInRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomInRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomInRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomInRequest.password)
}
inline std::string* OnvifZoomInRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomInRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomInRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomInRequest.password)
}

// int32 channel = 5;
inline void OnvifZoomInRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomInRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomInRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomInRequest.channel)
  return _internal_channel();
}
inline void OnvifZoomInRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifZoomInRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomInRequest.channel)
}

// float speed = 6;
inline void OnvifZoomInRequest::clear_speed() {
  speed_ = 0;
}
inline float OnvifZoomInRequest::_internal_speed() const {
  return speed_;
}
inline float OnvifZoomInRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomInRequest.speed)
  return _internal_speed();
}
inline void OnvifZoomInRequest::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void OnvifZoomInRequest::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomInRequest.speed)
}

// -------------------------------------------------------------------

// OnvifZoomInReply

// int32 code = 1;
inline void OnvifZoomInReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomInReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomInReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomInReply.code)
  return _internal_code();
}
inline void OnvifZoomInReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifZoomInReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomInReply.code)
}

// string msg = 2;
inline void OnvifZoomInReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomInReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomInReply.msg)
  return _internal_msg();
}
inline void OnvifZoomInReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomInReply.msg)
}
inline std::string* OnvifZoomInReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomInReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifZoomInReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifZoomInReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomInReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomInReply.msg)
}
inline void OnvifZoomInReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomInReply.msg)
}
inline void OnvifZoomInReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomInReply.msg)
}
inline std::string* OnvifZoomInReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomInReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomInReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomInReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomInReply.msg)
}
inline std::string* OnvifZoomInReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomInReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomInReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomInReply.msg)
}

// -------------------------------------------------------------------

// OnvifZoomOutRequest

// string ip = 1;
inline void OnvifZoomOutRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomOutRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomOutRequest.ip)
  return _internal_ip();
}
inline void OnvifZoomOutRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomOutRequest.ip)
}
inline std::string* OnvifZoomOutRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomOutRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifZoomOutRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifZoomOutRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomOutRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomOutRequest.ip)
}
inline void OnvifZoomOutRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomOutRequest.ip)
}
inline void OnvifZoomOutRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomOutRequest.ip)
}
inline std::string* OnvifZoomOutRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomOutRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomOutRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomOutRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomOutRequest.ip)
}
inline std::string* OnvifZoomOutRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomOutRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomOutRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomOutRequest.ip)
}

// int32 port = 2;
inline void OnvifZoomOutRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomOutRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomOutRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomOutRequest.port)
  return _internal_port();
}
inline void OnvifZoomOutRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifZoomOutRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomOutRequest.port)
}

// string user = 3;
inline void OnvifZoomOutRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomOutRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomOutRequest.user)
  return _internal_user();
}
inline void OnvifZoomOutRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomOutRequest.user)
}
inline std::string* OnvifZoomOutRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomOutRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifZoomOutRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifZoomOutRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomOutRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomOutRequest.user)
}
inline void OnvifZoomOutRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomOutRequest.user)
}
inline void OnvifZoomOutRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomOutRequest.user)
}
inline std::string* OnvifZoomOutRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomOutRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomOutRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomOutRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomOutRequest.user)
}
inline std::string* OnvifZoomOutRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomOutRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomOutRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomOutRequest.user)
}

// string password = 4;
inline void OnvifZoomOutRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomOutRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomOutRequest.password)
  return _internal_password();
}
inline void OnvifZoomOutRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomOutRequest.password)
}
inline std::string* OnvifZoomOutRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomOutRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifZoomOutRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifZoomOutRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomOutRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomOutRequest.password)
}
inline void OnvifZoomOutRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomOutRequest.password)
}
inline void OnvifZoomOutRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomOutRequest.password)
}
inline std::string* OnvifZoomOutRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomOutRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomOutRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomOutRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomOutRequest.password)
}
inline std::string* OnvifZoomOutRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomOutRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomOutRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomOutRequest.password)
}

// int32 channel = 5;
inline void OnvifZoomOutRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomOutRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomOutRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomOutRequest.channel)
  return _internal_channel();
}
inline void OnvifZoomOutRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifZoomOutRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomOutRequest.channel)
}

// float speed = 6;
inline void OnvifZoomOutRequest::clear_speed() {
  speed_ = 0;
}
inline float OnvifZoomOutRequest::_internal_speed() const {
  return speed_;
}
inline float OnvifZoomOutRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomOutRequest.speed)
  return _internal_speed();
}
inline void OnvifZoomOutRequest::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void OnvifZoomOutRequest::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomOutRequest.speed)
}

// -------------------------------------------------------------------

// OnvifZoomOutReply

// int32 code = 1;
inline void OnvifZoomOutReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomOutReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomOutReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomOutReply.code)
  return _internal_code();
}
inline void OnvifZoomOutReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifZoomOutReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomOutReply.code)
}

// string msg = 2;
inline void OnvifZoomOutReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomOutReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomOutReply.msg)
  return _internal_msg();
}
inline void OnvifZoomOutReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomOutReply.msg)
}
inline std::string* OnvifZoomOutReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomOutReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifZoomOutReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifZoomOutReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomOutReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomOutReply.msg)
}
inline void OnvifZoomOutReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomOutReply.msg)
}
inline void OnvifZoomOutReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomOutReply.msg)
}
inline std::string* OnvifZoomOutReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomOutReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomOutReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomOutReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomOutReply.msg)
}
inline std::string* OnvifZoomOutReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomOutReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomOutReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomOutReply.msg)
}

// -------------------------------------------------------------------

// OnvifZoomStopRequest

// string ip = 1;
inline void OnvifZoomStopRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomStopRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomStopRequest.ip)
  return _internal_ip();
}
inline void OnvifZoomStopRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomStopRequest.ip)
}
inline std::string* OnvifZoomStopRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomStopRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifZoomStopRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifZoomStopRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomStopRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomStopRequest.ip)
}
inline void OnvifZoomStopRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomStopRequest.ip)
}
inline void OnvifZoomStopRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomStopRequest.ip)
}
inline std::string* OnvifZoomStopRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomStopRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomStopRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomStopRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomStopRequest.ip)
}
inline std::string* OnvifZoomStopRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomStopRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomStopRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomStopRequest.ip)
}

// int32 port = 2;
inline void OnvifZoomStopRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomStopRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomStopRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomStopRequest.port)
  return _internal_port();
}
inline void OnvifZoomStopRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifZoomStopRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomStopRequest.port)
}

// string user = 3;
inline void OnvifZoomStopRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomStopRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomStopRequest.user)
  return _internal_user();
}
inline void OnvifZoomStopRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomStopRequest.user)
}
inline std::string* OnvifZoomStopRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomStopRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifZoomStopRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifZoomStopRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomStopRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomStopRequest.user)
}
inline void OnvifZoomStopRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomStopRequest.user)
}
inline void OnvifZoomStopRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomStopRequest.user)
}
inline std::string* OnvifZoomStopRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomStopRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomStopRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomStopRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomStopRequest.user)
}
inline std::string* OnvifZoomStopRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomStopRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomStopRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomStopRequest.user)
}

// string password = 4;
inline void OnvifZoomStopRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomStopRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomStopRequest.password)
  return _internal_password();
}
inline void OnvifZoomStopRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomStopRequest.password)
}
inline std::string* OnvifZoomStopRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomStopRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifZoomStopRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifZoomStopRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomStopRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomStopRequest.password)
}
inline void OnvifZoomStopRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomStopRequest.password)
}
inline void OnvifZoomStopRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomStopRequest.password)
}
inline std::string* OnvifZoomStopRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomStopRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomStopRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomStopRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomStopRequest.password)
}
inline std::string* OnvifZoomStopRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomStopRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomStopRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomStopRequest.password)
}

// int32 channel = 5;
inline void OnvifZoomStopRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomStopRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomStopRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomStopRequest.channel)
  return _internal_channel();
}
inline void OnvifZoomStopRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifZoomStopRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomStopRequest.channel)
}

// -------------------------------------------------------------------

// OnvifZoomStopReply

// int32 code = 1;
inline void OnvifZoomStopReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomStopReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifZoomStopReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomStopReply.code)
  return _internal_code();
}
inline void OnvifZoomStopReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifZoomStopReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomStopReply.code)
}

// string msg = 2;
inline void OnvifZoomStopReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifZoomStopReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifZoomStopReply.msg)
  return _internal_msg();
}
inline void OnvifZoomStopReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifZoomStopReply.msg)
}
inline std::string* OnvifZoomStopReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifZoomStopReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifZoomStopReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifZoomStopReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifZoomStopReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifZoomStopReply.msg)
}
inline void OnvifZoomStopReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifZoomStopReply.msg)
}
inline void OnvifZoomStopReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifZoomStopReply.msg)
}
inline std::string* OnvifZoomStopReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifZoomStopReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifZoomStopReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifZoomStopReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifZoomStopReply.msg)
}
inline std::string* OnvifZoomStopReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifZoomStopReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifZoomStopReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifZoomStopReply.msg)
}

// -------------------------------------------------------------------

// OnvifFocusNearRequest

// string ip = 1;
inline void OnvifFocusNearRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusNearRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusNearRequest.ip)
  return _internal_ip();
}
inline void OnvifFocusNearRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusNearRequest.ip)
}
inline std::string* OnvifFocusNearRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusNearRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifFocusNearRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifFocusNearRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusNearRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusNearRequest.ip)
}
inline void OnvifFocusNearRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusNearRequest.ip)
}
inline void OnvifFocusNearRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusNearRequest.ip)
}
inline std::string* OnvifFocusNearRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusNearRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusNearRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusNearRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusNearRequest.ip)
}
inline std::string* OnvifFocusNearRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusNearRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusNearRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusNearRequest.ip)
}

// int32 port = 2;
inline void OnvifFocusNearRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusNearRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusNearRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusNearRequest.port)
  return _internal_port();
}
inline void OnvifFocusNearRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifFocusNearRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusNearRequest.port)
}

// string user = 3;
inline void OnvifFocusNearRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusNearRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusNearRequest.user)
  return _internal_user();
}
inline void OnvifFocusNearRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusNearRequest.user)
}
inline std::string* OnvifFocusNearRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusNearRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifFocusNearRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifFocusNearRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusNearRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusNearRequest.user)
}
inline void OnvifFocusNearRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusNearRequest.user)
}
inline void OnvifFocusNearRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusNearRequest.user)
}
inline std::string* OnvifFocusNearRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusNearRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusNearRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusNearRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusNearRequest.user)
}
inline std::string* OnvifFocusNearRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusNearRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusNearRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusNearRequest.user)
}

// string password = 4;
inline void OnvifFocusNearRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusNearRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusNearRequest.password)
  return _internal_password();
}
inline void OnvifFocusNearRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusNearRequest.password)
}
inline std::string* OnvifFocusNearRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusNearRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifFocusNearRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifFocusNearRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusNearRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusNearRequest.password)
}
inline void OnvifFocusNearRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusNearRequest.password)
}
inline void OnvifFocusNearRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusNearRequest.password)
}
inline std::string* OnvifFocusNearRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusNearRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusNearRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusNearRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusNearRequest.password)
}
inline std::string* OnvifFocusNearRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusNearRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusNearRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusNearRequest.password)
}

// int32 channel = 5;
inline void OnvifFocusNearRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusNearRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusNearRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusNearRequest.channel)
  return _internal_channel();
}
inline void OnvifFocusNearRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifFocusNearRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusNearRequest.channel)
}

// float speed = 6;
inline void OnvifFocusNearRequest::clear_speed() {
  speed_ = 0;
}
inline float OnvifFocusNearRequest::_internal_speed() const {
  return speed_;
}
inline float OnvifFocusNearRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusNearRequest.speed)
  return _internal_speed();
}
inline void OnvifFocusNearRequest::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void OnvifFocusNearRequest::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusNearRequest.speed)
}

// -------------------------------------------------------------------

// OnvifFocusNearReply

// int32 code = 1;
inline void OnvifFocusNearReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusNearReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusNearReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusNearReply.code)
  return _internal_code();
}
inline void OnvifFocusNearReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifFocusNearReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusNearReply.code)
}

// string msg = 2;
inline void OnvifFocusNearReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusNearReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusNearReply.msg)
  return _internal_msg();
}
inline void OnvifFocusNearReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusNearReply.msg)
}
inline std::string* OnvifFocusNearReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusNearReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifFocusNearReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifFocusNearReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusNearReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusNearReply.msg)
}
inline void OnvifFocusNearReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusNearReply.msg)
}
inline void OnvifFocusNearReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusNearReply.msg)
}
inline std::string* OnvifFocusNearReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusNearReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusNearReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusNearReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusNearReply.msg)
}
inline std::string* OnvifFocusNearReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusNearReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusNearReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusNearReply.msg)
}

// -------------------------------------------------------------------

// OnvifFocusFarRequest

// string ip = 1;
inline void OnvifFocusFarRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusFarRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusFarRequest.ip)
  return _internal_ip();
}
inline void OnvifFocusFarRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusFarRequest.ip)
}
inline std::string* OnvifFocusFarRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusFarRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifFocusFarRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifFocusFarRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusFarRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusFarRequest.ip)
}
inline void OnvifFocusFarRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusFarRequest.ip)
}
inline void OnvifFocusFarRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusFarRequest.ip)
}
inline std::string* OnvifFocusFarRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusFarRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusFarRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusFarRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusFarRequest.ip)
}
inline std::string* OnvifFocusFarRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusFarRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusFarRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusFarRequest.ip)
}

// int32 port = 2;
inline void OnvifFocusFarRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusFarRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusFarRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusFarRequest.port)
  return _internal_port();
}
inline void OnvifFocusFarRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifFocusFarRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusFarRequest.port)
}

// string user = 3;
inline void OnvifFocusFarRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusFarRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusFarRequest.user)
  return _internal_user();
}
inline void OnvifFocusFarRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusFarRequest.user)
}
inline std::string* OnvifFocusFarRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusFarRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifFocusFarRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifFocusFarRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusFarRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusFarRequest.user)
}
inline void OnvifFocusFarRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusFarRequest.user)
}
inline void OnvifFocusFarRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusFarRequest.user)
}
inline std::string* OnvifFocusFarRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusFarRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusFarRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusFarRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusFarRequest.user)
}
inline std::string* OnvifFocusFarRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusFarRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusFarRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusFarRequest.user)
}

// string password = 4;
inline void OnvifFocusFarRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusFarRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusFarRequest.password)
  return _internal_password();
}
inline void OnvifFocusFarRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusFarRequest.password)
}
inline std::string* OnvifFocusFarRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusFarRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifFocusFarRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifFocusFarRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusFarRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusFarRequest.password)
}
inline void OnvifFocusFarRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusFarRequest.password)
}
inline void OnvifFocusFarRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusFarRequest.password)
}
inline std::string* OnvifFocusFarRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusFarRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusFarRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusFarRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusFarRequest.password)
}
inline std::string* OnvifFocusFarRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusFarRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusFarRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusFarRequest.password)
}

// int32 channel = 5;
inline void OnvifFocusFarRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusFarRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusFarRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusFarRequest.channel)
  return _internal_channel();
}
inline void OnvifFocusFarRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifFocusFarRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusFarRequest.channel)
}

// float speed = 6;
inline void OnvifFocusFarRequest::clear_speed() {
  speed_ = 0;
}
inline float OnvifFocusFarRequest::_internal_speed() const {
  return speed_;
}
inline float OnvifFocusFarRequest::speed() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusFarRequest.speed)
  return _internal_speed();
}
inline void OnvifFocusFarRequest::_internal_set_speed(float value) {
  
  speed_ = value;
}
inline void OnvifFocusFarRequest::set_speed(float value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusFarRequest.speed)
}

// -------------------------------------------------------------------

// OnvifFocusFarReply

// int32 code = 1;
inline void OnvifFocusFarReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusFarReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusFarReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusFarReply.code)
  return _internal_code();
}
inline void OnvifFocusFarReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifFocusFarReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusFarReply.code)
}

// string msg = 2;
inline void OnvifFocusFarReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusFarReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusFarReply.msg)
  return _internal_msg();
}
inline void OnvifFocusFarReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusFarReply.msg)
}
inline std::string* OnvifFocusFarReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusFarReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifFocusFarReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifFocusFarReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusFarReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusFarReply.msg)
}
inline void OnvifFocusFarReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusFarReply.msg)
}
inline void OnvifFocusFarReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusFarReply.msg)
}
inline std::string* OnvifFocusFarReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusFarReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusFarReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusFarReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusFarReply.msg)
}
inline std::string* OnvifFocusFarReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusFarReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusFarReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusFarReply.msg)
}

// -------------------------------------------------------------------

// OnvifFocusStopRequest

// string ip = 1;
inline void OnvifFocusStopRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusStopRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusStopRequest.ip)
  return _internal_ip();
}
inline void OnvifFocusStopRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusStopRequest.ip)
}
inline std::string* OnvifFocusStopRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusStopRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifFocusStopRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifFocusStopRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusStopRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusStopRequest.ip)
}
inline void OnvifFocusStopRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusStopRequest.ip)
}
inline void OnvifFocusStopRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusStopRequest.ip)
}
inline std::string* OnvifFocusStopRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusStopRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusStopRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusStopRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusStopRequest.ip)
}
inline std::string* OnvifFocusStopRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusStopRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusStopRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusStopRequest.ip)
}

// int32 port = 2;
inline void OnvifFocusStopRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusStopRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusStopRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusStopRequest.port)
  return _internal_port();
}
inline void OnvifFocusStopRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifFocusStopRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusStopRequest.port)
}

// string user = 3;
inline void OnvifFocusStopRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusStopRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusStopRequest.user)
  return _internal_user();
}
inline void OnvifFocusStopRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusStopRequest.user)
}
inline std::string* OnvifFocusStopRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusStopRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifFocusStopRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifFocusStopRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusStopRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusStopRequest.user)
}
inline void OnvifFocusStopRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusStopRequest.user)
}
inline void OnvifFocusStopRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusStopRequest.user)
}
inline std::string* OnvifFocusStopRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusStopRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusStopRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusStopRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusStopRequest.user)
}
inline std::string* OnvifFocusStopRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusStopRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusStopRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusStopRequest.user)
}

// string password = 4;
inline void OnvifFocusStopRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusStopRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusStopRequest.password)
  return _internal_password();
}
inline void OnvifFocusStopRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusStopRequest.password)
}
inline std::string* OnvifFocusStopRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusStopRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifFocusStopRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifFocusStopRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusStopRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusStopRequest.password)
}
inline void OnvifFocusStopRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusStopRequest.password)
}
inline void OnvifFocusStopRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusStopRequest.password)
}
inline std::string* OnvifFocusStopRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusStopRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusStopRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusStopRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusStopRequest.password)
}
inline std::string* OnvifFocusStopRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusStopRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusStopRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusStopRequest.password)
}

// int32 channel = 5;
inline void OnvifFocusStopRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusStopRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusStopRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusStopRequest.channel)
  return _internal_channel();
}
inline void OnvifFocusStopRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifFocusStopRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusStopRequest.channel)
}

// -------------------------------------------------------------------

// OnvifFocusStopReply

// int32 code = 1;
inline void OnvifFocusStopReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusStopReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifFocusStopReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusStopReply.code)
  return _internal_code();
}
inline void OnvifFocusStopReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifFocusStopReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusStopReply.code)
}

// string msg = 2;
inline void OnvifFocusStopReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifFocusStopReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifFocusStopReply.msg)
  return _internal_msg();
}
inline void OnvifFocusStopReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifFocusStopReply.msg)
}
inline std::string* OnvifFocusStopReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifFocusStopReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifFocusStopReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifFocusStopReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifFocusStopReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifFocusStopReply.msg)
}
inline void OnvifFocusStopReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifFocusStopReply.msg)
}
inline void OnvifFocusStopReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifFocusStopReply.msg)
}
inline std::string* OnvifFocusStopReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifFocusStopReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifFocusStopReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifFocusStopReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifFocusStopReply.msg)
}
inline std::string* OnvifFocusStopReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifFocusStopReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifFocusStopReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifFocusStopReply.msg)
}

// -------------------------------------------------------------------

// OnvifPtz3DRequest

// string ip = 1;
inline void OnvifPtz3DRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtz3DRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.ip)
  return _internal_ip();
}
inline void OnvifPtz3DRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.ip)
}
inline std::string* OnvifPtz3DRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtz3DRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifPtz3DRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifPtz3DRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtz3DRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtz3DRequest.ip)
}
inline void OnvifPtz3DRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtz3DRequest.ip)
}
inline void OnvifPtz3DRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtz3DRequest.ip)
}
inline std::string* OnvifPtz3DRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtz3DRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtz3DRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtz3DRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtz3DRequest.ip)
}
inline std::string* OnvifPtz3DRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtz3DRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtz3DRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtz3DRequest.ip)
}

// int32 port = 2;
inline void OnvifPtz3DRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.port)
  return _internal_port();
}
inline void OnvifPtz3DRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifPtz3DRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.port)
}

// string user = 3;
inline void OnvifPtz3DRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtz3DRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.user)
  return _internal_user();
}
inline void OnvifPtz3DRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.user)
}
inline std::string* OnvifPtz3DRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtz3DRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifPtz3DRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifPtz3DRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtz3DRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtz3DRequest.user)
}
inline void OnvifPtz3DRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtz3DRequest.user)
}
inline void OnvifPtz3DRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtz3DRequest.user)
}
inline std::string* OnvifPtz3DRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtz3DRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtz3DRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtz3DRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtz3DRequest.user)
}
inline std::string* OnvifPtz3DRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtz3DRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtz3DRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtz3DRequest.user)
}

// string password = 4;
inline void OnvifPtz3DRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtz3DRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.password)
  return _internal_password();
}
inline void OnvifPtz3DRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.password)
}
inline std::string* OnvifPtz3DRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtz3DRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifPtz3DRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifPtz3DRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtz3DRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtz3DRequest.password)
}
inline void OnvifPtz3DRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtz3DRequest.password)
}
inline void OnvifPtz3DRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtz3DRequest.password)
}
inline std::string* OnvifPtz3DRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtz3DRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtz3DRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtz3DRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtz3DRequest.password)
}
inline std::string* OnvifPtz3DRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtz3DRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtz3DRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtz3DRequest.password)
}

// int32 channel = 5;
inline void OnvifPtz3DRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.channel)
  return _internal_channel();
}
inline void OnvifPtz3DRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifPtz3DRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.channel)
}

// int32 x1 = 6;
inline void OnvifPtz3DRequest::clear_x1() {
  x1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::_internal_x1() const {
  return x1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::x1() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.x1)
  return _internal_x1();
}
inline void OnvifPtz3DRequest::_internal_set_x1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x1_ = value;
}
inline void OnvifPtz3DRequest::set_x1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x1(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.x1)
}

// int32 y1 = 7;
inline void OnvifPtz3DRequest::clear_y1() {
  y1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::_internal_y1() const {
  return y1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::y1() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.y1)
  return _internal_y1();
}
inline void OnvifPtz3DRequest::_internal_set_y1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y1_ = value;
}
inline void OnvifPtz3DRequest::set_y1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y1(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.y1)
}

// int32 x2 = 8;
inline void OnvifPtz3DRequest::clear_x2() {
  x2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::_internal_x2() const {
  return x2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::x2() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.x2)
  return _internal_x2();
}
inline void OnvifPtz3DRequest::_internal_set_x2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  x2_ = value;
}
inline void OnvifPtz3DRequest::set_x2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_x2(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.x2)
}

// int32 y2 = 9;
inline void OnvifPtz3DRequest::clear_y2() {
  y2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::_internal_y2() const {
  return y2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::y2() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.y2)
  return _internal_y2();
}
inline void OnvifPtz3DRequest::_internal_set_y2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  y2_ = value;
}
inline void OnvifPtz3DRequest::set_y2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_y2(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.y2)
}

// int32 width = 10;
inline void OnvifPtz3DRequest::clear_width() {
  width_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::width() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.width)
  return _internal_width();
}
inline void OnvifPtz3DRequest::_internal_set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  width_ = value;
}
inline void OnvifPtz3DRequest::set_width(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.width)
}

// int32 height = 11;
inline void OnvifPtz3DRequest::clear_height() {
  height_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DRequest::height() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DRequest.height)
  return _internal_height();
}
inline void OnvifPtz3DRequest::_internal_set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  height_ = value;
}
inline void OnvifPtz3DRequest::set_height(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DRequest.height)
}

// -------------------------------------------------------------------

// OnvifPtz3DReply

// int32 code = 1;
inline void OnvifPtz3DReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifPtz3DReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DReply.code)
  return _internal_code();
}
inline void OnvifPtz3DReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifPtz3DReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DReply.code)
}

// string msg = 2;
inline void OnvifPtz3DReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPtz3DReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPtz3DReply.msg)
  return _internal_msg();
}
inline void OnvifPtz3DReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPtz3DReply.msg)
}
inline std::string* OnvifPtz3DReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPtz3DReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifPtz3DReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifPtz3DReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPtz3DReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPtz3DReply.msg)
}
inline void OnvifPtz3DReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPtz3DReply.msg)
}
inline void OnvifPtz3DReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPtz3DReply.msg)
}
inline std::string* OnvifPtz3DReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPtz3DReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPtz3DReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPtz3DReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPtz3DReply.msg)
}
inline std::string* OnvifPtz3DReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPtz3DReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPtz3DReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPtz3DReply.msg)
}

// -------------------------------------------------------------------

// OnvifPresetInfo

// bytes preToken = 1;
inline void OnvifPresetInfo::clear_pretoken() {
  pretoken_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPresetInfo::pretoken() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPresetInfo.preToken)
  return _internal_pretoken();
}
inline void OnvifPresetInfo::set_pretoken(const std::string& value) {
  _internal_set_pretoken(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPresetInfo.preToken)
}
inline std::string* OnvifPresetInfo::mutable_pretoken() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPresetInfo.preToken)
  return _internal_mutable_pretoken();
}
inline const std::string& OnvifPresetInfo::_internal_pretoken() const {
  return pretoken_.Get();
}
inline void OnvifPresetInfo::_internal_set_pretoken(const std::string& value) {
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPresetInfo::set_pretoken(std::string&& value) {
  
  pretoken_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPresetInfo.preToken)
}
inline void OnvifPresetInfo::set_pretoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPresetInfo.preToken)
}
inline void OnvifPresetInfo::set_pretoken(const void* value,
    size_t size) {
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPresetInfo.preToken)
}
inline std::string* OnvifPresetInfo::_internal_mutable_pretoken() {
  
  return pretoken_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPresetInfo::release_pretoken() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPresetInfo.preToken)
  return pretoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPresetInfo::set_allocated_pretoken(std::string* pretoken) {
  if (pretoken != nullptr) {
    
  } else {
    
  }
  pretoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pretoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPresetInfo.preToken)
}
inline std::string* OnvifPresetInfo::unsafe_arena_release_pretoken() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPresetInfo.preToken)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pretoken_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPresetInfo::unsafe_arena_set_allocated_pretoken(
    std::string* pretoken) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pretoken != nullptr) {
    
  } else {
    
  }
  pretoken_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pretoken, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPresetInfo.preToken)
}

// bytes preName = 2;
inline void OnvifPresetInfo::clear_prename() {
  prename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifPresetInfo::prename() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifPresetInfo.preName)
  return _internal_prename();
}
inline void OnvifPresetInfo::set_prename(const std::string& value) {
  _internal_set_prename(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifPresetInfo.preName)
}
inline std::string* OnvifPresetInfo::mutable_prename() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifPresetInfo.preName)
  return _internal_mutable_prename();
}
inline const std::string& OnvifPresetInfo::_internal_prename() const {
  return prename_.Get();
}
inline void OnvifPresetInfo::_internal_set_prename(const std::string& value) {
  
  prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifPresetInfo::set_prename(std::string&& value) {
  
  prename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifPresetInfo.preName)
}
inline void OnvifPresetInfo::set_prename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifPresetInfo.preName)
}
inline void OnvifPresetInfo::set_prename(const void* value,
    size_t size) {
  
  prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifPresetInfo.preName)
}
inline std::string* OnvifPresetInfo::_internal_mutable_prename() {
  
  return prename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifPresetInfo::release_prename() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifPresetInfo.preName)
  return prename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifPresetInfo::set_allocated_prename(std::string* prename) {
  if (prename != nullptr) {
    
  } else {
    
  }
  prename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifPresetInfo.preName)
}
inline std::string* OnvifPresetInfo::unsafe_arena_release_prename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifPresetInfo.preName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return prename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifPresetInfo::unsafe_arena_set_allocated_prename(
    std::string* prename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prename != nullptr) {
    
  } else {
    
  }
  prename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifPresetInfo.preName)
}

// -------------------------------------------------------------------

// OnvifGetPresetRequest

// string ip = 1;
inline void OnvifGetPresetRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetPresetRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetPresetRequest.ip)
  return _internal_ip();
}
inline void OnvifGetPresetRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetPresetRequest.ip)
}
inline std::string* OnvifGetPresetRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetPresetRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifGetPresetRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifGetPresetRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetPresetRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetPresetRequest.ip)
}
inline void OnvifGetPresetRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetPresetRequest.ip)
}
inline void OnvifGetPresetRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetPresetRequest.ip)
}
inline std::string* OnvifGetPresetRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetPresetRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetPresetRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetPresetRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetPresetRequest.ip)
}
inline std::string* OnvifGetPresetRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetPresetRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetPresetRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetPresetRequest.ip)
}

// int32 port = 2;
inline void OnvifGetPresetRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetPresetRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetPresetRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetPresetRequest.port)
  return _internal_port();
}
inline void OnvifGetPresetRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifGetPresetRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetPresetRequest.port)
}

// string user = 3;
inline void OnvifGetPresetRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetPresetRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetPresetRequest.user)
  return _internal_user();
}
inline void OnvifGetPresetRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetPresetRequest.user)
}
inline std::string* OnvifGetPresetRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetPresetRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifGetPresetRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifGetPresetRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetPresetRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetPresetRequest.user)
}
inline void OnvifGetPresetRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetPresetRequest.user)
}
inline void OnvifGetPresetRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetPresetRequest.user)
}
inline std::string* OnvifGetPresetRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetPresetRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetPresetRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetPresetRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetPresetRequest.user)
}
inline std::string* OnvifGetPresetRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetPresetRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetPresetRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetPresetRequest.user)
}

// string password = 4;
inline void OnvifGetPresetRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetPresetRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetPresetRequest.password)
  return _internal_password();
}
inline void OnvifGetPresetRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetPresetRequest.password)
}
inline std::string* OnvifGetPresetRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetPresetRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifGetPresetRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifGetPresetRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetPresetRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetPresetRequest.password)
}
inline void OnvifGetPresetRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetPresetRequest.password)
}
inline void OnvifGetPresetRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetPresetRequest.password)
}
inline std::string* OnvifGetPresetRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetPresetRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetPresetRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetPresetRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetPresetRequest.password)
}
inline std::string* OnvifGetPresetRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetPresetRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetPresetRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetPresetRequest.password)
}

// int32 channel = 5;
inline void OnvifGetPresetRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetPresetRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetPresetRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetPresetRequest.channel)
  return _internal_channel();
}
inline void OnvifGetPresetRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifGetPresetRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetPresetRequest.channel)
}

// -------------------------------------------------------------------

// OnvifGetPresetReply

// repeated .GB28181.OnvifPresetInfo presetList = 1;
inline int OnvifGetPresetReply::_internal_presetlist_size() const {
  return presetlist_.size();
}
inline int OnvifGetPresetReply::presetlist_size() const {
  return _internal_presetlist_size();
}
inline void OnvifGetPresetReply::clear_presetlist() {
  presetlist_.Clear();
}
inline ::GB28181::OnvifPresetInfo* OnvifGetPresetReply::mutable_presetlist(int index) {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetPresetReply.presetList)
  return presetlist_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::OnvifPresetInfo >*
OnvifGetPresetReply::mutable_presetlist() {
  // @@protoc_insertion_point(field_mutable_list:GB28181.OnvifGetPresetReply.presetList)
  return &presetlist_;
}
inline const ::GB28181::OnvifPresetInfo& OnvifGetPresetReply::_internal_presetlist(int index) const {
  return presetlist_.Get(index);
}
inline const ::GB28181::OnvifPresetInfo& OnvifGetPresetReply::presetlist(int index) const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetPresetReply.presetList)
  return _internal_presetlist(index);
}
inline ::GB28181::OnvifPresetInfo* OnvifGetPresetReply::_internal_add_presetlist() {
  return presetlist_.Add();
}
inline ::GB28181::OnvifPresetInfo* OnvifGetPresetReply::add_presetlist() {
  // @@protoc_insertion_point(field_add:GB28181.OnvifGetPresetReply.presetList)
  return _internal_add_presetlist();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::GB28181::OnvifPresetInfo >&
OnvifGetPresetReply::presetlist() const {
  // @@protoc_insertion_point(field_list:GB28181.OnvifGetPresetReply.presetList)
  return presetlist_;
}

// int32 code = 2;
inline void OnvifGetPresetReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetPresetReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetPresetReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetPresetReply.code)
  return _internal_code();
}
inline void OnvifGetPresetReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifGetPresetReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetPresetReply.code)
}

// string msg = 3;
inline void OnvifGetPresetReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetPresetReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetPresetReply.msg)
  return _internal_msg();
}
inline void OnvifGetPresetReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetPresetReply.msg)
}
inline std::string* OnvifGetPresetReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetPresetReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifGetPresetReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifGetPresetReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetPresetReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetPresetReply.msg)
}
inline void OnvifGetPresetReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetPresetReply.msg)
}
inline void OnvifGetPresetReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetPresetReply.msg)
}
inline std::string* OnvifGetPresetReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetPresetReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetPresetReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetPresetReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetPresetReply.msg)
}
inline std::string* OnvifGetPresetReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetPresetReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetPresetReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetPresetReply.msg)
}

// -------------------------------------------------------------------

// OnvifGotoPresetRequest

// string ip = 1;
inline void OnvifGotoPresetRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGotoPresetRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGotoPresetRequest.ip)
  return _internal_ip();
}
inline void OnvifGotoPresetRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGotoPresetRequest.ip)
}
inline std::string* OnvifGotoPresetRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGotoPresetRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifGotoPresetRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifGotoPresetRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGotoPresetRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGotoPresetRequest.ip)
}
inline void OnvifGotoPresetRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGotoPresetRequest.ip)
}
inline void OnvifGotoPresetRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGotoPresetRequest.ip)
}
inline std::string* OnvifGotoPresetRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGotoPresetRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGotoPresetRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGotoPresetRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGotoPresetRequest.ip)
}
inline std::string* OnvifGotoPresetRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGotoPresetRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGotoPresetRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGotoPresetRequest.ip)
}

// int32 port = 2;
inline void OnvifGotoPresetRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGotoPresetRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGotoPresetRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGotoPresetRequest.port)
  return _internal_port();
}
inline void OnvifGotoPresetRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifGotoPresetRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGotoPresetRequest.port)
}

// string user = 3;
inline void OnvifGotoPresetRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGotoPresetRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGotoPresetRequest.user)
  return _internal_user();
}
inline void OnvifGotoPresetRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGotoPresetRequest.user)
}
inline std::string* OnvifGotoPresetRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGotoPresetRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifGotoPresetRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifGotoPresetRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGotoPresetRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGotoPresetRequest.user)
}
inline void OnvifGotoPresetRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGotoPresetRequest.user)
}
inline void OnvifGotoPresetRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGotoPresetRequest.user)
}
inline std::string* OnvifGotoPresetRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGotoPresetRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGotoPresetRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGotoPresetRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGotoPresetRequest.user)
}
inline std::string* OnvifGotoPresetRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGotoPresetRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGotoPresetRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGotoPresetRequest.user)
}

// string password = 4;
inline void OnvifGotoPresetRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGotoPresetRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGotoPresetRequest.password)
  return _internal_password();
}
inline void OnvifGotoPresetRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGotoPresetRequest.password)
}
inline std::string* OnvifGotoPresetRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGotoPresetRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifGotoPresetRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifGotoPresetRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGotoPresetRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGotoPresetRequest.password)
}
inline void OnvifGotoPresetRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGotoPresetRequest.password)
}
inline void OnvifGotoPresetRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGotoPresetRequest.password)
}
inline std::string* OnvifGotoPresetRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGotoPresetRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGotoPresetRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGotoPresetRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGotoPresetRequest.password)
}
inline std::string* OnvifGotoPresetRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGotoPresetRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGotoPresetRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGotoPresetRequest.password)
}

// int32 channel = 5;
inline void OnvifGotoPresetRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGotoPresetRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGotoPresetRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGotoPresetRequest.channel)
  return _internal_channel();
}
inline void OnvifGotoPresetRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifGotoPresetRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGotoPresetRequest.channel)
}

// bytes preToken = 6;
inline void OnvifGotoPresetRequest::clear_pretoken() {
  pretoken_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGotoPresetRequest::pretoken() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGotoPresetRequest.preToken)
  return _internal_pretoken();
}
inline void OnvifGotoPresetRequest::set_pretoken(const std::string& value) {
  _internal_set_pretoken(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGotoPresetRequest.preToken)
}
inline std::string* OnvifGotoPresetRequest::mutable_pretoken() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGotoPresetRequest.preToken)
  return _internal_mutable_pretoken();
}
inline const std::string& OnvifGotoPresetRequest::_internal_pretoken() const {
  return pretoken_.Get();
}
inline void OnvifGotoPresetRequest::_internal_set_pretoken(const std::string& value) {
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGotoPresetRequest::set_pretoken(std::string&& value) {
  
  pretoken_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGotoPresetRequest.preToken)
}
inline void OnvifGotoPresetRequest::set_pretoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGotoPresetRequest.preToken)
}
inline void OnvifGotoPresetRequest::set_pretoken(const void* value,
    size_t size) {
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGotoPresetRequest.preToken)
}
inline std::string* OnvifGotoPresetRequest::_internal_mutable_pretoken() {
  
  return pretoken_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGotoPresetRequest::release_pretoken() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGotoPresetRequest.preToken)
  return pretoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGotoPresetRequest::set_allocated_pretoken(std::string* pretoken) {
  if (pretoken != nullptr) {
    
  } else {
    
  }
  pretoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pretoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGotoPresetRequest.preToken)
}
inline std::string* OnvifGotoPresetRequest::unsafe_arena_release_pretoken() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGotoPresetRequest.preToken)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pretoken_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGotoPresetRequest::unsafe_arena_set_allocated_pretoken(
    std::string* pretoken) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pretoken != nullptr) {
    
  } else {
    
  }
  pretoken_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pretoken, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGotoPresetRequest.preToken)
}

// -------------------------------------------------------------------

// OnvifGotoPresetReply

// int32 code = 1;
inline void OnvifGotoPresetReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGotoPresetReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGotoPresetReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGotoPresetReply.code)
  return _internal_code();
}
inline void OnvifGotoPresetReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifGotoPresetReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGotoPresetReply.code)
}

// string msg = 2;
inline void OnvifGotoPresetReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGotoPresetReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGotoPresetReply.msg)
  return _internal_msg();
}
inline void OnvifGotoPresetReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGotoPresetReply.msg)
}
inline std::string* OnvifGotoPresetReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGotoPresetReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifGotoPresetReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifGotoPresetReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGotoPresetReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGotoPresetReply.msg)
}
inline void OnvifGotoPresetReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGotoPresetReply.msg)
}
inline void OnvifGotoPresetReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGotoPresetReply.msg)
}
inline std::string* OnvifGotoPresetReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGotoPresetReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGotoPresetReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGotoPresetReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGotoPresetReply.msg)
}
inline std::string* OnvifGotoPresetReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGotoPresetReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGotoPresetReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGotoPresetReply.msg)
}

// -------------------------------------------------------------------

// OnvifSetPresetRequest

// string ip = 1;
inline void OnvifSetPresetRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifSetPresetRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetRequest.ip)
  return _internal_ip();
}
inline void OnvifSetPresetRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetRequest.ip)
}
inline std::string* OnvifSetPresetRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifSetPresetRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifSetPresetRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifSetPresetRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifSetPresetRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifSetPresetRequest.ip)
}
inline void OnvifSetPresetRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifSetPresetRequest.ip)
}
inline void OnvifSetPresetRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifSetPresetRequest.ip)
}
inline std::string* OnvifSetPresetRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifSetPresetRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifSetPresetRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifSetPresetRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifSetPresetRequest.ip)
}
inline std::string* OnvifSetPresetRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifSetPresetRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifSetPresetRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifSetPresetRequest.ip)
}

// int32 port = 2;
inline void OnvifSetPresetRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifSetPresetRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifSetPresetRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetRequest.port)
  return _internal_port();
}
inline void OnvifSetPresetRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifSetPresetRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetRequest.port)
}

// string user = 3;
inline void OnvifSetPresetRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifSetPresetRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetRequest.user)
  return _internal_user();
}
inline void OnvifSetPresetRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetRequest.user)
}
inline std::string* OnvifSetPresetRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifSetPresetRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifSetPresetRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifSetPresetRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifSetPresetRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifSetPresetRequest.user)
}
inline void OnvifSetPresetRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifSetPresetRequest.user)
}
inline void OnvifSetPresetRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifSetPresetRequest.user)
}
inline std::string* OnvifSetPresetRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifSetPresetRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifSetPresetRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifSetPresetRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifSetPresetRequest.user)
}
inline std::string* OnvifSetPresetRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifSetPresetRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifSetPresetRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifSetPresetRequest.user)
}

// string password = 4;
inline void OnvifSetPresetRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifSetPresetRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetRequest.password)
  return _internal_password();
}
inline void OnvifSetPresetRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetRequest.password)
}
inline std::string* OnvifSetPresetRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifSetPresetRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifSetPresetRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifSetPresetRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifSetPresetRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifSetPresetRequest.password)
}
inline void OnvifSetPresetRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifSetPresetRequest.password)
}
inline void OnvifSetPresetRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifSetPresetRequest.password)
}
inline std::string* OnvifSetPresetRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifSetPresetRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifSetPresetRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifSetPresetRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifSetPresetRequest.password)
}
inline std::string* OnvifSetPresetRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifSetPresetRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifSetPresetRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifSetPresetRequest.password)
}

// int32 channel = 5;
inline void OnvifSetPresetRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifSetPresetRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifSetPresetRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetRequest.channel)
  return _internal_channel();
}
inline void OnvifSetPresetRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifSetPresetRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetRequest.channel)
}

// bytes preToken = 6;
inline void OnvifSetPresetRequest::clear_pretoken() {
  pretoken_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifSetPresetRequest::pretoken() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetRequest.preToken)
  return _internal_pretoken();
}
inline void OnvifSetPresetRequest::set_pretoken(const std::string& value) {
  _internal_set_pretoken(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetRequest.preToken)
}
inline std::string* OnvifSetPresetRequest::mutable_pretoken() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifSetPresetRequest.preToken)
  return _internal_mutable_pretoken();
}
inline const std::string& OnvifSetPresetRequest::_internal_pretoken() const {
  return pretoken_.Get();
}
inline void OnvifSetPresetRequest::_internal_set_pretoken(const std::string& value) {
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifSetPresetRequest::set_pretoken(std::string&& value) {
  
  pretoken_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifSetPresetRequest.preToken)
}
inline void OnvifSetPresetRequest::set_pretoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifSetPresetRequest.preToken)
}
inline void OnvifSetPresetRequest::set_pretoken(const void* value,
    size_t size) {
  
  pretoken_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifSetPresetRequest.preToken)
}
inline std::string* OnvifSetPresetRequest::_internal_mutable_pretoken() {
  
  return pretoken_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifSetPresetRequest::release_pretoken() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifSetPresetRequest.preToken)
  return pretoken_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifSetPresetRequest::set_allocated_pretoken(std::string* pretoken) {
  if (pretoken != nullptr) {
    
  } else {
    
  }
  pretoken_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pretoken,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifSetPresetRequest.preToken)
}
inline std::string* OnvifSetPresetRequest::unsafe_arena_release_pretoken() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifSetPresetRequest.preToken)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return pretoken_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifSetPresetRequest::unsafe_arena_set_allocated_pretoken(
    std::string* pretoken) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (pretoken != nullptr) {
    
  } else {
    
  }
  pretoken_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      pretoken, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifSetPresetRequest.preToken)
}

// bytes preName = 7;
inline void OnvifSetPresetRequest::clear_prename() {
  prename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifSetPresetRequest::prename() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetRequest.preName)
  return _internal_prename();
}
inline void OnvifSetPresetRequest::set_prename(const std::string& value) {
  _internal_set_prename(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetRequest.preName)
}
inline std::string* OnvifSetPresetRequest::mutable_prename() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifSetPresetRequest.preName)
  return _internal_mutable_prename();
}
inline const std::string& OnvifSetPresetRequest::_internal_prename() const {
  return prename_.Get();
}
inline void OnvifSetPresetRequest::_internal_set_prename(const std::string& value) {
  
  prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifSetPresetRequest::set_prename(std::string&& value) {
  
  prename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifSetPresetRequest.preName)
}
inline void OnvifSetPresetRequest::set_prename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifSetPresetRequest.preName)
}
inline void OnvifSetPresetRequest::set_prename(const void* value,
    size_t size) {
  
  prename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifSetPresetRequest.preName)
}
inline std::string* OnvifSetPresetRequest::_internal_mutable_prename() {
  
  return prename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifSetPresetRequest::release_prename() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifSetPresetRequest.preName)
  return prename_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifSetPresetRequest::set_allocated_prename(std::string* prename) {
  if (prename != nullptr) {
    
  } else {
    
  }
  prename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifSetPresetRequest.preName)
}
inline std::string* OnvifSetPresetRequest::unsafe_arena_release_prename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifSetPresetRequest.preName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return prename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifSetPresetRequest::unsafe_arena_set_allocated_prename(
    std::string* prename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (prename != nullptr) {
    
  } else {
    
  }
  prename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      prename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifSetPresetRequest.preName)
}

// -------------------------------------------------------------------

// OnvifSetPresetReply

// int32 code = 1;
inline void OnvifSetPresetReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifSetPresetReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifSetPresetReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetReply.code)
  return _internal_code();
}
inline void OnvifSetPresetReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifSetPresetReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetReply.code)
}

// string msg = 2;
inline void OnvifSetPresetReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifSetPresetReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifSetPresetReply.msg)
  return _internal_msg();
}
inline void OnvifSetPresetReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifSetPresetReply.msg)
}
inline std::string* OnvifSetPresetReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifSetPresetReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifSetPresetReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifSetPresetReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifSetPresetReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifSetPresetReply.msg)
}
inline void OnvifSetPresetReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifSetPresetReply.msg)
}
inline void OnvifSetPresetReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifSetPresetReply.msg)
}
inline std::string* OnvifSetPresetReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifSetPresetReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifSetPresetReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifSetPresetReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifSetPresetReply.msg)
}
inline std::string* OnvifSetPresetReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifSetPresetReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifSetPresetReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifSetPresetReply.msg)
}

// -------------------------------------------------------------------

// OnvifDeviceRebootRequest

// string ip = 1;
inline void OnvifDeviceRebootRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifDeviceRebootRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifDeviceRebootRequest.ip)
  return _internal_ip();
}
inline void OnvifDeviceRebootRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifDeviceRebootRequest.ip)
}
inline std::string* OnvifDeviceRebootRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifDeviceRebootRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifDeviceRebootRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifDeviceRebootRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifDeviceRebootRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifDeviceRebootRequest.ip)
}
inline void OnvifDeviceRebootRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifDeviceRebootRequest.ip)
}
inline void OnvifDeviceRebootRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifDeviceRebootRequest.ip)
}
inline std::string* OnvifDeviceRebootRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifDeviceRebootRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifDeviceRebootRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifDeviceRebootRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifDeviceRebootRequest.ip)
}
inline std::string* OnvifDeviceRebootRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifDeviceRebootRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifDeviceRebootRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifDeviceRebootRequest.ip)
}

// int32 port = 2;
inline void OnvifDeviceRebootRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifDeviceRebootRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifDeviceRebootRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifDeviceRebootRequest.port)
  return _internal_port();
}
inline void OnvifDeviceRebootRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifDeviceRebootRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifDeviceRebootRequest.port)
}

// string user = 3;
inline void OnvifDeviceRebootRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifDeviceRebootRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifDeviceRebootRequest.user)
  return _internal_user();
}
inline void OnvifDeviceRebootRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifDeviceRebootRequest.user)
}
inline std::string* OnvifDeviceRebootRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifDeviceRebootRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifDeviceRebootRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifDeviceRebootRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifDeviceRebootRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifDeviceRebootRequest.user)
}
inline void OnvifDeviceRebootRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifDeviceRebootRequest.user)
}
inline void OnvifDeviceRebootRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifDeviceRebootRequest.user)
}
inline std::string* OnvifDeviceRebootRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifDeviceRebootRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifDeviceRebootRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifDeviceRebootRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifDeviceRebootRequest.user)
}
inline std::string* OnvifDeviceRebootRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifDeviceRebootRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifDeviceRebootRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifDeviceRebootRequest.user)
}

// string password = 4;
inline void OnvifDeviceRebootRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifDeviceRebootRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifDeviceRebootRequest.password)
  return _internal_password();
}
inline void OnvifDeviceRebootRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifDeviceRebootRequest.password)
}
inline std::string* OnvifDeviceRebootRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifDeviceRebootRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifDeviceRebootRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifDeviceRebootRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifDeviceRebootRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifDeviceRebootRequest.password)
}
inline void OnvifDeviceRebootRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifDeviceRebootRequest.password)
}
inline void OnvifDeviceRebootRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifDeviceRebootRequest.password)
}
inline std::string* OnvifDeviceRebootRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifDeviceRebootRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifDeviceRebootRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifDeviceRebootRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifDeviceRebootRequest.password)
}
inline std::string* OnvifDeviceRebootRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifDeviceRebootRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifDeviceRebootRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifDeviceRebootRequest.password)
}

// int32 channel = 5;
inline void OnvifDeviceRebootRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifDeviceRebootRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifDeviceRebootRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifDeviceRebootRequest.channel)
  return _internal_channel();
}
inline void OnvifDeviceRebootRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifDeviceRebootRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifDeviceRebootRequest.channel)
}

// -------------------------------------------------------------------

// OnvifDeviceRebootReply

// int32 code = 1;
inline void OnvifDeviceRebootReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifDeviceRebootReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifDeviceRebootReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifDeviceRebootReply.code)
  return _internal_code();
}
inline void OnvifDeviceRebootReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifDeviceRebootReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifDeviceRebootReply.code)
}

// string msg = 2;
inline void OnvifDeviceRebootReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifDeviceRebootReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifDeviceRebootReply.msg)
  return _internal_msg();
}
inline void OnvifDeviceRebootReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifDeviceRebootReply.msg)
}
inline std::string* OnvifDeviceRebootReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifDeviceRebootReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifDeviceRebootReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifDeviceRebootReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifDeviceRebootReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifDeviceRebootReply.msg)
}
inline void OnvifDeviceRebootReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifDeviceRebootReply.msg)
}
inline void OnvifDeviceRebootReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifDeviceRebootReply.msg)
}
inline std::string* OnvifDeviceRebootReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifDeviceRebootReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifDeviceRebootReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifDeviceRebootReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifDeviceRebootReply.msg)
}
inline std::string* OnvifDeviceRebootReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifDeviceRebootReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifDeviceRebootReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifDeviceRebootReply.msg)
}

// -------------------------------------------------------------------

// OnvifGetMainUrlRequest

// string ip = 1;
inline void OnvifGetMainUrlRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetMainUrlRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetMainUrlRequest.ip)
  return _internal_ip();
}
inline void OnvifGetMainUrlRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetMainUrlRequest.ip)
}
inline std::string* OnvifGetMainUrlRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetMainUrlRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifGetMainUrlRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifGetMainUrlRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetMainUrlRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetMainUrlRequest.ip)
}
inline void OnvifGetMainUrlRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetMainUrlRequest.ip)
}
inline void OnvifGetMainUrlRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetMainUrlRequest.ip)
}
inline std::string* OnvifGetMainUrlRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetMainUrlRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetMainUrlRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetMainUrlRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetMainUrlRequest.ip)
}
inline std::string* OnvifGetMainUrlRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetMainUrlRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetMainUrlRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetMainUrlRequest.ip)
}

// int32 port = 2;
inline void OnvifGetMainUrlRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetMainUrlRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetMainUrlRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetMainUrlRequest.port)
  return _internal_port();
}
inline void OnvifGetMainUrlRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifGetMainUrlRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetMainUrlRequest.port)
}

// string user = 3;
inline void OnvifGetMainUrlRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetMainUrlRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetMainUrlRequest.user)
  return _internal_user();
}
inline void OnvifGetMainUrlRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetMainUrlRequest.user)
}
inline std::string* OnvifGetMainUrlRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetMainUrlRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifGetMainUrlRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifGetMainUrlRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetMainUrlRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetMainUrlRequest.user)
}
inline void OnvifGetMainUrlRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetMainUrlRequest.user)
}
inline void OnvifGetMainUrlRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetMainUrlRequest.user)
}
inline std::string* OnvifGetMainUrlRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetMainUrlRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetMainUrlRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetMainUrlRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetMainUrlRequest.user)
}
inline std::string* OnvifGetMainUrlRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetMainUrlRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetMainUrlRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetMainUrlRequest.user)
}

// string password = 4;
inline void OnvifGetMainUrlRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetMainUrlRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetMainUrlRequest.password)
  return _internal_password();
}
inline void OnvifGetMainUrlRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetMainUrlRequest.password)
}
inline std::string* OnvifGetMainUrlRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetMainUrlRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifGetMainUrlRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifGetMainUrlRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetMainUrlRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetMainUrlRequest.password)
}
inline void OnvifGetMainUrlRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetMainUrlRequest.password)
}
inline void OnvifGetMainUrlRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetMainUrlRequest.password)
}
inline std::string* OnvifGetMainUrlRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetMainUrlRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetMainUrlRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetMainUrlRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetMainUrlRequest.password)
}
inline std::string* OnvifGetMainUrlRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetMainUrlRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetMainUrlRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetMainUrlRequest.password)
}

// int32 channel = 5;
inline void OnvifGetMainUrlRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetMainUrlRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetMainUrlRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetMainUrlRequest.channel)
  return _internal_channel();
}
inline void OnvifGetMainUrlRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifGetMainUrlRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetMainUrlRequest.channel)
}

// -------------------------------------------------------------------

// OnvifGetMainUrlReply

// string url = 1;
inline void OnvifGetMainUrlReply::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetMainUrlReply::url() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetMainUrlReply.url)
  return _internal_url();
}
inline void OnvifGetMainUrlReply::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetMainUrlReply.url)
}
inline std::string* OnvifGetMainUrlReply::mutable_url() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetMainUrlReply.url)
  return _internal_mutable_url();
}
inline const std::string& OnvifGetMainUrlReply::_internal_url() const {
  return url_.Get();
}
inline void OnvifGetMainUrlReply::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetMainUrlReply::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetMainUrlReply.url)
}
inline void OnvifGetMainUrlReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetMainUrlReply.url)
}
inline void OnvifGetMainUrlReply::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetMainUrlReply.url)
}
inline std::string* OnvifGetMainUrlReply::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetMainUrlReply::release_url() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetMainUrlReply.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetMainUrlReply::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetMainUrlReply.url)
}
inline std::string* OnvifGetMainUrlReply::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetMainUrlReply.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetMainUrlReply::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetMainUrlReply.url)
}

// int32 code = 2;
inline void OnvifGetMainUrlReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetMainUrlReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetMainUrlReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetMainUrlReply.code)
  return _internal_code();
}
inline void OnvifGetMainUrlReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifGetMainUrlReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetMainUrlReply.code)
}

// string msg = 3;
inline void OnvifGetMainUrlReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetMainUrlReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetMainUrlReply.msg)
  return _internal_msg();
}
inline void OnvifGetMainUrlReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetMainUrlReply.msg)
}
inline std::string* OnvifGetMainUrlReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetMainUrlReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifGetMainUrlReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifGetMainUrlReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetMainUrlReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetMainUrlReply.msg)
}
inline void OnvifGetMainUrlReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetMainUrlReply.msg)
}
inline void OnvifGetMainUrlReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetMainUrlReply.msg)
}
inline std::string* OnvifGetMainUrlReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetMainUrlReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetMainUrlReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetMainUrlReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetMainUrlReply.msg)
}
inline std::string* OnvifGetMainUrlReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetMainUrlReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetMainUrlReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetMainUrlReply.msg)
}

// -------------------------------------------------------------------

// OnvifGetSubUrlRequest

// string ip = 1;
inline void OnvifGetSubUrlRequest::clear_ip() {
  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetSubUrlRequest::ip() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetSubUrlRequest.ip)
  return _internal_ip();
}
inline void OnvifGetSubUrlRequest::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetSubUrlRequest.ip)
}
inline std::string* OnvifGetSubUrlRequest::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetSubUrlRequest.ip)
  return _internal_mutable_ip();
}
inline const std::string& OnvifGetSubUrlRequest::_internal_ip() const {
  return ip_.Get();
}
inline void OnvifGetSubUrlRequest::_internal_set_ip(const std::string& value) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetSubUrlRequest::set_ip(std::string&& value) {
  
  ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetSubUrlRequest.ip)
}
inline void OnvifGetSubUrlRequest::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetSubUrlRequest.ip)
}
inline void OnvifGetSubUrlRequest::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetSubUrlRequest.ip)
}
inline std::string* OnvifGetSubUrlRequest::_internal_mutable_ip() {
  
  return ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetSubUrlRequest::release_ip() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetSubUrlRequest.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetSubUrlRequest::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetSubUrlRequest.ip)
}
inline std::string* OnvifGetSubUrlRequest::unsafe_arena_release_ip() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetSubUrlRequest.ip)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return ip_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetSubUrlRequest::unsafe_arena_set_allocated_ip(
    std::string* ip) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ip, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetSubUrlRequest.ip)
}

// int32 port = 2;
inline void OnvifGetSubUrlRequest::clear_port() {
  port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetSubUrlRequest::_internal_port() const {
  return port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetSubUrlRequest::port() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetSubUrlRequest.port)
  return _internal_port();
}
inline void OnvifGetSubUrlRequest::_internal_set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  port_ = value;
}
inline void OnvifGetSubUrlRequest::set_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetSubUrlRequest.port)
}

// string user = 3;
inline void OnvifGetSubUrlRequest::clear_user() {
  user_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetSubUrlRequest::user() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetSubUrlRequest.user)
  return _internal_user();
}
inline void OnvifGetSubUrlRequest::set_user(const std::string& value) {
  _internal_set_user(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetSubUrlRequest.user)
}
inline std::string* OnvifGetSubUrlRequest::mutable_user() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetSubUrlRequest.user)
  return _internal_mutable_user();
}
inline const std::string& OnvifGetSubUrlRequest::_internal_user() const {
  return user_.Get();
}
inline void OnvifGetSubUrlRequest::_internal_set_user(const std::string& value) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetSubUrlRequest::set_user(std::string&& value) {
  
  user_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetSubUrlRequest.user)
}
inline void OnvifGetSubUrlRequest::set_user(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetSubUrlRequest.user)
}
inline void OnvifGetSubUrlRequest::set_user(const char* value,
    size_t size) {
  
  user_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetSubUrlRequest.user)
}
inline std::string* OnvifGetSubUrlRequest::_internal_mutable_user() {
  
  return user_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetSubUrlRequest::release_user() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetSubUrlRequest.user)
  return user_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetSubUrlRequest::set_allocated_user(std::string* user) {
  if (user != nullptr) {
    
  } else {
    
  }
  user_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetSubUrlRequest.user)
}
inline std::string* OnvifGetSubUrlRequest::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetSubUrlRequest.user)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return user_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetSubUrlRequest::unsafe_arena_set_allocated_user(
    std::string* user) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (user != nullptr) {
    
  } else {
    
  }
  user_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      user, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetSubUrlRequest.user)
}

// string password = 4;
inline void OnvifGetSubUrlRequest::clear_password() {
  password_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetSubUrlRequest::password() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetSubUrlRequest.password)
  return _internal_password();
}
inline void OnvifGetSubUrlRequest::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetSubUrlRequest.password)
}
inline std::string* OnvifGetSubUrlRequest::mutable_password() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetSubUrlRequest.password)
  return _internal_mutable_password();
}
inline const std::string& OnvifGetSubUrlRequest::_internal_password() const {
  return password_.Get();
}
inline void OnvifGetSubUrlRequest::_internal_set_password(const std::string& value) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetSubUrlRequest::set_password(std::string&& value) {
  
  password_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetSubUrlRequest.password)
}
inline void OnvifGetSubUrlRequest::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetSubUrlRequest.password)
}
inline void OnvifGetSubUrlRequest::set_password(const char* value,
    size_t size) {
  
  password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetSubUrlRequest.password)
}
inline std::string* OnvifGetSubUrlRequest::_internal_mutable_password() {
  
  return password_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetSubUrlRequest::release_password() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetSubUrlRequest.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetSubUrlRequest::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetSubUrlRequest.password)
}
inline std::string* OnvifGetSubUrlRequest::unsafe_arena_release_password() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetSubUrlRequest.password)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return password_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetSubUrlRequest::unsafe_arena_set_allocated_password(
    std::string* password) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (password != nullptr) {
    
  } else {
    
  }
  password_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      password, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetSubUrlRequest.password)
}

// int32 channel = 5;
inline void OnvifGetSubUrlRequest::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetSubUrlRequest::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetSubUrlRequest::channel() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetSubUrlRequest.channel)
  return _internal_channel();
}
inline void OnvifGetSubUrlRequest::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void OnvifGetSubUrlRequest::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetSubUrlRequest.channel)
}

// -------------------------------------------------------------------

// OnvifGetSubUrlReply

// string url = 1;
inline void OnvifGetSubUrlReply::clear_url() {
  url_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetSubUrlReply::url() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetSubUrlReply.url)
  return _internal_url();
}
inline void OnvifGetSubUrlReply::set_url(const std::string& value) {
  _internal_set_url(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetSubUrlReply.url)
}
inline std::string* OnvifGetSubUrlReply::mutable_url() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetSubUrlReply.url)
  return _internal_mutable_url();
}
inline const std::string& OnvifGetSubUrlReply::_internal_url() const {
  return url_.Get();
}
inline void OnvifGetSubUrlReply::_internal_set_url(const std::string& value) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetSubUrlReply::set_url(std::string&& value) {
  
  url_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetSubUrlReply.url)
}
inline void OnvifGetSubUrlReply::set_url(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetSubUrlReply.url)
}
inline void OnvifGetSubUrlReply::set_url(const char* value,
    size_t size) {
  
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetSubUrlReply.url)
}
inline std::string* OnvifGetSubUrlReply::_internal_mutable_url() {
  
  return url_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetSubUrlReply::release_url() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetSubUrlReply.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetSubUrlReply::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetSubUrlReply.url)
}
inline std::string* OnvifGetSubUrlReply::unsafe_arena_release_url() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetSubUrlReply.url)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return url_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetSubUrlReply::unsafe_arena_set_allocated_url(
    std::string* url) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (url != nullptr) {
    
  } else {
    
  }
  url_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      url, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetSubUrlReply.url)
}

// int32 code = 2;
inline void OnvifGetSubUrlReply::clear_code() {
  code_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetSubUrlReply::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OnvifGetSubUrlReply::code() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetSubUrlReply.code)
  return _internal_code();
}
inline void OnvifGetSubUrlReply::_internal_set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  code_ = value;
}
inline void OnvifGetSubUrlReply::set_code(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetSubUrlReply.code)
}

// string msg = 3;
inline void OnvifGetSubUrlReply::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& OnvifGetSubUrlReply::msg() const {
  // @@protoc_insertion_point(field_get:GB28181.OnvifGetSubUrlReply.msg)
  return _internal_msg();
}
inline void OnvifGetSubUrlReply::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:GB28181.OnvifGetSubUrlReply.msg)
}
inline std::string* OnvifGetSubUrlReply::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:GB28181.OnvifGetSubUrlReply.msg)
  return _internal_mutable_msg();
}
inline const std::string& OnvifGetSubUrlReply::_internal_msg() const {
  return msg_.Get();
}
inline void OnvifGetSubUrlReply::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OnvifGetSubUrlReply::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:GB28181.OnvifGetSubUrlReply.msg)
}
inline void OnvifGetSubUrlReply::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:GB28181.OnvifGetSubUrlReply.msg)
}
inline void OnvifGetSubUrlReply::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:GB28181.OnvifGetSubUrlReply.msg)
}
inline std::string* OnvifGetSubUrlReply::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OnvifGetSubUrlReply::release_msg() {
  // @@protoc_insertion_point(field_release:GB28181.OnvifGetSubUrlReply.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OnvifGetSubUrlReply::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:GB28181.OnvifGetSubUrlReply.msg)
}
inline std::string* OnvifGetSubUrlReply::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:GB28181.OnvifGetSubUrlReply.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OnvifGetSubUrlReply::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:GB28181.OnvifGetSubUrlReply.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GB28181

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_gb28181_2eproto
